/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * 1This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "string.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define GPS_LENGTH 23
#define MIN5 0x012C
#define MIN1 0x003C
#define SEC10 0x000A
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */
#pragma location=0x30000000
ETH_DMADescTypeDef  DMARxDscrTab[ETH_RX_DESC_CNT]; /* Ethernet Rx DMA Descriptors */
#pragma location=0x30000200
ETH_DMADescTypeDef  DMATxDscrTab[ETH_TX_DESC_CNT]; /* Ethernet Tx DMA Descriptors */
#pragma location=0x30000260
uint8_t Rx_Buff[ETH_RX_DESC_CNT][ETH_MAX_PACKET_SIZE]; /* Ethernet Receive Buffers */

#elif defined ( __CC_ARM )  /* MDK ARM Compiler */

__attribute__((at(0x30000000))) ETH_DMADescTypeDef  DMARxDscrTab[ETH_RX_DESC_CNT]; /* Ethernet Rx DMA Descriptors */
__attribute__((at(0x30000200))) ETH_DMADescTypeDef  DMATxDscrTab[ETH_TX_DESC_CNT]; /* Ethernet Tx DMA Descriptors */
__attribute__((at(0x30000260))) uint8_t Rx_Buff[ETH_RX_DESC_CNT][ETH_MAX_PACKET_SIZE]; /* Ethernet Receive Buffer */

#elif defined ( __GNUC__ ) /* GNU Compiler */
ETH_DMADescTypeDef DMARxDscrTab[ETH_RX_DESC_CNT] __attribute__((section(".RxDecripSection"))); /* Ethernet Rx DMA Descriptors */
ETH_DMADescTypeDef DMATxDscrTab[ETH_TX_DESC_CNT] __attribute__((section(".TxDecripSection"))); /* Ethernet Tx DMA Descriptors */
uint8_t Rx_Buff[ETH_RX_DESC_CNT][ETH_MAX_PACKET_SIZE] __attribute__((section(".RxArraySection"))); /* Ethernet Receive Buffers */
#endif

ETH_TxPacketConfig TxConfig;

ETH_HandleTypeDef heth;

I2C_HandleTypeDef hi2c2;

RTC_HandleTypeDef hrtc;

UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USER CODE BEGIN PV */
float GPS_cleandata[2] = { 0 };
float NPK_cleandata[8] = { 0 }; //Données du capteur NPK
float SHT_cleandata[2] = { 0 };
unsigned long GAZ_cleandata[4] = {0};
int connected = 0;
int stop_gps = 0;
int got_gps = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ETH_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C2_Init(void);
static void MX_UART4_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_RTC_Init(void);
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t UART1_rxBuffer = 0; 	//Raw message LoRa
uint8_t UART2_rxBuffer = 0; 			//Raw message GPS
uint8_t UART3_rxBuffer = 0; 			//Raw message USB
uint8_t UART4_rxBuffer[21] = { 0 };		//Raw message NPK

//--Decodage GPS--
void GPS_Decode(char Caracter) {
	static uint8_t GPS_PositionMessage[GPS_LENGTH] = { 0 }; //Reception Message GPS
	static uint8_t Number = 0;
	static uint8_t j = 0;

	float Lattitude_Deg = 0;
	float Lattitude_Min = 0;
	float Longitude_Deg = 0;
	float Longitude_Min = 0;

	if ((UART2_rxBuffer == 'L') && (Number == 0)) {
		Number = 1;
	} else if ((UART2_rxBuffer == 'L') && (Number == 1)) {
		Number = 2;
	} else if ((UART2_rxBuffer == ',') && (Number == 2)) {
		Number = 3;
		j = 0;
	} else if (Number == 3) {
		GPS_PositionMessage[j++] = UART2_rxBuffer;

		if (j == GPS_LENGTH) {

			j = 0;
			Number = 0;
			Lattitude_Deg = 10 * (GPS_PositionMessage[0] - '0')
					+ (GPS_PositionMessage[1] - '0');
			Lattitude_Min = 10 * (float) ((GPS_PositionMessage[2] - '0'))
					+ (float) ((GPS_PositionMessage[3] - '0'))
					+ (float) ((GPS_PositionMessage[5] - '0') * 0.1)
					+ (float) ((GPS_PositionMessage[6] - '0') * 0.01)
					+ (float) ((GPS_PositionMessage[7] - '0') * 0.001)
					+ (float) ((GPS_PositionMessage[8] - '0') * 0.0001)
					+ (float) ((GPS_PositionMessage[9] - '0') * 0.00001);

			Longitude_Deg = 10 * (GPS_PositionMessage[14] - '0')
					+ (GPS_PositionMessage[15] - '0');
			Longitude_Min = 10 * (float) ((GPS_PositionMessage[16] - '0'))
					+ (float) ((GPS_PositionMessage[17] - '0'))
					+ (float) ((GPS_PositionMessage[19] - '0') * 0.1)
					+ (float) ((GPS_PositionMessage[20] - '0') * 0.01)
					+ (float) ((GPS_PositionMessage[21] - '0') * 0.001)
					+ (float) ((GPS_PositionMessage[22] - '0') * 0.0001)
					+ (float) ((GPS_PositionMessage[23] - '0') * 0.00001);

			GPS_cleandata[0] = Lattitude_Deg + Lattitude_Min / 60.0;
			GPS_cleandata[1] = Longitude_Deg + Longitude_Min / 60.0;
			stop_gps = 1;
			Number = 0;
		}
	} else {
		Number = 0;
	}
}

//--Decodage NPK--
void NPK_Decode(float *NPK_cleandata) {
	for (uint8_t i = 0; i < 8; i++) {
		NPK_cleandata[i] = UART4_rxBuffer[3 + (2 * i)] * 16
				+ UART4_rxBuffer[4 + (2 * i)];
	}

	NPK_cleandata[0] = NPK_cleandata[0] / 10.0; //Temperature
	NPK_cleandata[1] = NPK_cleandata[1] / 10.0; //Humidité

}

//--Decodage SHT--
void SHT_Decode(float *SHT_cleandata) {

}

//Polling NPK
void get_NPK_data(void) {
	uint8_t command[8] = { 1, 3, 0, 0, 0, 8, 68, 12 };

	HAL_UART_Transmit(&huart4, command, 8, 200);
}

//Polling SHT30
void get_SHT_data(void) {

	//SHT SENSOR
	uint16_t SHTADDR = 0x44;
	uint16_t SHTADDRw = (SHTADDR << 1) | (0x00);
	uint16_t SHTADDRr = (SHTADDR << 1) | (0x01);

	//Command
	char command[2] = { 0 };
	command[0] = 0x2C;
	command[1] = 0x06;

	//Receive
	int temp = 0;
	uint8_t I2C2_rxBuffer[6] = { 0 };

	//Envoi
	HAL_I2C_Master_Transmit(&hi2c2, SHTADDRw, command, 2, 3000);

	//Reception
	HAL_I2C_Master_Receive(&hi2c2, SHTADDRr, I2C2_rxBuffer, 6, 3000);

	temp = (I2C2_rxBuffer[0] * 256 + I2C2_rxBuffer[1]);
	SHT_cleandata[0] = -45 + (175 * temp / 65535.0);
	SHT_cleandata[1] = 100 * (I2C2_rxBuffer[3] * 256 + I2C2_rxBuffer[4])
			/ 65535.0;

}

void get_GAZ_data(void) {
	//SHT SENSOR

#define ADDRESS_GAS_WR 0x10
#define ADDRESS_GAS_RD 0x11

	HAL_StatusTypeDef ret;
	//Command

	for (int i=0;i<4;i++)
	{
		char command = 0;

		switch(i){
		case 0:
			command = 0x01;
			break;
		case 1 :
			command = 0x03;
			break;
		case 2 :
			command = 0x05;
			break;
		case 3 :
			command = 0x07;
			break;
		default:
			break;
		};


		char data[4] = {0};

	//Envoi
	ret = HAL_I2C_Master_Transmit(&hi2c2, ADDRESS_GAS_WR, &command, 1,
			HAL_MAX_DELAY);

	//Reception
	ret = HAL_I2C_Master_Receive(&hi2c2, ADDRESS_GAS_RD, data, 4,
	HAL_MAX_DELAY);

	HAL_Delay(1);

	GAZ_cleandata[i] = data[0];
	GAZ_cleandata[i] |= data[1] << 8;
	GAZ_cleandata[i] |= data[2] << 16;
	GAZ_cleandata[i] |= data[3] << 24;

	}

	char j = 0;
}
//Affichage des Datas sur la console
void print_debug(void) {

	uint8_t buffer[500] = { 0 };

	sprintf(buffer, "=======================\r\n"
			"SHT TEMP = %.1f \r\n"
			"SHT_HUMID = %.1f \r\n"
			"=======================\r\n"
			"Lattitude = %f | Longitude = %f\r\n"
			"=======================\r\n"
			"NPK_TEMP = %.1f \r\n"
			"NPK_HUMID = %.1f \r\n"
			"NPK_CONDUCTIVITY = %.1f \r\n"
			"NPK_PH = %.1f \r\n"
			"NPK_NITROGENE = %.1f \r\n"
			"NPK_PHOSPHORE = %.1f \r\n"
			"NPK_POTASSIUM = %.1f \r\n"
			"NPK_SALINITY = %.1f \r\n"
			"=======================\r\n"
			"GAZ_NO2 = %u \r\n"
			"GAZ_ALCOHOL = %u \r\n"
			"GAZ_VOC = %u \r\n"
			"GAZ_C0 = %u \r\n"
			"=======================\r\n",SHT_cleandata[0], SHT_cleandata[1],
			GPS_cleandata[0], GPS_cleandata[1], NPK_cleandata[0],
			NPK_cleandata[1], NPK_cleandata[2], NPK_cleandata[3],
			NPK_cleandata[4], NPK_cleandata[5], NPK_cleandata[6],
			NPK_cleandata[7],GAZ_cleandata[0],GAZ_cleandata[1],GAZ_cleandata[2],GAZ_cleandata[3]);

	HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
}

void ClignoDelay(int Delay)
{
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 0);
	HAL_Delay(Delay);
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 1);
	HAL_Delay(Delay);
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 0);
	HAL_Delay(Delay);
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 1);
	HAL_Delay(Delay);
}

void print_lora(void) {

	char message[50] = { 0 };
	int Delay = 2000;

	sprintf(message, "AT+MSG=GPSLAT_%f+GPSLONG_%f\r\n", GPS_cleandata[0],
			GPS_cleandata[1]);
	HAL_UART_Transmit(&huart1, message, sizeof(message), 5000);

	ClignoDelay(Delay);

	sprintf(message, "AT+MSG=NPKTEM_%.2f+"
			"NPKHUM_%.2f\r\n", NPK_cleandata[0], NPK_cleandata[1]);
	HAL_UART_Transmit(&huart1, message, sizeof(message), 5000);

	ClignoDelay(Delay);

	sprintf(message, "AT+MSG=NPKCON_%.2f+"
			"NPKPH_%.2f\r\n", NPK_cleandata[2], NPK_cleandata[3]);
	HAL_UART_Transmit(&huart1, message, sizeof(message), 5000);

	ClignoDelay(Delay);

	sprintf(message, "AT+MSG=NPKNIT_%.2f+"
			"NPKPHO_%.2f\r\n", NPK_cleandata[4], NPK_cleandata[5]);
	HAL_UART_Transmit(&huart1, message, sizeof(message), 5000);

	ClignoDelay(Delay);

	sprintf(message, "AT+MSG=NPKPOT_%.2f+"
			"NPKSAL_%.2f\r\n", NPK_cleandata[6], NPK_cleandata[7]);
	HAL_UART_Transmit(&huart1, message, sizeof(message), 5000);

	ClignoDelay(Delay);

	sprintf(message, "AT+MSG=SHTTEM_%.2f+"
			"SHTHUM_%.2f\r\n", SHT_cleandata[0], SHT_cleandata[1]);

	HAL_UART_Transmit(&huart1, message, sizeof(message), 5000);

	ClignoDelay(Delay);

	sprintf(message, "AT+MSG=GAZNO2_%u+"
			"GAZALCO_%u\r\n", GAZ_cleandata[0], GAZ_cleandata[1]);

	HAL_UART_Transmit(&huart1, message, sizeof(message), 5000);

	ClignoDelay(Delay);

	sprintf(message, "AT+MSG=GAZVOC_%u+"
				"GAZCO_%u\r\n", GAZ_cleandata[2], GAZ_cleandata[3]);

	HAL_UART_Transmit(&huart1, message, sizeof(message), 5000);

	ClignoDelay(Delay);
}

void LoRa_Init(void) {

	int Delay = 50;

	HAL_UART_Transmit(&huart1, "AT+MODE=LWOTAA\r\n", 30, 100);

	ClignoDelay(Delay);

	HAL_UART_Transmit(&huart1, "AT+DR=EU868\r\n", 30, 100);
	ClignoDelay(Delay);

	HAL_UART_Transmit(&huart1, "AT+ID=AppEui\r\n", 30, 100);
	ClignoDelay(Delay);

	HAL_UART_Transmit(&huart1, "AT+ID=DevEui\r\n", 30, 100);
	ClignoDelay(Delay);

	HAL_UART_Transmit(&huart1, "AT+ID=DevAddr\r\n", 30, 100);
	ClignoDelay(Delay);

	HAL_UART_Transmit(&huart1, "AT+DR\r\n", 30, 100);
	ClignoDelay(Delay);

	HAL_UART_Transmit(&huart1, "AT+CH=NUM,0-2\r\n", 30, 100);
	ClignoDelay(Delay);

	HAL_UART_Transmit(&huart1,
			"AT+KEY=APPKEY,\"8155B636AEDF51D52598992A7DA229A4\"\r\n", 100, 500);
	ClignoDelay(Delay);

	HAL_UART_Transmit(&huart1, "AT+CLASS=A\r\n", 30, 100);
	ClignoDelay(Delay);

	HAL_UART_Transmit(&huart1, "AT+PORT=8\r\n", 30, 100);
	ClignoDelay(Delay);

	HAL_UART_Transmit(&huart1, "AT+UART=TIMEOUT, 1000\r\n", 30, 100);
	ClignoDelay(Delay);

	do {
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 0);
		HAL_UART_Transmit(&huart1, "AT+JOIN\r\n", 30, 500);
		ClignoDelay(50);
		HAL_Delay(4000);
	} while (!connected);

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 1);
}

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
	SystemClock_Config();
	HAL_ResumeTick();

	uint8_t buffer[40] = { 0 };
	sprintf(buffer, "WakeUp from RTC\r\n");
	HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
}

//--Reception des UARTS--
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {

	if (huart->Instance == USART1) //Reception message LoRa
	{
		HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1); //Restart Interrupt
		static char MessageReceived[100] = { 0 };
		static uint8_t i = 0;

		if (UART1_rxBuffer == 10) //Test si réception \n
				{
			MessageReceived[i++] = UART1_rxBuffer;

			//Envoi le message reçu sur la console
			HAL_UART_Transmit(&huart3, &MessageReceived, i, 500);

			if (!strcmp(MessageReceived, "+JOIN: Network joined\r\n")) {
				connected = 1;
			}
			memset(MessageReceived, 0, sizeof(MessageReceived));
			i = 0;
		} else {
			MessageReceived[i++] = UART1_rxBuffer;
		}

	} else if (huart->Instance == USART2) { //Reception message GPS
		GPS_Decode(UART2_rxBuffer); //Decode GPS
		if (stop_gps == 0) {
			HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer, 1); //Restart Interrupt
		}

	} else if (huart->Instance == USART3) // Console
	{
		HAL_UART_Receive_IT(&huart3, &UART3_rxBuffer, 1); //Restart Interrupt
		static char MessageReceived[100] = { 0 };
		static uint8_t i = 0;

		if (UART3_rxBuffer == 10) //Test si réception \n
				{
			MessageReceived[i] = UART3_rxBuffer;

			//Envoi le message au module LoRa
			HAL_UART_Transmit(&huart1, &MessageReceived, i, 500);

			memset(MessageReceived, 0, sizeof(MessageReceived));
			i = 0;
		} else {
			MessageReceived[i++] = UART3_rxBuffer;
		}

	} else if (huart->Instance == UART4) {			//Reception Message NPK
		HAL_UART_Receive_IT(&huart4, &UART4_rxBuffer, 21); //Reçoit les 21 bytes
		NPK_Decode(NPK_cleandata); //Triage et Parsing
	} else {
	}
}
/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_ETH_Init();
	MX_USART3_UART_Init();
	MX_USB_OTG_FS_PCD_Init();
	MX_USART2_UART_Init();
	MX_I2C2_Init();
	MX_UART4_Init();
	MX_USART1_UART_Init();
	MX_RTC_Init();

	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 0);
	HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1); //INIT Interrupt UART pour LORA
	HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer, 1); //INIT Interrupt UART pour GPS
	HAL_UART_Receive_IT(&huart3, &UART3_rxBuffer, 1); //INIT Interrupt UART pour USB
	HAL_UART_Receive_IT(&huart4, UART4_rxBuffer, 21); //INIT Interrupt UART pour NPK

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		//------------------WAKEUP STOPMODE------------------------------------
		//** Wake Up Ici**
		connected = 0;
		stop_gps = 0;
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
		MX_USART2_UART_Init();
		HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer, 1); //Restart Interrupt

		//----------------------LORA-------------------------------------------
		if (connected == 0) {
			LoRa_Init(); //Init and connect to LoRa
		}

		//----------------------SHT SENSOR/I2C---------------------------------
		get_SHT_data();

		//----------------------GAZ SENSOR/I2C---------------------------------
		get_GAZ_data();

		//----------------------NPK SENSOR/UART--------------------------------
		get_NPK_data();

		//---------------------GPS---------------------------------------------

		//------------------PRINT DATA------------------------------------------
		print_debug();
		print_lora();

		//------------------ENTERING STOPMODE--------------------------------------------
		uint8_t buffer[40] = { 0 };
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 0);
		sprintf(buffer, "Entering StopMode\r\n");
		HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
		HAL_UART_Transmit(&huart1, "AT+LOWPOWER\r\n", 30, 100);

		//Every 5min
		if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, SEC10,
		RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK) {
			Error_Handler();
		}

		HAL_SuspendTick();
		HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
		HAL_Delay(100);
	}
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
			| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = 1;
	RCC_OscInitStruct.PLL.PLLN = 24;
	RCC_OscInitStruct.PLL.PLLP = 2;
	RCC_OscInitStruct.PLL.PLLQ = 4;
	RCC_OscInitStruct.PLL.PLLR = 2;
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
		Error_Handler();
	}
}

/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {

	/* USER CODE BEGIN ETH_Init 0 */

	/* USER CODE END ETH_Init 0 */

	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
	MACAddr[0] = 0x00;
	MACAddr[1] = 0x80;
	MACAddr[2] = 0xE1;
	MACAddr[3] = 0x00;
	MACAddr[4] = 0x00;
	MACAddr[5] = 0x00;
	heth.Init.MACAddr = &MACAddr[0];
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
	heth.Init.TxDesc = DMATxDscrTab;
	heth.Init.RxDesc = DMARxDscrTab;
	heth.Init.RxBuffLen = 1524;

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
		Error_Handler();
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}

/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {

	/* USER CODE BEGIN I2C2_Init 0 */

	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
	hi2c2.Init.Timing = 0x10707DBC;
	hi2c2.Init.OwnAddress1 = 0;
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
	hi2c2.Init.OwnAddress2 = 0;
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
		Error_Handler();
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
			!= HAL_OK) {
		Error_Handler();
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}

/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
	hrtc.Init.AsynchPrediv = 127;
	hrtc.Init.SynchPrediv = 255;
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
		Error_Handler();
	}

	/** Enable the WakeUp
	 */
	/*if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
	 {
	 Error_Handler();
	 }*/
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}

/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {

	/* USER CODE BEGIN UART4_Init 0 */

	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
	huart4.Init.BaudRate = 4800;
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
	huart4.Init.StopBits = UART_STOPBITS_1;
	huart4.Init.Parity = UART_PARITY_NONE;
	huart4.Init.Mode = UART_MODE_TX_RX;
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	if (HAL_UART_Init(&huart4) != HAL_OK) {
		Error_Handler();
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
			!= HAL_OK) {
		Error_Handler();
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
			!= HAL_OK) {
		Error_Handler();
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}

/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {

	/* USER CODE BEGIN USART1_Init 0 */

	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
	huart1.Init.BaudRate = 9600;
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
	huart1.Init.StopBits = UART_STOPBITS_1;
	huart1.Init.Parity = UART_PARITY_NONE;
	huart1.Init.Mode = UART_MODE_TX_RX;
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	if (HAL_UART_Init(&huart1) != HAL_OK) {
		Error_Handler();
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
			!= HAL_OK) {
		Error_Handler();
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
			!= HAL_OK) {
		Error_Handler();
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}

/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {

	/* USER CODE BEGIN USART2_Init 0 */

	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
	huart2.Init.BaudRate = 9600;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	if (HAL_UART_Init(&huart2) != HAL_OK) {
		Error_Handler();
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
			!= HAL_OK) {
		Error_Handler();
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
			!= HAL_OK) {
		Error_Handler();
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}

/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {

	/* USER CODE BEGIN USART3_Init 0 */

	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
	huart3.Init.BaudRate = 115200;
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
	huart3.Init.StopBits = UART_STOPBITS_1;
	huart3.Init.Parity = UART_PARITY_NONE;
	huart3.Init.Mode = UART_MODE_TX_RX;
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	if (HAL_UART_Init(&huart3) != HAL_OK) {
		Error_Handler();
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
			!= HAL_OK) {
		Error_Handler();
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
			!= HAL_OK) {
		Error_Handler();
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}

/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {

	/* USER CODE BEGIN USB_OTG_FS_Init 0 */

	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
	hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOF_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOG_CLK_ENABLE();
	__HAL_RCC_GPIOE_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : B1_Pin PC9 */
	GPIO_InitStruct.Pin = B1_Pin | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : PF2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

	/*Configure GPIO pins : LD1_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
