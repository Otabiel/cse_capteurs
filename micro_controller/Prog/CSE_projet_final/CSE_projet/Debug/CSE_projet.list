
CSE_projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efb8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  0800f258  0800f258  0001f258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fb34  0800fb34  0001fb34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fb3c  0800fb3c  0001fb3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fb40  0800fb40  0001fb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  24000000  0800fb44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001e4  0800fd28  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000244  0800fd88  00020244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a28  240002a4  0800fde8  000202a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000ccc  0800fde8  00020ccc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022222  00000000  00000000  000202d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036fc  00000000  00000000  000424f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  00045bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  00047310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039ffe  00000000  00000000  00048908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef6c  00000000  00000000  00082906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016a10c  00000000  00000000  000a1872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020b97e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007704  00000000  00000000  0020b9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002a4 	.word	0x240002a4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f240 	.word	0x0800f240

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002a8 	.word	0x240002a8
 80002dc:	0800f240 	.word	0x0800f240

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9ac 	b.w	8000a98 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468e      	mov	lr, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d14d      	bne.n	8000872 <__udivmoddi4+0xaa>
 80007d6:	428a      	cmp	r2, r1
 80007d8:	4694      	mov	ip, r2
 80007da:	d969      	bls.n	80008b0 <__udivmoddi4+0xe8>
 80007dc:	fab2 f282 	clz	r2, r2
 80007e0:	b152      	cbz	r2, 80007f8 <__udivmoddi4+0x30>
 80007e2:	fa01 f302 	lsl.w	r3, r1, r2
 80007e6:	f1c2 0120 	rsb	r1, r2, #32
 80007ea:	fa20 f101 	lsr.w	r1, r0, r1
 80007ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f2:	ea41 0e03 	orr.w	lr, r1, r3
 80007f6:	4094      	lsls	r4, r2
 80007f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007fc:	0c21      	lsrs	r1, r4, #16
 80007fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000802:	fa1f f78c 	uxth.w	r7, ip
 8000806:	fb08 e316 	mls	r3, r8, r6, lr
 800080a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800080e:	fb06 f107 	mul.w	r1, r6, r7
 8000812:	4299      	cmp	r1, r3
 8000814:	d90a      	bls.n	800082c <__udivmoddi4+0x64>
 8000816:	eb1c 0303 	adds.w	r3, ip, r3
 800081a:	f106 30ff 	add.w	r0, r6, #4294967295
 800081e:	f080 811f 	bcs.w	8000a60 <__udivmoddi4+0x298>
 8000822:	4299      	cmp	r1, r3
 8000824:	f240 811c 	bls.w	8000a60 <__udivmoddi4+0x298>
 8000828:	3e02      	subs	r6, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb3 f0f8 	udiv	r0, r3, r8
 8000834:	fb08 3310 	mls	r3, r8, r0, r3
 8000838:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800083c:	fb00 f707 	mul.w	r7, r0, r7
 8000840:	42a7      	cmp	r7, r4
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x92>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 33ff 	add.w	r3, r0, #4294967295
 800084c:	f080 810a 	bcs.w	8000a64 <__udivmoddi4+0x29c>
 8000850:	42a7      	cmp	r7, r4
 8000852:	f240 8107 	bls.w	8000a64 <__udivmoddi4+0x29c>
 8000856:	4464      	add	r4, ip
 8000858:	3802      	subs	r0, #2
 800085a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800085e:	1be4      	subs	r4, r4, r7
 8000860:	2600      	movs	r6, #0
 8000862:	b11d      	cbz	r5, 800086c <__udivmoddi4+0xa4>
 8000864:	40d4      	lsrs	r4, r2
 8000866:	2300      	movs	r3, #0
 8000868:	e9c5 4300 	strd	r4, r3, [r5]
 800086c:	4631      	mov	r1, r6
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	428b      	cmp	r3, r1
 8000874:	d909      	bls.n	800088a <__udivmoddi4+0xc2>
 8000876:	2d00      	cmp	r5, #0
 8000878:	f000 80ef 	beq.w	8000a5a <__udivmoddi4+0x292>
 800087c:	2600      	movs	r6, #0
 800087e:	e9c5 0100 	strd	r0, r1, [r5]
 8000882:	4630      	mov	r0, r6
 8000884:	4631      	mov	r1, r6
 8000886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088a:	fab3 f683 	clz	r6, r3
 800088e:	2e00      	cmp	r6, #0
 8000890:	d14a      	bne.n	8000928 <__udivmoddi4+0x160>
 8000892:	428b      	cmp	r3, r1
 8000894:	d302      	bcc.n	800089c <__udivmoddi4+0xd4>
 8000896:	4282      	cmp	r2, r0
 8000898:	f200 80f9 	bhi.w	8000a8e <__udivmoddi4+0x2c6>
 800089c:	1a84      	subs	r4, r0, r2
 800089e:	eb61 0303 	sbc.w	r3, r1, r3
 80008a2:	2001      	movs	r0, #1
 80008a4:	469e      	mov	lr, r3
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	d0e0      	beq.n	800086c <__udivmoddi4+0xa4>
 80008aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80008ae:	e7dd      	b.n	800086c <__udivmoddi4+0xa4>
 80008b0:	b902      	cbnz	r2, 80008b4 <__udivmoddi4+0xec>
 80008b2:	deff      	udf	#255	; 0xff
 80008b4:	fab2 f282 	clz	r2, r2
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	f040 8092 	bne.w	80009e2 <__udivmoddi4+0x21a>
 80008be:	eba1 010c 	sub.w	r1, r1, ip
 80008c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c6:	fa1f fe8c 	uxth.w	lr, ip
 80008ca:	2601      	movs	r6, #1
 80008cc:	0c20      	lsrs	r0, r4, #16
 80008ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80008d2:	fb07 1113 	mls	r1, r7, r3, r1
 80008d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008da:	fb0e f003 	mul.w	r0, lr, r3
 80008de:	4288      	cmp	r0, r1
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x12c>
 80008e2:	eb1c 0101 	adds.w	r1, ip, r1
 80008e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x12a>
 80008ec:	4288      	cmp	r0, r1
 80008ee:	f200 80cb 	bhi.w	8000a88 <__udivmoddi4+0x2c0>
 80008f2:	4643      	mov	r3, r8
 80008f4:	1a09      	subs	r1, r1, r0
 80008f6:	b2a4      	uxth	r4, r4
 80008f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000900:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000904:	fb0e fe00 	mul.w	lr, lr, r0
 8000908:	45a6      	cmp	lr, r4
 800090a:	d908      	bls.n	800091e <__udivmoddi4+0x156>
 800090c:	eb1c 0404 	adds.w	r4, ip, r4
 8000910:	f100 31ff 	add.w	r1, r0, #4294967295
 8000914:	d202      	bcs.n	800091c <__udivmoddi4+0x154>
 8000916:	45a6      	cmp	lr, r4
 8000918:	f200 80bb 	bhi.w	8000a92 <__udivmoddi4+0x2ca>
 800091c:	4608      	mov	r0, r1
 800091e:	eba4 040e 	sub.w	r4, r4, lr
 8000922:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000926:	e79c      	b.n	8000862 <__udivmoddi4+0x9a>
 8000928:	f1c6 0720 	rsb	r7, r6, #32
 800092c:	40b3      	lsls	r3, r6
 800092e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000932:	ea4c 0c03 	orr.w	ip, ip, r3
 8000936:	fa20 f407 	lsr.w	r4, r0, r7
 800093a:	fa01 f306 	lsl.w	r3, r1, r6
 800093e:	431c      	orrs	r4, r3
 8000940:	40f9      	lsrs	r1, r7
 8000942:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000946:	fa00 f306 	lsl.w	r3, r0, r6
 800094a:	fbb1 f8f9 	udiv	r8, r1, r9
 800094e:	0c20      	lsrs	r0, r4, #16
 8000950:	fa1f fe8c 	uxth.w	lr, ip
 8000954:	fb09 1118 	mls	r1, r9, r8, r1
 8000958:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800095c:	fb08 f00e 	mul.w	r0, r8, lr
 8000960:	4288      	cmp	r0, r1
 8000962:	fa02 f206 	lsl.w	r2, r2, r6
 8000966:	d90b      	bls.n	8000980 <__udivmoddi4+0x1b8>
 8000968:	eb1c 0101 	adds.w	r1, ip, r1
 800096c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000970:	f080 8088 	bcs.w	8000a84 <__udivmoddi4+0x2bc>
 8000974:	4288      	cmp	r0, r1
 8000976:	f240 8085 	bls.w	8000a84 <__udivmoddi4+0x2bc>
 800097a:	f1a8 0802 	sub.w	r8, r8, #2
 800097e:	4461      	add	r1, ip
 8000980:	1a09      	subs	r1, r1, r0
 8000982:	b2a4      	uxth	r4, r4
 8000984:	fbb1 f0f9 	udiv	r0, r1, r9
 8000988:	fb09 1110 	mls	r1, r9, r0, r1
 800098c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000990:	fb00 fe0e 	mul.w	lr, r0, lr
 8000994:	458e      	cmp	lr, r1
 8000996:	d908      	bls.n	80009aa <__udivmoddi4+0x1e2>
 8000998:	eb1c 0101 	adds.w	r1, ip, r1
 800099c:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a0:	d26c      	bcs.n	8000a7c <__udivmoddi4+0x2b4>
 80009a2:	458e      	cmp	lr, r1
 80009a4:	d96a      	bls.n	8000a7c <__udivmoddi4+0x2b4>
 80009a6:	3802      	subs	r0, #2
 80009a8:	4461      	add	r1, ip
 80009aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009ae:	fba0 9402 	umull	r9, r4, r0, r2
 80009b2:	eba1 010e 	sub.w	r1, r1, lr
 80009b6:	42a1      	cmp	r1, r4
 80009b8:	46c8      	mov	r8, r9
 80009ba:	46a6      	mov	lr, r4
 80009bc:	d356      	bcc.n	8000a6c <__udivmoddi4+0x2a4>
 80009be:	d053      	beq.n	8000a68 <__udivmoddi4+0x2a0>
 80009c0:	b15d      	cbz	r5, 80009da <__udivmoddi4+0x212>
 80009c2:	ebb3 0208 	subs.w	r2, r3, r8
 80009c6:	eb61 010e 	sbc.w	r1, r1, lr
 80009ca:	fa01 f707 	lsl.w	r7, r1, r7
 80009ce:	fa22 f306 	lsr.w	r3, r2, r6
 80009d2:	40f1      	lsrs	r1, r6
 80009d4:	431f      	orrs	r7, r3
 80009d6:	e9c5 7100 	strd	r7, r1, [r5]
 80009da:	2600      	movs	r6, #0
 80009dc:	4631      	mov	r1, r6
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e2:	f1c2 0320 	rsb	r3, r2, #32
 80009e6:	40d8      	lsrs	r0, r3
 80009e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ec:	fa21 f303 	lsr.w	r3, r1, r3
 80009f0:	4091      	lsls	r1, r2
 80009f2:	4301      	orrs	r1, r0
 80009f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f8:	fa1f fe8c 	uxth.w	lr, ip
 80009fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a00:	fb07 3610 	mls	r6, r7, r0, r3
 8000a04:	0c0b      	lsrs	r3, r1, #16
 8000a06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a0e:	429e      	cmp	r6, r3
 8000a10:	fa04 f402 	lsl.w	r4, r4, r2
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x260>
 8000a16:	eb1c 0303 	adds.w	r3, ip, r3
 8000a1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a1e:	d22f      	bcs.n	8000a80 <__udivmoddi4+0x2b8>
 8000a20:	429e      	cmp	r6, r3
 8000a22:	d92d      	bls.n	8000a80 <__udivmoddi4+0x2b8>
 8000a24:	3802      	subs	r0, #2
 8000a26:	4463      	add	r3, ip
 8000a28:	1b9b      	subs	r3, r3, r6
 8000a2a:	b289      	uxth	r1, r1
 8000a2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a30:	fb07 3316 	mls	r3, r7, r6, r3
 8000a34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a38:	fb06 f30e 	mul.w	r3, r6, lr
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	d908      	bls.n	8000a52 <__udivmoddi4+0x28a>
 8000a40:	eb1c 0101 	adds.w	r1, ip, r1
 8000a44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a48:	d216      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a4a:	428b      	cmp	r3, r1
 8000a4c:	d914      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a4e:	3e02      	subs	r6, #2
 8000a50:	4461      	add	r1, ip
 8000a52:	1ac9      	subs	r1, r1, r3
 8000a54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a58:	e738      	b.n	80008cc <__udivmoddi4+0x104>
 8000a5a:	462e      	mov	r6, r5
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	e705      	b.n	800086c <__udivmoddi4+0xa4>
 8000a60:	4606      	mov	r6, r0
 8000a62:	e6e3      	b.n	800082c <__udivmoddi4+0x64>
 8000a64:	4618      	mov	r0, r3
 8000a66:	e6f8      	b.n	800085a <__udivmoddi4+0x92>
 8000a68:	454b      	cmp	r3, r9
 8000a6a:	d2a9      	bcs.n	80009c0 <__udivmoddi4+0x1f8>
 8000a6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a74:	3801      	subs	r0, #1
 8000a76:	e7a3      	b.n	80009c0 <__udivmoddi4+0x1f8>
 8000a78:	4646      	mov	r6, r8
 8000a7a:	e7ea      	b.n	8000a52 <__udivmoddi4+0x28a>
 8000a7c:	4620      	mov	r0, r4
 8000a7e:	e794      	b.n	80009aa <__udivmoddi4+0x1e2>
 8000a80:	4640      	mov	r0, r8
 8000a82:	e7d1      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a84:	46d0      	mov	r8, sl
 8000a86:	e77b      	b.n	8000980 <__udivmoddi4+0x1b8>
 8000a88:	3b02      	subs	r3, #2
 8000a8a:	4461      	add	r1, ip
 8000a8c:	e732      	b.n	80008f4 <__udivmoddi4+0x12c>
 8000a8e:	4630      	mov	r0, r6
 8000a90:	e709      	b.n	80008a6 <__udivmoddi4+0xde>
 8000a92:	4464      	add	r4, ip
 8000a94:	3802      	subs	r0, #2
 8000a96:	e742      	b.n	800091e <__udivmoddi4+0x156>

08000a98 <__aeabi_idiv0>:
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	0000      	movs	r0, r0
	...

08000aa0 <GPS_Decode>:
uint8_t UART2_rxBuffer = 0; 			//Raw message GPS
uint8_t UART3_rxBuffer = 0; 			//Raw message USB
uint8_t UART4_rxBuffer[21] = { 0 };		//Raw message NPK

//--Decodage GPS--
void GPS_Decode(char Caracter) {
 8000aa0:	b480      	push	{r7}
 8000aa2:	b087      	sub	sp, #28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
	static uint8_t GPS_PositionMessage[GPS_LENGTH] = { 0 }; //Reception Message GPS
	static uint8_t Number = 0;
	static uint8_t j = 0;

	float Lattitude_Deg = 0;
 8000aaa:	f04f 0300 	mov.w	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
	float Lattitude_Min = 0;
 8000ab0:	f04f 0300 	mov.w	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
	float Longitude_Deg = 0;
 8000ab6:	f04f 0300 	mov.w	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
	float Longitude_Min = 0;
 8000abc:	f04f 0300 	mov.w	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]

	if ((UART2_rxBuffer == 'L') && (Number == 0)) {
 8000ac2:	4bbd      	ldr	r3, [pc, #756]	; (8000db8 <GPS_Decode+0x318>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b4c      	cmp	r3, #76	; 0x4c
 8000ac8:	d107      	bne.n	8000ada <GPS_Decode+0x3a>
 8000aca:	4bbc      	ldr	r3, [pc, #752]	; (8000dbc <GPS_Decode+0x31c>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d103      	bne.n	8000ada <GPS_Decode+0x3a>
		Number = 1;
 8000ad2:	4bba      	ldr	r3, [pc, #744]	; (8000dbc <GPS_Decode+0x31c>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	e14e      	b.n	8000d78 <GPS_Decode+0x2d8>
	} else if ((UART2_rxBuffer == 'L') && (Number == 1)) {
 8000ada:	4bb7      	ldr	r3, [pc, #732]	; (8000db8 <GPS_Decode+0x318>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b4c      	cmp	r3, #76	; 0x4c
 8000ae0:	d107      	bne.n	8000af2 <GPS_Decode+0x52>
 8000ae2:	4bb6      	ldr	r3, [pc, #728]	; (8000dbc <GPS_Decode+0x31c>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d103      	bne.n	8000af2 <GPS_Decode+0x52>
		Number = 2;
 8000aea:	4bb4      	ldr	r3, [pc, #720]	; (8000dbc <GPS_Decode+0x31c>)
 8000aec:	2202      	movs	r2, #2
 8000aee:	701a      	strb	r2, [r3, #0]
 8000af0:	e142      	b.n	8000d78 <GPS_Decode+0x2d8>
	} else if ((UART2_rxBuffer == ',') && (Number == 2)) {
 8000af2:	4bb1      	ldr	r3, [pc, #708]	; (8000db8 <GPS_Decode+0x318>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b2c      	cmp	r3, #44	; 0x2c
 8000af8:	d10a      	bne.n	8000b10 <GPS_Decode+0x70>
 8000afa:	4bb0      	ldr	r3, [pc, #704]	; (8000dbc <GPS_Decode+0x31c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d106      	bne.n	8000b10 <GPS_Decode+0x70>
		Number = 3;
 8000b02:	4bae      	ldr	r3, [pc, #696]	; (8000dbc <GPS_Decode+0x31c>)
 8000b04:	2203      	movs	r2, #3
 8000b06:	701a      	strb	r2, [r3, #0]
		j = 0;
 8000b08:	4bad      	ldr	r3, [pc, #692]	; (8000dc0 <GPS_Decode+0x320>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
 8000b0e:	e133      	b.n	8000d78 <GPS_Decode+0x2d8>
	} else if (Number == 3) {
 8000b10:	4baa      	ldr	r3, [pc, #680]	; (8000dbc <GPS_Decode+0x31c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	f040 812b 	bne.w	8000d70 <GPS_Decode+0x2d0>
		GPS_PositionMessage[j++] = UART2_rxBuffer;
 8000b1a:	4ba9      	ldr	r3, [pc, #676]	; (8000dc0 <GPS_Decode+0x320>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	b2d1      	uxtb	r1, r2
 8000b22:	4aa7      	ldr	r2, [pc, #668]	; (8000dc0 <GPS_Decode+0x320>)
 8000b24:	7011      	strb	r1, [r2, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	4ba3      	ldr	r3, [pc, #652]	; (8000db8 <GPS_Decode+0x318>)
 8000b2a:	7819      	ldrb	r1, [r3, #0]
 8000b2c:	4ba5      	ldr	r3, [pc, #660]	; (8000dc4 <GPS_Decode+0x324>)
 8000b2e:	5499      	strb	r1, [r3, r2]

		if (j == GPS_LENGTH) {
 8000b30:	4ba3      	ldr	r3, [pc, #652]	; (8000dc0 <GPS_Decode+0x320>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b17      	cmp	r3, #23
 8000b36:	f040 811f 	bne.w	8000d78 <GPS_Decode+0x2d8>

			j = 0;
 8000b3a:	4ba1      	ldr	r3, [pc, #644]	; (8000dc0 <GPS_Decode+0x320>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
			Number = 0;
 8000b40:	4b9e      	ldr	r3, [pc, #632]	; (8000dbc <GPS_Decode+0x31c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
			Lattitude_Deg = 10 * (GPS_PositionMessage[0] - '0')
 8000b46:	4b9f      	ldr	r3, [pc, #636]	; (8000dc4 <GPS_Decode+0x324>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000b4e:	4613      	mov	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	461a      	mov	r2, r3
					+ (GPS_PositionMessage[1] - '0');
 8000b58:	4b9a      	ldr	r3, [pc, #616]	; (8000dc4 <GPS_Decode+0x324>)
 8000b5a:	785b      	ldrb	r3, [r3, #1]
 8000b5c:	3b30      	subs	r3, #48	; 0x30
 8000b5e:	4413      	add	r3, r2
			Lattitude_Deg = 10 * (GPS_PositionMessage[0] - '0')
 8000b60:	ee07 3a90 	vmov	s15, r3
 8000b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b68:	edc7 7a05 	vstr	s15, [r7, #20]
			Lattitude_Min = 10 * (float) ((GPS_PositionMessage[2] - '0'))
 8000b6c:	4b95      	ldr	r3, [pc, #596]	; (8000dc4 <GPS_Decode+0x324>)
 8000b6e:	789b      	ldrb	r3, [r3, #2]
 8000b70:	3b30      	subs	r3, #48	; 0x30
 8000b72:	ee07 3a90 	vmov	s15, r3
 8000b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b7a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000b7e:	ee27 7a87 	vmul.f32	s14, s15, s14
					+ (float) ((GPS_PositionMessage[3] - '0'))
 8000b82:	4b90      	ldr	r3, [pc, #576]	; (8000dc4 <GPS_Decode+0x324>)
 8000b84:	78db      	ldrb	r3, [r3, #3]
 8000b86:	3b30      	subs	r3, #48	; 0x30
 8000b88:	ee07 3a90 	vmov	s15, r3
 8000b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b90:	ee77 5a27 	vadd.f32	s11, s14, s15
					+ (float) ((GPS_PositionMessage[5] - '0') * 0.1)
 8000b94:	4b8b      	ldr	r3, [pc, #556]	; (8000dc4 <GPS_Decode+0x324>)
 8000b96:	795b      	ldrb	r3, [r3, #5]
 8000b98:	3b30      	subs	r3, #48	; 0x30
 8000b9a:	ee07 3a90 	vmov	s15, r3
 8000b9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ba2:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8000d88 <GPS_Decode+0x2e8>
 8000ba6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000baa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bae:	ee75 5aa7 	vadd.f32	s11, s11, s15
					+ (float) ((GPS_PositionMessage[6] - '0') * 0.01)
 8000bb2:	4b84      	ldr	r3, [pc, #528]	; (8000dc4 <GPS_Decode+0x324>)
 8000bb4:	799b      	ldrb	r3, [r3, #6]
 8000bb6:	3b30      	subs	r3, #48	; 0x30
 8000bb8:	ee07 3a90 	vmov	s15, r3
 8000bbc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000bc0:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8000d90 <GPS_Decode+0x2f0>
 8000bc4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bc8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bcc:	ee75 5aa7 	vadd.f32	s11, s11, s15
					+ (float) ((GPS_PositionMessage[7] - '0') * 0.001)
 8000bd0:	4b7c      	ldr	r3, [pc, #496]	; (8000dc4 <GPS_Decode+0x324>)
 8000bd2:	79db      	ldrb	r3, [r3, #7]
 8000bd4:	3b30      	subs	r3, #48	; 0x30
 8000bd6:	ee07 3a90 	vmov	s15, r3
 8000bda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000bde:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8000d98 <GPS_Decode+0x2f8>
 8000be2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000be6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bea:	ee75 5aa7 	vadd.f32	s11, s11, s15
					+ (float) ((GPS_PositionMessage[8] - '0') * 0.0001)
 8000bee:	4b75      	ldr	r3, [pc, #468]	; (8000dc4 <GPS_Decode+0x324>)
 8000bf0:	7a1b      	ldrb	r3, [r3, #8]
 8000bf2:	3b30      	subs	r3, #48	; 0x30
 8000bf4:	ee07 3a90 	vmov	s15, r3
 8000bf8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000bfc:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8000da0 <GPS_Decode+0x300>
 8000c00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c08:	ee75 5aa7 	vadd.f32	s11, s11, s15
					+ (float) ((GPS_PositionMessage[9] - '0') * 0.00001);
 8000c0c:	4b6d      	ldr	r3, [pc, #436]	; (8000dc4 <GPS_Decode+0x324>)
 8000c0e:	7a5b      	ldrb	r3, [r3, #9]
 8000c10:	3b30      	subs	r3, #48	; 0x30
 8000c12:	ee07 3a90 	vmov	s15, r3
 8000c16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c1a:	ed9f 6b63 	vldr	d6, [pc, #396]	; 8000da8 <GPS_Decode+0x308>
 8000c1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c22:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			Lattitude_Min = 10 * (float) ((GPS_PositionMessage[2] - '0'))
 8000c26:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000c2a:	edc7 7a04 	vstr	s15, [r7, #16]

			Longitude_Deg = 10 * (GPS_PositionMessage[14] - '0')
 8000c2e:	4b65      	ldr	r3, [pc, #404]	; (8000dc4 <GPS_Decode+0x324>)
 8000c30:	7b9b      	ldrb	r3, [r3, #14]
 8000c32:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000c36:	4613      	mov	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	461a      	mov	r2, r3
					+ (GPS_PositionMessage[15] - '0');
 8000c40:	4b60      	ldr	r3, [pc, #384]	; (8000dc4 <GPS_Decode+0x324>)
 8000c42:	7bdb      	ldrb	r3, [r3, #15]
 8000c44:	3b30      	subs	r3, #48	; 0x30
 8000c46:	4413      	add	r3, r2
			Longitude_Deg = 10 * (GPS_PositionMessage[14] - '0')
 8000c48:	ee07 3a90 	vmov	s15, r3
 8000c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c50:	edc7 7a03 	vstr	s15, [r7, #12]
			Longitude_Min = 10 * (float) ((GPS_PositionMessage[16] - '0'))
 8000c54:	4b5b      	ldr	r3, [pc, #364]	; (8000dc4 <GPS_Decode+0x324>)
 8000c56:	7c1b      	ldrb	r3, [r3, #16]
 8000c58:	3b30      	subs	r3, #48	; 0x30
 8000c5a:	ee07 3a90 	vmov	s15, r3
 8000c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000c66:	ee27 7a87 	vmul.f32	s14, s15, s14
					+ (float) ((GPS_PositionMessage[17] - '0'))
 8000c6a:	4b56      	ldr	r3, [pc, #344]	; (8000dc4 <GPS_Decode+0x324>)
 8000c6c:	7c5b      	ldrb	r3, [r3, #17]
 8000c6e:	3b30      	subs	r3, #48	; 0x30
 8000c70:	ee07 3a90 	vmov	s15, r3
 8000c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c78:	ee77 5a27 	vadd.f32	s11, s14, s15
					+ (float) ((GPS_PositionMessage[19] - '0') * 0.1)
 8000c7c:	4b51      	ldr	r3, [pc, #324]	; (8000dc4 <GPS_Decode+0x324>)
 8000c7e:	7cdb      	ldrb	r3, [r3, #19]
 8000c80:	3b30      	subs	r3, #48	; 0x30
 8000c82:	ee07 3a90 	vmov	s15, r3
 8000c86:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c8a:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8000d88 <GPS_Decode+0x2e8>
 8000c8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c92:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c96:	ee75 5aa7 	vadd.f32	s11, s11, s15
					+ (float) ((GPS_PositionMessage[20] - '0') * 0.01)
 8000c9a:	4b4a      	ldr	r3, [pc, #296]	; (8000dc4 <GPS_Decode+0x324>)
 8000c9c:	7d1b      	ldrb	r3, [r3, #20]
 8000c9e:	3b30      	subs	r3, #48	; 0x30
 8000ca0:	ee07 3a90 	vmov	s15, r3
 8000ca4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ca8:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8000d90 <GPS_Decode+0x2f0>
 8000cac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cb4:	ee75 5aa7 	vadd.f32	s11, s11, s15
					+ (float) ((GPS_PositionMessage[21] - '0') * 0.001)
 8000cb8:	4b42      	ldr	r3, [pc, #264]	; (8000dc4 <GPS_Decode+0x324>)
 8000cba:	7d5b      	ldrb	r3, [r3, #21]
 8000cbc:	3b30      	subs	r3, #48	; 0x30
 8000cbe:	ee07 3a90 	vmov	s15, r3
 8000cc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cc6:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8000d98 <GPS_Decode+0x2f8>
 8000cca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cd2:	ee75 5aa7 	vadd.f32	s11, s11, s15
					+ (float) ((GPS_PositionMessage[22] - '0') * 0.0001)
 8000cd6:	4b3b      	ldr	r3, [pc, #236]	; (8000dc4 <GPS_Decode+0x324>)
 8000cd8:	7d9b      	ldrb	r3, [r3, #22]
 8000cda:	3b30      	subs	r3, #48	; 0x30
 8000cdc:	ee07 3a90 	vmov	s15, r3
 8000ce0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ce4:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8000da0 <GPS_Decode+0x300>
 8000ce8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cf0:	ee75 5aa7 	vadd.f32	s11, s11, s15
					+ (float) ((GPS_PositionMessage[23] - '0') * 0.00001);
 8000cf4:	4b33      	ldr	r3, [pc, #204]	; (8000dc4 <GPS_Decode+0x324>)
 8000cf6:	7ddb      	ldrb	r3, [r3, #23]
 8000cf8:	3b30      	subs	r3, #48	; 0x30
 8000cfa:	ee07 3a90 	vmov	s15, r3
 8000cfe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d02:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8000da8 <GPS_Decode+0x308>
 8000d06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
			Longitude_Min = 10 * (float) ((GPS_PositionMessage[16] - '0'))
 8000d0e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000d12:	edc7 7a02 	vstr	s15, [r7, #8]

			GPS_cleandata[0] = Lattitude_Deg + Lattitude_Min / 60.0;
 8000d16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d1a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000d1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d22:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d26:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8000db0 <GPS_Decode+0x310>
 8000d2a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000d2e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d36:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <GPS_Decode+0x328>)
 8000d38:	edc3 7a00 	vstr	s15, [r3]
			GPS_cleandata[1] = Longitude_Deg + Longitude_Min / 60.0;
 8000d3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d40:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000d44:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d48:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d4c:	ed9f 4b18 	vldr	d4, [pc, #96]	; 8000db0 <GPS_Decode+0x310>
 8000d50:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000d54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <GPS_Decode+0x328>)
 8000d5e:	edc3 7a01 	vstr	s15, [r3, #4]
			stop_gps = 1;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <GPS_Decode+0x32c>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	601a      	str	r2, [r3, #0]
			Number = 0;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <GPS_Decode+0x31c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
		}
	} else {
		Number = 0;
	}
}
 8000d6e:	e003      	b.n	8000d78 <GPS_Decode+0x2d8>
		Number = 0;
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <GPS_Decode+0x31c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
}
 8000d76:	e7ff      	b.n	8000d78 <GPS_Decode+0x2d8>
 8000d78:	bf00      	nop
 8000d7a:	371c      	adds	r7, #28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	f3af 8000 	nop.w
 8000d88:	9999999a 	.word	0x9999999a
 8000d8c:	3fb99999 	.word	0x3fb99999
 8000d90:	47ae147b 	.word	0x47ae147b
 8000d94:	3f847ae1 	.word	0x3f847ae1
 8000d98:	d2f1a9fc 	.word	0xd2f1a9fc
 8000d9c:	3f50624d 	.word	0x3f50624d
 8000da0:	eb1c432d 	.word	0xeb1c432d
 8000da4:	3f1a36e2 	.word	0x3f1a36e2
 8000da8:	88e368f1 	.word	0x88e368f1
 8000dac:	3ee4f8b5 	.word	0x3ee4f8b5
 8000db0:	00000000 	.word	0x00000000
 8000db4:	404e0000 	.word	0x404e0000
 8000db8:	24000bad 	.word	0x24000bad
 8000dbc:	24000bc5 	.word	0x24000bc5
 8000dc0:	24000bc6 	.word	0x24000bc6
 8000dc4:	24000bc8 	.word	0x24000bc8
 8000dc8:	24000b64 	.word	0x24000b64
 8000dcc:	24000ba8 	.word	0x24000ba8

08000dd0 <NPK_Decode>:

//--Decodage NPK--
void NPK_Decode(float *NPK_cleandata) {
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 8; i++) {
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e018      	b.n	8000e10 <NPK_Decode+0x40>
		NPK_cleandata[i] = UART4_rxBuffer[3 + (2 * i)] * 16
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	3303      	adds	r3, #3
 8000de4:	4a1a      	ldr	r2, [pc, #104]	; (8000e50 <NPK_Decode+0x80>)
 8000de6:	5cd3      	ldrb	r3, [r2, r3]
 8000de8:	011b      	lsls	r3, r3, #4
				+ UART4_rxBuffer[4 + (2 * i)];
 8000dea:	7bfa      	ldrb	r2, [r7, #15]
 8000dec:	3202      	adds	r2, #2
 8000dee:	0052      	lsls	r2, r2, #1
 8000df0:	4917      	ldr	r1, [pc, #92]	; (8000e50 <NPK_Decode+0x80>)
 8000df2:	5c8a      	ldrb	r2, [r1, r2]
 8000df4:	1899      	adds	r1, r3, r2
		NPK_cleandata[i] = UART4_rxBuffer[3 + (2 * i)] * 16
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	ee07 1a90 	vmov	s15, r1
 8000e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e06:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < 8; i++) {
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	2b07      	cmp	r3, #7
 8000e14:	d9e3      	bls.n	8000dde <NPK_Decode+0xe>
	}

	NPK_cleandata[0] = NPK_cleandata[0] / 10.0; //Temperature
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	ed93 7a00 	vldr	s14, [r3]
 8000e1c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000e20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	edc3 7a00 	vstr	s15, [r3]
	NPK_cleandata[1] = NPK_cleandata[1] / 10.0; //Humidité
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	ed93 7a00 	vldr	s14, [r3]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3304      	adds	r3, #4
 8000e36:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000e3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e3e:	edc3 7a00 	vstr	s15, [r3]

}
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	24000bb0 	.word	0x24000bb0

08000e54 <get_NPK_data>:
void SHT_Decode(float *SHT_cleandata) {

}

//Polling NPK
void get_NPK_data(void) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
	uint8_t command[8] = { 1, 3, 0, 0, 0, 8, 68, 12 };
 8000e5a:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <get_NPK_data+0x28>)
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e62:	e883 0003 	stmia.w	r3, {r0, r1}

	HAL_UART_Transmit(&huart4, command, 8, 200);
 8000e66:	4639      	mov	r1, r7
 8000e68:	23c8      	movs	r3, #200	; 0xc8
 8000e6a:	2208      	movs	r2, #8
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <get_NPK_data+0x2c>)
 8000e6e:	f007 f829 	bl	8007ec4 <HAL_UART_Transmit>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	0800f258 	.word	0x0800f258
 8000e80:	24000418 	.word	0x24000418
 8000e84:	00000000 	.word	0x00000000

08000e88 <get_SHT_data>:

//Polling SHT30
void get_SHT_data(void) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af02      	add	r7, sp, #8

	//SHT SENSOR
	uint16_t SHTADDR = 0x44;
 8000e8e:	2344      	movs	r3, #68	; 0x44
 8000e90:	82fb      	strh	r3, [r7, #22]
	uint16_t SHTADDRw = (SHTADDR << 1) | (0x00);
 8000e92:	8afb      	ldrh	r3, [r7, #22]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	82bb      	strh	r3, [r7, #20]
	uint16_t SHTADDRr = (SHTADDR << 1) | (0x01);
 8000e98:	8afb      	ldrh	r3, [r7, #22]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	827b      	strh	r3, [r7, #18]

	//Command
	char command[2] = { 0 };
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	813b      	strh	r3, [r7, #8]
	command[0] = 0x2C;
 8000eaa:	232c      	movs	r3, #44	; 0x2c
 8000eac:	723b      	strb	r3, [r7, #8]
	command[1] = 0x06;
 8000eae:	2306      	movs	r3, #6
 8000eb0:	727b      	strb	r3, [r7, #9]

	//Receive
	int temp = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
	uint8_t I2C2_rxBuffer[6] = { 0 };
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	80bb      	strh	r3, [r7, #4]

	//Envoi
	HAL_I2C_Master_Transmit(&hi2c2, SHTADDRw, command, 2, 3000);
 8000ebe:	f107 0208 	add.w	r2, r7, #8
 8000ec2:	8ab9      	ldrh	r1, [r7, #20]
 8000ec4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2302      	movs	r3, #2
 8000ecc:	4822      	ldr	r0, [pc, #136]	; (8000f58 <get_SHT_data+0xd0>)
 8000ece:	f003 fb89 	bl	80045e4 <HAL_I2C_Master_Transmit>

	//Reception
	HAL_I2C_Master_Receive(&hi2c2, SHTADDRr, I2C2_rxBuffer, 6, 3000);
 8000ed2:	463a      	mov	r2, r7
 8000ed4:	8a79      	ldrh	r1, [r7, #18]
 8000ed6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2306      	movs	r3, #6
 8000ede:	481e      	ldr	r0, [pc, #120]	; (8000f58 <get_SHT_data+0xd0>)
 8000ee0:	f003 fc74 	bl	80047cc <HAL_I2C_Master_Receive>

	temp = (I2C2_rxBuffer[0] * 256 + I2C2_rxBuffer[1]);
 8000ee4:	783b      	ldrb	r3, [r7, #0]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	787a      	ldrb	r2, [r7, #1]
 8000eea:	4413      	add	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
	SHT_cleandata[0] = -45 + (175 * temp / 65535.0);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	22af      	movs	r2, #175	; 0xaf
 8000ef2:	fb02 f303 	mul.w	r3, r2, r3
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000efe:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000f48 <get_SHT_data+0xc0>
 8000f02:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f06:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8000f50 <get_SHT_data+0xc8>
 8000f0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f0e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <get_SHT_data+0xd4>)
 8000f14:	edc3 7a00 	vstr	s15, [r3]
	SHT_cleandata[1] = 100 * (I2C2_rxBuffer[3] * 256 + I2C2_rxBuffer[4])
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	793a      	ldrb	r2, [r7, #4]
 8000f1e:	4413      	add	r3, r2
 8000f20:	2264      	movs	r2, #100	; 0x64
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
			/ 65535.0;
 8000f26:	ee07 3a90 	vmov	s15, r3
 8000f2a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f2e:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8000f48 <get_SHT_data+0xc0>
 8000f32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	SHT_cleandata[1] = 100 * (I2C2_rxBuffer[3] * 256 + I2C2_rxBuffer[4])
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <get_SHT_data+0xd4>)
 8000f3c:	edc3 7a01 	vstr	s15, [r3, #4]

}
 8000f40:	bf00      	nop
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	00000000 	.word	0x00000000
 8000f4c:	40efffe0 	.word	0x40efffe0
 8000f50:	00000000 	.word	0x00000000
 8000f54:	40468000 	.word	0x40468000
 8000f58:	240003a8 	.word	0x240003a8
 8000f5c:	24000b8c 	.word	0x24000b8c

08000f60 <get_GAZ_data>:

void get_GAZ_data(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af02      	add	r7, sp, #8
#define ADDRESS_GAS_RD 0x11

	HAL_StatusTypeDef ret;
	//Command

	for (int i=0;i<4;i++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	e062      	b.n	8001032 <get_GAZ_data+0xd2>
	{
		char command = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	727b      	strb	r3, [r7, #9]

		switch(i){
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d816      	bhi.n	8000fa4 <get_GAZ_data+0x44>
 8000f76:	a201      	add	r2, pc, #4	; (adr r2, 8000f7c <get_GAZ_data+0x1c>)
 8000f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7c:	08000f8d 	.word	0x08000f8d
 8000f80:	08000f93 	.word	0x08000f93
 8000f84:	08000f99 	.word	0x08000f99
 8000f88:	08000f9f 	.word	0x08000f9f
		case 0:
			command = 0x01;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	727b      	strb	r3, [r7, #9]
			break;
 8000f90:	e009      	b.n	8000fa6 <get_GAZ_data+0x46>
		case 1 :
			command = 0x03;
 8000f92:	2303      	movs	r3, #3
 8000f94:	727b      	strb	r3, [r7, #9]
			break;
 8000f96:	e006      	b.n	8000fa6 <get_GAZ_data+0x46>
		case 2 :
			command = 0x05;
 8000f98:	2305      	movs	r3, #5
 8000f9a:	727b      	strb	r3, [r7, #9]
			break;
 8000f9c:	e003      	b.n	8000fa6 <get_GAZ_data+0x46>
		case 3 :
			command = 0x07;
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	727b      	strb	r3, [r7, #9]
			break;
 8000fa2:	e000      	b.n	8000fa6 <get_GAZ_data+0x46>
		default:
			break;
 8000fa4:	bf00      	nop
		};


		char data[4] = {0};
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]

	//Envoi
	ret = HAL_I2C_Master_Transmit(&hi2c2, ADDRESS_GAS_WR, &command, 1,
 8000faa:	f107 0209 	add.w	r2, r7, #9
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	4822      	ldr	r0, [pc, #136]	; (8001044 <get_GAZ_data+0xe4>)
 8000fba:	f003 fb13 	bl	80045e4 <HAL_I2C_Master_Transmit>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	72bb      	strb	r3, [r7, #10]
			HAL_MAX_DELAY);

	//Reception
	ret = HAL_I2C_Master_Receive(&hi2c2, ADDRESS_GAS_RD, data, 4,
 8000fc2:	1d3a      	adds	r2, r7, #4
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2304      	movs	r3, #4
 8000fcc:	2111      	movs	r1, #17
 8000fce:	481d      	ldr	r0, [pc, #116]	; (8001044 <get_GAZ_data+0xe4>)
 8000fd0:	f003 fbfc 	bl	80047cc <HAL_I2C_Master_Receive>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	72bb      	strb	r3, [r7, #10]
	HAL_MAX_DELAY);

	HAL_Delay(1);
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f001 fdad 	bl	8002b38 <HAL_Delay>

	GAZ_cleandata[i] = data[0];
 8000fde:	793b      	ldrb	r3, [r7, #4]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4a19      	ldr	r2, [pc, #100]	; (8001048 <get_GAZ_data+0xe8>)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	GAZ_cleandata[i] |= data[1] << 8;
 8000fea:	4a17      	ldr	r2, [pc, #92]	; (8001048 <get_GAZ_data+0xe8>)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff2:	797a      	ldrb	r2, [r7, #5]
 8000ff4:	0212      	lsls	r2, r2, #8
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	4913      	ldr	r1, [pc, #76]	; (8001048 <get_GAZ_data+0xe8>)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GAZ_cleandata[i] |= data[2] << 16;
 8001000:	4a11      	ldr	r2, [pc, #68]	; (8001048 <get_GAZ_data+0xe8>)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001008:	79ba      	ldrb	r2, [r7, #6]
 800100a:	0412      	lsls	r2, r2, #16
 800100c:	431a      	orrs	r2, r3
 800100e:	490e      	ldr	r1, [pc, #56]	; (8001048 <get_GAZ_data+0xe8>)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	GAZ_cleandata[i] |= data[3] << 24;
 8001016:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <get_GAZ_data+0xe8>)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	79fa      	ldrb	r2, [r7, #7]
 8001020:	0612      	lsls	r2, r2, #24
 8001022:	431a      	orrs	r2, r3
 8001024:	4908      	ldr	r1, [pc, #32]	; (8001048 <get_GAZ_data+0xe8>)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0;i<4;i++)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3301      	adds	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b03      	cmp	r3, #3
 8001036:	dd99      	ble.n	8000f6c <get_GAZ_data+0xc>

	}

	char j = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	72fb      	strb	r3, [r7, #11]
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	240003a8 	.word	0x240003a8
 8001048:	24000b94 	.word	0x24000b94

0800104c <print_debug>:
//Affichage des Datas sur la console
void print_debug(void) {
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	ed2d 8b08 	vpush	{d8-d11}
 8001052:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8001056:	af1a      	add	r7, sp, #104	; 0x68

	uint8_t buffer[500] = { 0 };
 8001058:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800105c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	3304      	adds	r3, #4
 8001066:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f009 fd75 	bl	800ab5c <memset>
			"=======================\r\n"
			"GAZ_NO2 = %u \r\n"
			"GAZ_ALCOHOL = %u \r\n"
			"GAZ_VOC = %u \r\n"
			"GAZ_C0 = %u \r\n"
			"=======================\r\n",SHT_cleandata[0], SHT_cleandata[1],
 8001072:	4b39      	ldr	r3, [pc, #228]	; (8001158 <print_debug+0x10c>)
 8001074:	edd3 7a00 	vldr	s15, [r3]
	sprintf(buffer, "=======================\r\n"
 8001078:	eeb7 bae7 	vcvt.f64.f32	d11, s15
			"=======================\r\n",SHT_cleandata[0], SHT_cleandata[1],
 800107c:	4b36      	ldr	r3, [pc, #216]	; (8001158 <print_debug+0x10c>)
 800107e:	edd3 7a01 	vldr	s15, [r3, #4]
	sprintf(buffer, "=======================\r\n"
 8001082:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			GPS_cleandata[0], GPS_cleandata[1], NPK_cleandata[0],
 8001086:	4b35      	ldr	r3, [pc, #212]	; (800115c <print_debug+0x110>)
 8001088:	edd3 6a00 	vldr	s13, [r3]
	sprintf(buffer, "=======================\r\n"
 800108c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			GPS_cleandata[0], GPS_cleandata[1], NPK_cleandata[0],
 8001090:	4b32      	ldr	r3, [pc, #200]	; (800115c <print_debug+0x110>)
 8001092:	edd3 5a01 	vldr	s11, [r3, #4]
	sprintf(buffer, "=======================\r\n"
 8001096:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			GPS_cleandata[0], GPS_cleandata[1], NPK_cleandata[0],
 800109a:	4b31      	ldr	r3, [pc, #196]	; (8001160 <print_debug+0x114>)
 800109c:	edd3 4a00 	vldr	s9, [r3]
	sprintf(buffer, "=======================\r\n"
 80010a0:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			NPK_cleandata[1], NPK_cleandata[2], NPK_cleandata[3],
 80010a4:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <print_debug+0x114>)
 80010a6:	edd3 3a01 	vldr	s7, [r3, #4]
	sprintf(buffer, "=======================\r\n"
 80010aa:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
			NPK_cleandata[1], NPK_cleandata[2], NPK_cleandata[3],
 80010ae:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <print_debug+0x114>)
 80010b0:	edd3 2a02 	vldr	s5, [r3, #8]
	sprintf(buffer, "=======================\r\n"
 80010b4:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
			NPK_cleandata[1], NPK_cleandata[2], NPK_cleandata[3],
 80010b8:	4b29      	ldr	r3, [pc, #164]	; (8001160 <print_debug+0x114>)
 80010ba:	edd3 1a03 	vldr	s3, [r3, #12]
	sprintf(buffer, "=======================\r\n"
 80010be:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
			NPK_cleandata[4], NPK_cleandata[5], NPK_cleandata[6],
 80010c2:	4b27      	ldr	r3, [pc, #156]	; (8001160 <print_debug+0x114>)
 80010c4:	edd3 0a04 	vldr	s1, [r3, #16]
	sprintf(buffer, "=======================\r\n"
 80010c8:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
			NPK_cleandata[4], NPK_cleandata[5], NPK_cleandata[6],
 80010cc:	4b24      	ldr	r3, [pc, #144]	; (8001160 <print_debug+0x114>)
 80010ce:	ed93 8a05 	vldr	s16, [r3, #20]
	sprintf(buffer, "=======================\r\n"
 80010d2:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
			NPK_cleandata[4], NPK_cleandata[5], NPK_cleandata[6],
 80010d6:	4b22      	ldr	r3, [pc, #136]	; (8001160 <print_debug+0x114>)
 80010d8:	ed93 9a06 	vldr	s18, [r3, #24]
	sprintf(buffer, "=======================\r\n"
 80010dc:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
			NPK_cleandata[7],GAZ_cleandata[0],GAZ_cleandata[1],GAZ_cleandata[2],GAZ_cleandata[3]);
 80010e0:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <print_debug+0x114>)
 80010e2:	ed93 aa07 	vldr	s20, [r3, #28]
	sprintf(buffer, "=======================\r\n"
 80010e6:	eeb7 aaca 	vcvt.f64.f32	d10, s20
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <print_debug+0x118>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <print_debug+0x118>)
 80010f0:	6852      	ldr	r2, [r2, #4]
 80010f2:	491c      	ldr	r1, [pc, #112]	; (8001164 <print_debug+0x118>)
 80010f4:	6889      	ldr	r1, [r1, #8]
 80010f6:	481b      	ldr	r0, [pc, #108]	; (8001164 <print_debug+0x118>)
 80010f8:	68c0      	ldr	r0, [r0, #12]
 80010fa:	1d3c      	adds	r4, r7, #4
 80010fc:	9019      	str	r0, [sp, #100]	; 0x64
 80010fe:	9118      	str	r1, [sp, #96]	; 0x60
 8001100:	9217      	str	r2, [sp, #92]	; 0x5c
 8001102:	9316      	str	r3, [sp, #88]	; 0x58
 8001104:	ed8d ab14 	vstr	d10, [sp, #80]	; 0x50
 8001108:	ed8d 9b12 	vstr	d9, [sp, #72]	; 0x48
 800110c:	ed8d 8b10 	vstr	d8, [sp, #64]	; 0x40
 8001110:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
 8001114:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 8001118:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 800111c:	ed8d 3b08 	vstr	d3, [sp, #32]
 8001120:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001124:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001128:	ed8d 6b02 	vstr	d6, [sp, #8]
 800112c:	ed8d 7b00 	vstr	d7, [sp]
 8001130:	ec53 2b1b 	vmov	r2, r3, d11
 8001134:	490c      	ldr	r1, [pc, #48]	; (8001168 <print_debug+0x11c>)
 8001136:	4620      	mov	r0, r4
 8001138:	f00a fb68 	bl	800b80c <siprintf>

	HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
 800113c:	1d39      	adds	r1, r7, #4
 800113e:	2364      	movs	r3, #100	; 0x64
 8001140:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001144:	4809      	ldr	r0, [pc, #36]	; (800116c <print_debug+0x120>)
 8001146:	f006 febd 	bl	8007ec4 <HAL_UART_Transmit>
}
 800114a:	bf00      	nop
 800114c:	f507 77fe 	add.w	r7, r7, #508	; 0x1fc
 8001150:	46bd      	mov	sp, r7
 8001152:	ecbd 8b08 	vpop	{d8-d11}
 8001156:	bd90      	pop	{r4, r7, pc}
 8001158:	24000b8c 	.word	0x24000b8c
 800115c:	24000b64 	.word	0x24000b64
 8001160:	24000b6c 	.word	0x24000b6c
 8001164:	24000b94 	.word	0x24000b94
 8001168:	0800f260 	.word	0x0800f260
 800116c:	240005c8 	.word	0x240005c8

08001170 <ClignoDelay>:

void ClignoDelay(int Delay)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2104      	movs	r1, #4
 800117c:	4812      	ldr	r0, [pc, #72]	; (80011c8 <ClignoDelay+0x58>)
 800117e:	f003 f987 	bl	8004490 <HAL_GPIO_WritePin>
	HAL_Delay(Delay);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4618      	mov	r0, r3
 8001186:	f001 fcd7 	bl	8002b38 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 1);
 800118a:	2201      	movs	r2, #1
 800118c:	2104      	movs	r1, #4
 800118e:	480e      	ldr	r0, [pc, #56]	; (80011c8 <ClignoDelay+0x58>)
 8001190:	f003 f97e 	bl	8004490 <HAL_GPIO_WritePin>
	HAL_Delay(Delay);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	f001 fcce 	bl	8002b38 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2104      	movs	r1, #4
 80011a0:	4809      	ldr	r0, [pc, #36]	; (80011c8 <ClignoDelay+0x58>)
 80011a2:	f003 f975 	bl	8004490 <HAL_GPIO_WritePin>
	HAL_Delay(Delay);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 fcc5 	bl	8002b38 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 1);
 80011ae:	2201      	movs	r2, #1
 80011b0:	2104      	movs	r1, #4
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <ClignoDelay+0x58>)
 80011b4:	f003 f96c 	bl	8004490 <HAL_GPIO_WritePin>
	HAL_Delay(Delay);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 fcbc 	bl	8002b38 <HAL_Delay>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	58021400 	.word	0x58021400

080011cc <print_lora>:

void print_lora(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b090      	sub	sp, #64	; 0x40
 80011d0:	af02      	add	r7, sp, #8

	char message[50] = { 0 };
 80011d2:	2300      	movs	r3, #0
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	222e      	movs	r2, #46	; 0x2e
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f009 fcbd 	bl	800ab5c <memset>
	int Delay = 2000;
 80011e2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011e6:	637b      	str	r3, [r7, #52]	; 0x34

	sprintf(message, "AT+MSG=GPSLAT_%f--GPSLONG_%f\r\n", GPS_cleandata[0],
 80011e8:	4b67      	ldr	r3, [pc, #412]	; (8001388 <print_lora+0x1bc>)
 80011ea:	edd3 7a00 	vldr	s15, [r3]
 80011ee:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			GPS_cleandata[1]);
 80011f2:	4b65      	ldr	r3, [pc, #404]	; (8001388 <print_lora+0x1bc>)
 80011f4:	edd3 7a01 	vldr	s15, [r3, #4]
	sprintf(message, "AT+MSG=GPSLAT_%f--GPSLONG_%f\r\n", GPS_cleandata[0],
 80011f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011fc:	4638      	mov	r0, r7
 80011fe:	ed8d 7b00 	vstr	d7, [sp]
 8001202:	ec53 2b16 	vmov	r2, r3, d6
 8001206:	4961      	ldr	r1, [pc, #388]	; (800138c <print_lora+0x1c0>)
 8001208:	f00a fb00 	bl	800b80c <siprintf>
	HAL_UART_Transmit(&huart1, message, sizeof(message), 5000);
 800120c:	4639      	mov	r1, r7
 800120e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001212:	2232      	movs	r2, #50	; 0x32
 8001214:	485e      	ldr	r0, [pc, #376]	; (8001390 <print_lora+0x1c4>)
 8001216:	f006 fe55 	bl	8007ec4 <HAL_UART_Transmit>

	ClignoDelay(Delay);
 800121a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800121c:	f7ff ffa8 	bl	8001170 <ClignoDelay>

	sprintf(message, "AT+MSG=NPKTEM_%.2f--"
			"NPKHUM_%.2f\r\n", NPK_cleandata[0], NPK_cleandata[1]);
 8001220:	4b5c      	ldr	r3, [pc, #368]	; (8001394 <print_lora+0x1c8>)
 8001222:	edd3 7a00 	vldr	s15, [r3]
	sprintf(message, "AT+MSG=NPKTEM_%.2f--"
 8001226:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			"NPKHUM_%.2f\r\n", NPK_cleandata[0], NPK_cleandata[1]);
 800122a:	4b5a      	ldr	r3, [pc, #360]	; (8001394 <print_lora+0x1c8>)
 800122c:	edd3 7a01 	vldr	s15, [r3, #4]
	sprintf(message, "AT+MSG=NPKTEM_%.2f--"
 8001230:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001234:	4638      	mov	r0, r7
 8001236:	ed8d 7b00 	vstr	d7, [sp]
 800123a:	ec53 2b16 	vmov	r2, r3, d6
 800123e:	4956      	ldr	r1, [pc, #344]	; (8001398 <print_lora+0x1cc>)
 8001240:	f00a fae4 	bl	800b80c <siprintf>
	HAL_UART_Transmit(&huart1, message, sizeof(message), 5000);
 8001244:	4639      	mov	r1, r7
 8001246:	f241 3388 	movw	r3, #5000	; 0x1388
 800124a:	2232      	movs	r2, #50	; 0x32
 800124c:	4850      	ldr	r0, [pc, #320]	; (8001390 <print_lora+0x1c4>)
 800124e:	f006 fe39 	bl	8007ec4 <HAL_UART_Transmit>

	ClignoDelay(Delay);
 8001252:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001254:	f7ff ff8c 	bl	8001170 <ClignoDelay>

	sprintf(message, "AT+MSG=NPKCON_%.2f--"
			"NPKPH_%.2f\r\n", NPK_cleandata[2], NPK_cleandata[3]);
 8001258:	4b4e      	ldr	r3, [pc, #312]	; (8001394 <print_lora+0x1c8>)
 800125a:	edd3 7a02 	vldr	s15, [r3, #8]
	sprintf(message, "AT+MSG=NPKCON_%.2f--"
 800125e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			"NPKPH_%.2f\r\n", NPK_cleandata[2], NPK_cleandata[3]);
 8001262:	4b4c      	ldr	r3, [pc, #304]	; (8001394 <print_lora+0x1c8>)
 8001264:	edd3 7a03 	vldr	s15, [r3, #12]
	sprintf(message, "AT+MSG=NPKCON_%.2f--"
 8001268:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800126c:	4638      	mov	r0, r7
 800126e:	ed8d 7b00 	vstr	d7, [sp]
 8001272:	ec53 2b16 	vmov	r2, r3, d6
 8001276:	4949      	ldr	r1, [pc, #292]	; (800139c <print_lora+0x1d0>)
 8001278:	f00a fac8 	bl	800b80c <siprintf>
	HAL_UART_Transmit(&huart1, message, sizeof(message), 5000);
 800127c:	4639      	mov	r1, r7
 800127e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001282:	2232      	movs	r2, #50	; 0x32
 8001284:	4842      	ldr	r0, [pc, #264]	; (8001390 <print_lora+0x1c4>)
 8001286:	f006 fe1d 	bl	8007ec4 <HAL_UART_Transmit>

	ClignoDelay(Delay);
 800128a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800128c:	f7ff ff70 	bl	8001170 <ClignoDelay>

	sprintf(message, "AT+MSG=NPKNIT_%.2f--"
			"NPKPHO_%.2f\r\n", NPK_cleandata[4], NPK_cleandata[5]);
 8001290:	4b40      	ldr	r3, [pc, #256]	; (8001394 <print_lora+0x1c8>)
 8001292:	edd3 7a04 	vldr	s15, [r3, #16]
	sprintf(message, "AT+MSG=NPKNIT_%.2f--"
 8001296:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			"NPKPHO_%.2f\r\n", NPK_cleandata[4], NPK_cleandata[5]);
 800129a:	4b3e      	ldr	r3, [pc, #248]	; (8001394 <print_lora+0x1c8>)
 800129c:	edd3 7a05 	vldr	s15, [r3, #20]
	sprintf(message, "AT+MSG=NPKNIT_%.2f--"
 80012a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012a4:	4638      	mov	r0, r7
 80012a6:	ed8d 7b00 	vstr	d7, [sp]
 80012aa:	ec53 2b16 	vmov	r2, r3, d6
 80012ae:	493c      	ldr	r1, [pc, #240]	; (80013a0 <print_lora+0x1d4>)
 80012b0:	f00a faac 	bl	800b80c <siprintf>
	HAL_UART_Transmit(&huart1, message, sizeof(message), 5000);
 80012b4:	4639      	mov	r1, r7
 80012b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80012ba:	2232      	movs	r2, #50	; 0x32
 80012bc:	4834      	ldr	r0, [pc, #208]	; (8001390 <print_lora+0x1c4>)
 80012be:	f006 fe01 	bl	8007ec4 <HAL_UART_Transmit>

	ClignoDelay(Delay);
 80012c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80012c4:	f7ff ff54 	bl	8001170 <ClignoDelay>

	sprintf(message, "AT+MSG=NPKPOT_%.2f--"
			"NPKSAL_%.2f\r\n", NPK_cleandata[6], NPK_cleandata[7]);
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <print_lora+0x1c8>)
 80012ca:	edd3 7a06 	vldr	s15, [r3, #24]
	sprintf(message, "AT+MSG=NPKPOT_%.2f--"
 80012ce:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			"NPKSAL_%.2f\r\n", NPK_cleandata[6], NPK_cleandata[7]);
 80012d2:	4b30      	ldr	r3, [pc, #192]	; (8001394 <print_lora+0x1c8>)
 80012d4:	edd3 7a07 	vldr	s15, [r3, #28]
	sprintf(message, "AT+MSG=NPKPOT_%.2f--"
 80012d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012dc:	4638      	mov	r0, r7
 80012de:	ed8d 7b00 	vstr	d7, [sp]
 80012e2:	ec53 2b16 	vmov	r2, r3, d6
 80012e6:	492f      	ldr	r1, [pc, #188]	; (80013a4 <print_lora+0x1d8>)
 80012e8:	f00a fa90 	bl	800b80c <siprintf>
	HAL_UART_Transmit(&huart1, message, sizeof(message), 5000);
 80012ec:	4639      	mov	r1, r7
 80012ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80012f2:	2232      	movs	r2, #50	; 0x32
 80012f4:	4826      	ldr	r0, [pc, #152]	; (8001390 <print_lora+0x1c4>)
 80012f6:	f006 fde5 	bl	8007ec4 <HAL_UART_Transmit>

	ClignoDelay(Delay);
 80012fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80012fc:	f7ff ff38 	bl	8001170 <ClignoDelay>

	sprintf(message, "AT+MSG=SHTTEM_%.2f--"
			"SHTHUM_%.2f\r\n", SHT_cleandata[0], SHT_cleandata[1]);
 8001300:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <print_lora+0x1dc>)
 8001302:	edd3 7a00 	vldr	s15, [r3]
	sprintf(message, "AT+MSG=SHTTEM_%.2f--"
 8001306:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			"SHTHUM_%.2f\r\n", SHT_cleandata[0], SHT_cleandata[1]);
 800130a:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <print_lora+0x1dc>)
 800130c:	edd3 7a01 	vldr	s15, [r3, #4]
	sprintf(message, "AT+MSG=SHTTEM_%.2f--"
 8001310:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001314:	4638      	mov	r0, r7
 8001316:	ed8d 7b00 	vstr	d7, [sp]
 800131a:	ec53 2b16 	vmov	r2, r3, d6
 800131e:	4923      	ldr	r1, [pc, #140]	; (80013ac <print_lora+0x1e0>)
 8001320:	f00a fa74 	bl	800b80c <siprintf>

	HAL_UART_Transmit(&huart1, message, sizeof(message), 5000);
 8001324:	4639      	mov	r1, r7
 8001326:	f241 3388 	movw	r3, #5000	; 0x1388
 800132a:	2232      	movs	r2, #50	; 0x32
 800132c:	4818      	ldr	r0, [pc, #96]	; (8001390 <print_lora+0x1c4>)
 800132e:	f006 fdc9 	bl	8007ec4 <HAL_UART_Transmit>

	ClignoDelay(Delay);
 8001332:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001334:	f7ff ff1c 	bl	8001170 <ClignoDelay>

	sprintf(message, "AT+MSG=GAZNO2_%u--"
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <print_lora+0x1e4>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <print_lora+0x1e4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	4638      	mov	r0, r7
 8001342:	491c      	ldr	r1, [pc, #112]	; (80013b4 <print_lora+0x1e8>)
 8001344:	f00a fa62 	bl	800b80c <siprintf>
			"GAZALCO_%u\r\n", GAZ_cleandata[0], GAZ_cleandata[1]);

	HAL_UART_Transmit(&huart1, message, sizeof(message), 5000);
 8001348:	4639      	mov	r1, r7
 800134a:	f241 3388 	movw	r3, #5000	; 0x1388
 800134e:	2232      	movs	r2, #50	; 0x32
 8001350:	480f      	ldr	r0, [pc, #60]	; (8001390 <print_lora+0x1c4>)
 8001352:	f006 fdb7 	bl	8007ec4 <HAL_UART_Transmit>

	ClignoDelay(Delay);
 8001356:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001358:	f7ff ff0a 	bl	8001170 <ClignoDelay>

	sprintf(message, "AT+MSG=GAZVOC_%u--"
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <print_lora+0x1e4>)
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <print_lora+0x1e4>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	4638      	mov	r0, r7
 8001366:	4914      	ldr	r1, [pc, #80]	; (80013b8 <print_lora+0x1ec>)
 8001368:	f00a fa50 	bl	800b80c <siprintf>
				"GAZCO_%u\r\n", GAZ_cleandata[2], GAZ_cleandata[3]);

	HAL_UART_Transmit(&huart1, message, sizeof(message), 5000);
 800136c:	4639      	mov	r1, r7
 800136e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001372:	2232      	movs	r2, #50	; 0x32
 8001374:	4806      	ldr	r0, [pc, #24]	; (8001390 <print_lora+0x1c4>)
 8001376:	f006 fda5 	bl	8007ec4 <HAL_UART_Transmit>

	ClignoDelay(Delay);
 800137a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800137c:	f7ff fef8 	bl	8001170 <ClignoDelay>
}
 8001380:	bf00      	nop
 8001382:	3738      	adds	r7, #56	; 0x38
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	24000b64 	.word	0x24000b64
 800138c:	0800f410 	.word	0x0800f410
 8001390:	240004a8 	.word	0x240004a8
 8001394:	24000b6c 	.word	0x24000b6c
 8001398:	0800f430 	.word	0x0800f430
 800139c:	0800f454 	.word	0x0800f454
 80013a0:	0800f478 	.word	0x0800f478
 80013a4:	0800f49c 	.word	0x0800f49c
 80013a8:	24000b8c 	.word	0x24000b8c
 80013ac:	0800f4c0 	.word	0x0800f4c0
 80013b0:	24000b94 	.word	0x24000b94
 80013b4:	0800f4e4 	.word	0x0800f4e4
 80013b8:	0800f504 	.word	0x0800f504

080013bc <LoRa_Init>:

void LoRa_Init(void) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0

	int Delay = 50;
 80013c2:	2332      	movs	r3, #50	; 0x32
 80013c4:	607b      	str	r3, [r7, #4]

	HAL_UART_Transmit(&huart1, "AT+MODE=LWOTAA\r\n", 30, 100);
 80013c6:	2364      	movs	r3, #100	; 0x64
 80013c8:	221e      	movs	r2, #30
 80013ca:	4941      	ldr	r1, [pc, #260]	; (80014d0 <LoRa_Init+0x114>)
 80013cc:	4841      	ldr	r0, [pc, #260]	; (80014d4 <LoRa_Init+0x118>)
 80013ce:	f006 fd79 	bl	8007ec4 <HAL_UART_Transmit>

	ClignoDelay(Delay);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fecc 	bl	8001170 <ClignoDelay>

	HAL_UART_Transmit(&huart1, "AT+DR=EU868\r\n", 30, 100);
 80013d8:	2364      	movs	r3, #100	; 0x64
 80013da:	221e      	movs	r2, #30
 80013dc:	493e      	ldr	r1, [pc, #248]	; (80014d8 <LoRa_Init+0x11c>)
 80013de:	483d      	ldr	r0, [pc, #244]	; (80014d4 <LoRa_Init+0x118>)
 80013e0:	f006 fd70 	bl	8007ec4 <HAL_UART_Transmit>
	ClignoDelay(Delay);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fec3 	bl	8001170 <ClignoDelay>

	HAL_UART_Transmit(&huart1, "AT+ID=AppEui\r\n", 30, 100);
 80013ea:	2364      	movs	r3, #100	; 0x64
 80013ec:	221e      	movs	r2, #30
 80013ee:	493b      	ldr	r1, [pc, #236]	; (80014dc <LoRa_Init+0x120>)
 80013f0:	4838      	ldr	r0, [pc, #224]	; (80014d4 <LoRa_Init+0x118>)
 80013f2:	f006 fd67 	bl	8007ec4 <HAL_UART_Transmit>
	ClignoDelay(Delay);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff feba 	bl	8001170 <ClignoDelay>

	HAL_UART_Transmit(&huart1, "AT+ID=DevEui\r\n", 30, 100);
 80013fc:	2364      	movs	r3, #100	; 0x64
 80013fe:	221e      	movs	r2, #30
 8001400:	4937      	ldr	r1, [pc, #220]	; (80014e0 <LoRa_Init+0x124>)
 8001402:	4834      	ldr	r0, [pc, #208]	; (80014d4 <LoRa_Init+0x118>)
 8001404:	f006 fd5e 	bl	8007ec4 <HAL_UART_Transmit>
	ClignoDelay(Delay);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff feb1 	bl	8001170 <ClignoDelay>

	HAL_UART_Transmit(&huart1, "AT+ID=DevAddr\r\n", 30, 100);
 800140e:	2364      	movs	r3, #100	; 0x64
 8001410:	221e      	movs	r2, #30
 8001412:	4934      	ldr	r1, [pc, #208]	; (80014e4 <LoRa_Init+0x128>)
 8001414:	482f      	ldr	r0, [pc, #188]	; (80014d4 <LoRa_Init+0x118>)
 8001416:	f006 fd55 	bl	8007ec4 <HAL_UART_Transmit>
	ClignoDelay(Delay);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fea8 	bl	8001170 <ClignoDelay>

	HAL_UART_Transmit(&huart1, "AT+DR\r\n", 30, 100);
 8001420:	2364      	movs	r3, #100	; 0x64
 8001422:	221e      	movs	r2, #30
 8001424:	4930      	ldr	r1, [pc, #192]	; (80014e8 <LoRa_Init+0x12c>)
 8001426:	482b      	ldr	r0, [pc, #172]	; (80014d4 <LoRa_Init+0x118>)
 8001428:	f006 fd4c 	bl	8007ec4 <HAL_UART_Transmit>
	ClignoDelay(Delay);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fe9f 	bl	8001170 <ClignoDelay>

	HAL_UART_Transmit(&huart1, "AT+CH=NUM,0-2\r\n", 30, 100);
 8001432:	2364      	movs	r3, #100	; 0x64
 8001434:	221e      	movs	r2, #30
 8001436:	492d      	ldr	r1, [pc, #180]	; (80014ec <LoRa_Init+0x130>)
 8001438:	4826      	ldr	r0, [pc, #152]	; (80014d4 <LoRa_Init+0x118>)
 800143a:	f006 fd43 	bl	8007ec4 <HAL_UART_Transmit>
	ClignoDelay(Delay);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fe96 	bl	8001170 <ClignoDelay>

	HAL_UART_Transmit(&huart1,
 8001444:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001448:	2264      	movs	r2, #100	; 0x64
 800144a:	4929      	ldr	r1, [pc, #164]	; (80014f0 <LoRa_Init+0x134>)
 800144c:	4821      	ldr	r0, [pc, #132]	; (80014d4 <LoRa_Init+0x118>)
 800144e:	f006 fd39 	bl	8007ec4 <HAL_UART_Transmit>
			"AT+KEY=APPKEY,\"8155B636AEDF51D52598992A7DA229A4\"\r\n", 100, 500);
	ClignoDelay(Delay);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff fe8c 	bl	8001170 <ClignoDelay>

	HAL_UART_Transmit(&huart1, "AT+CLASS=A\r\n", 30, 100);
 8001458:	2364      	movs	r3, #100	; 0x64
 800145a:	221e      	movs	r2, #30
 800145c:	4925      	ldr	r1, [pc, #148]	; (80014f4 <LoRa_Init+0x138>)
 800145e:	481d      	ldr	r0, [pc, #116]	; (80014d4 <LoRa_Init+0x118>)
 8001460:	f006 fd30 	bl	8007ec4 <HAL_UART_Transmit>
	ClignoDelay(Delay);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff fe83 	bl	8001170 <ClignoDelay>

	HAL_UART_Transmit(&huart1, "AT+PORT=8\r\n", 30, 100);
 800146a:	2364      	movs	r3, #100	; 0x64
 800146c:	221e      	movs	r2, #30
 800146e:	4922      	ldr	r1, [pc, #136]	; (80014f8 <LoRa_Init+0x13c>)
 8001470:	4818      	ldr	r0, [pc, #96]	; (80014d4 <LoRa_Init+0x118>)
 8001472:	f006 fd27 	bl	8007ec4 <HAL_UART_Transmit>
	ClignoDelay(Delay);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fe7a 	bl	8001170 <ClignoDelay>

	HAL_UART_Transmit(&huart1, "AT+UART=TIMEOUT, 1000\r\n", 30, 100);
 800147c:	2364      	movs	r3, #100	; 0x64
 800147e:	221e      	movs	r2, #30
 8001480:	491e      	ldr	r1, [pc, #120]	; (80014fc <LoRa_Init+0x140>)
 8001482:	4814      	ldr	r0, [pc, #80]	; (80014d4 <LoRa_Init+0x118>)
 8001484:	f006 fd1e 	bl	8007ec4 <HAL_UART_Transmit>
	ClignoDelay(Delay);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff fe71 	bl	8001170 <ClignoDelay>

	do {
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2104      	movs	r1, #4
 8001492:	481b      	ldr	r0, [pc, #108]	; (8001500 <LoRa_Init+0x144>)
 8001494:	f002 fffc 	bl	8004490 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart1, "AT+JOIN\r\n", 30, 500);
 8001498:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800149c:	221e      	movs	r2, #30
 800149e:	4919      	ldr	r1, [pc, #100]	; (8001504 <LoRa_Init+0x148>)
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <LoRa_Init+0x118>)
 80014a2:	f006 fd0f 	bl	8007ec4 <HAL_UART_Transmit>
		ClignoDelay(50);
 80014a6:	2032      	movs	r0, #50	; 0x32
 80014a8:	f7ff fe62 	bl	8001170 <ClignoDelay>
		HAL_Delay(4000);
 80014ac:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80014b0:	f001 fb42 	bl	8002b38 <HAL_Delay>
	} while (!connected);
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <LoRa_Init+0x14c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0e8      	beq.n	800148e <LoRa_Init+0xd2>

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 1);
 80014bc:	2201      	movs	r2, #1
 80014be:	2104      	movs	r1, #4
 80014c0:	480f      	ldr	r0, [pc, #60]	; (8001500 <LoRa_Init+0x144>)
 80014c2:	f002 ffe5 	bl	8004490 <HAL_GPIO_WritePin>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	0800f524 	.word	0x0800f524
 80014d4:	240004a8 	.word	0x240004a8
 80014d8:	0800f538 	.word	0x0800f538
 80014dc:	0800f548 	.word	0x0800f548
 80014e0:	0800f558 	.word	0x0800f558
 80014e4:	0800f568 	.word	0x0800f568
 80014e8:	0800f578 	.word	0x0800f578
 80014ec:	0800f580 	.word	0x0800f580
 80014f0:	0800f590 	.word	0x0800f590
 80014f4:	0800f5c4 	.word	0x0800f5c4
 80014f8:	0800f5d4 	.word	0x0800f5d4
 80014fc:	0800f5e0 	.word	0x0800f5e0
 8001500:	58021400 	.word	0x58021400
 8001504:	0800f5f8 	.word	0x0800f5f8
 8001508:	24000ba4 	.word	0x24000ba4

0800150c <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	; 0x30
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 8001514:	f000 f986 	bl	8001824 <SystemClock_Config>
	HAL_ResumeTick();
 8001518:	f001 fb42 	bl	8002ba0 <HAL_ResumeTick>

	uint8_t buffer[40] = { 0 };
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	2224      	movs	r2, #36	; 0x24
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f009 fb17 	bl	800ab5c <memset>
	sprintf(buffer, "WakeUp from RTC\r\n");
 800152e:	f107 0308 	add.w	r3, r7, #8
 8001532:	4907      	ldr	r1, [pc, #28]	; (8001550 <HAL_RTCEx_WakeUpTimerEventCallback+0x44>)
 8001534:	4618      	mov	r0, r3
 8001536:	f00a f969 	bl	800b80c <siprintf>
	HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
 800153a:	f107 0108 	add.w	r1, r7, #8
 800153e:	2364      	movs	r3, #100	; 0x64
 8001540:	2228      	movs	r2, #40	; 0x28
 8001542:	4804      	ldr	r0, [pc, #16]	; (8001554 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>)
 8001544:	f006 fcbe 	bl	8007ec4 <HAL_UART_Transmit>
}
 8001548:	bf00      	nop
 800154a:	3730      	adds	r7, #48	; 0x30
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	0800f604 	.word	0x0800f604
 8001554:	240005c8 	.word	0x240005c8

08001558 <HAL_UART_RxCpltCallback>:

//--Reception des UARTS--
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1) //Reception message LoRa
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a4b      	ldr	r2, [pc, #300]	; (8001694 <HAL_UART_RxCpltCallback+0x13c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d13b      	bne.n	80015e2 <HAL_UART_RxCpltCallback+0x8a>
	{
		HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1); //Restart Interrupt
 800156a:	2201      	movs	r2, #1
 800156c:	494a      	ldr	r1, [pc, #296]	; (8001698 <HAL_UART_RxCpltCallback+0x140>)
 800156e:	484b      	ldr	r0, [pc, #300]	; (800169c <HAL_UART_RxCpltCallback+0x144>)
 8001570:	f006 fd3e 	bl	8007ff0 <HAL_UART_Receive_IT>
		static char MessageReceived[100] = { 0 };
		static uint8_t i = 0;

		if (UART1_rxBuffer == 10) //Test si réception \n
 8001574:	4b48      	ldr	r3, [pc, #288]	; (8001698 <HAL_UART_RxCpltCallback+0x140>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b0a      	cmp	r3, #10
 800157a:	d126      	bne.n	80015ca <HAL_UART_RxCpltCallback+0x72>
				{
			MessageReceived[i++] = UART1_rxBuffer;
 800157c:	4b48      	ldr	r3, [pc, #288]	; (80016a0 <HAL_UART_RxCpltCallback+0x148>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	b2d1      	uxtb	r1, r2
 8001584:	4a46      	ldr	r2, [pc, #280]	; (80016a0 <HAL_UART_RxCpltCallback+0x148>)
 8001586:	7011      	strb	r1, [r2, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b43      	ldr	r3, [pc, #268]	; (8001698 <HAL_UART_RxCpltCallback+0x140>)
 800158c:	7819      	ldrb	r1, [r3, #0]
 800158e:	4b45      	ldr	r3, [pc, #276]	; (80016a4 <HAL_UART_RxCpltCallback+0x14c>)
 8001590:	5499      	strb	r1, [r3, r2]

			//Envoi le message reçu sur la console
			HAL_UART_Transmit(&huart3, &MessageReceived, i, 500);
 8001592:	4b43      	ldr	r3, [pc, #268]	; (80016a0 <HAL_UART_RxCpltCallback+0x148>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	b29a      	uxth	r2, r3
 8001598:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800159c:	4941      	ldr	r1, [pc, #260]	; (80016a4 <HAL_UART_RxCpltCallback+0x14c>)
 800159e:	4842      	ldr	r0, [pc, #264]	; (80016a8 <HAL_UART_RxCpltCallback+0x150>)
 80015a0:	f006 fc90 	bl	8007ec4 <HAL_UART_Transmit>

			if (!strcmp(MessageReceived, "+JOIN: Network joined\r\n")) {
 80015a4:	4941      	ldr	r1, [pc, #260]	; (80016ac <HAL_UART_RxCpltCallback+0x154>)
 80015a6:	483f      	ldr	r0, [pc, #252]	; (80016a4 <HAL_UART_RxCpltCallback+0x14c>)
 80015a8:	f7fe fe9a 	bl	80002e0 <strcmp>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <HAL_UART_RxCpltCallback+0x60>
				connected = 1;
 80015b2:	4b3f      	ldr	r3, [pc, #252]	; (80016b0 <HAL_UART_RxCpltCallback+0x158>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
			}
			memset(MessageReceived, 0, sizeof(MessageReceived));
 80015b8:	2264      	movs	r2, #100	; 0x64
 80015ba:	2100      	movs	r1, #0
 80015bc:	4839      	ldr	r0, [pc, #228]	; (80016a4 <HAL_UART_RxCpltCallback+0x14c>)
 80015be:	f009 facd 	bl	800ab5c <memset>
			i = 0;
 80015c2:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <HAL_UART_RxCpltCallback+0x148>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
	} else if (huart->Instance == UART4) {			//Reception Message NPK
		HAL_UART_Receive_IT(&huart4, &UART4_rxBuffer, 21); //Reçoit les 21 bytes
		NPK_Decode(NPK_cleandata); //Triage et Parsing
	} else {
	}
}
 80015c8:	e05f      	b.n	800168a <HAL_UART_RxCpltCallback+0x132>
			MessageReceived[i++] = UART1_rxBuffer;
 80015ca:	4b35      	ldr	r3, [pc, #212]	; (80016a0 <HAL_UART_RxCpltCallback+0x148>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	b2d1      	uxtb	r1, r2
 80015d2:	4a33      	ldr	r2, [pc, #204]	; (80016a0 <HAL_UART_RxCpltCallback+0x148>)
 80015d4:	7011      	strb	r1, [r2, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <HAL_UART_RxCpltCallback+0x140>)
 80015da:	7819      	ldrb	r1, [r3, #0]
 80015dc:	4b31      	ldr	r3, [pc, #196]	; (80016a4 <HAL_UART_RxCpltCallback+0x14c>)
 80015de:	5499      	strb	r1, [r3, r2]
}
 80015e0:	e053      	b.n	800168a <HAL_UART_RxCpltCallback+0x132>
	} else if (huart->Instance == USART2) { //Reception message GPS
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a33      	ldr	r2, [pc, #204]	; (80016b4 <HAL_UART_RxCpltCallback+0x15c>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d10e      	bne.n	800160a <HAL_UART_RxCpltCallback+0xb2>
		GPS_Decode(UART2_rxBuffer); //Decode GPS
 80015ec:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <HAL_UART_RxCpltCallback+0x160>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fa55 	bl	8000aa0 <GPS_Decode>
		if (stop_gps == 0) {
 80015f6:	4b31      	ldr	r3, [pc, #196]	; (80016bc <HAL_UART_RxCpltCallback+0x164>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d145      	bne.n	800168a <HAL_UART_RxCpltCallback+0x132>
			HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer, 1); //Restart Interrupt
 80015fe:	2201      	movs	r2, #1
 8001600:	492d      	ldr	r1, [pc, #180]	; (80016b8 <HAL_UART_RxCpltCallback+0x160>)
 8001602:	482f      	ldr	r0, [pc, #188]	; (80016c0 <HAL_UART_RxCpltCallback+0x168>)
 8001604:	f006 fcf4 	bl	8007ff0 <HAL_UART_Receive_IT>
}
 8001608:	e03f      	b.n	800168a <HAL_UART_RxCpltCallback+0x132>
	} else if (huart->Instance == USART3) // Console
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a2d      	ldr	r2, [pc, #180]	; (80016c4 <HAL_UART_RxCpltCallback+0x16c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d12d      	bne.n	8001670 <HAL_UART_RxCpltCallback+0x118>
		HAL_UART_Receive_IT(&huart3, &UART3_rxBuffer, 1); //Restart Interrupt
 8001614:	2201      	movs	r2, #1
 8001616:	492c      	ldr	r1, [pc, #176]	; (80016c8 <HAL_UART_RxCpltCallback+0x170>)
 8001618:	4823      	ldr	r0, [pc, #140]	; (80016a8 <HAL_UART_RxCpltCallback+0x150>)
 800161a:	f006 fce9 	bl	8007ff0 <HAL_UART_Receive_IT>
		if (UART3_rxBuffer == 10) //Test si réception \n
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <HAL_UART_RxCpltCallback+0x170>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b0a      	cmp	r3, #10
 8001624:	d118      	bne.n	8001658 <HAL_UART_RxCpltCallback+0x100>
			MessageReceived[i] = UART3_rxBuffer;
 8001626:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_UART_RxCpltCallback+0x174>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <HAL_UART_RxCpltCallback+0x170>)
 800162e:	7819      	ldrb	r1, [r3, #0]
 8001630:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <HAL_UART_RxCpltCallback+0x178>)
 8001632:	5499      	strb	r1, [r3, r2]
			HAL_UART_Transmit(&huart1, &MessageReceived, i, 500);
 8001634:	4b25      	ldr	r3, [pc, #148]	; (80016cc <HAL_UART_RxCpltCallback+0x174>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b29a      	uxth	r2, r3
 800163a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800163e:	4924      	ldr	r1, [pc, #144]	; (80016d0 <HAL_UART_RxCpltCallback+0x178>)
 8001640:	4816      	ldr	r0, [pc, #88]	; (800169c <HAL_UART_RxCpltCallback+0x144>)
 8001642:	f006 fc3f 	bl	8007ec4 <HAL_UART_Transmit>
			memset(MessageReceived, 0, sizeof(MessageReceived));
 8001646:	2264      	movs	r2, #100	; 0x64
 8001648:	2100      	movs	r1, #0
 800164a:	4821      	ldr	r0, [pc, #132]	; (80016d0 <HAL_UART_RxCpltCallback+0x178>)
 800164c:	f009 fa86 	bl	800ab5c <memset>
			i = 0;
 8001650:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <HAL_UART_RxCpltCallback+0x174>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
}
 8001656:	e018      	b.n	800168a <HAL_UART_RxCpltCallback+0x132>
			MessageReceived[i++] = UART3_rxBuffer;
 8001658:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <HAL_UART_RxCpltCallback+0x174>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	b2d1      	uxtb	r1, r2
 8001660:	4a1a      	ldr	r2, [pc, #104]	; (80016cc <HAL_UART_RxCpltCallback+0x174>)
 8001662:	7011      	strb	r1, [r2, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_UART_RxCpltCallback+0x170>)
 8001668:	7819      	ldrb	r1, [r3, #0]
 800166a:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_UART_RxCpltCallback+0x178>)
 800166c:	5499      	strb	r1, [r3, r2]
}
 800166e:	e00c      	b.n	800168a <HAL_UART_RxCpltCallback+0x132>
	} else if (huart->Instance == UART4) {			//Reception Message NPK
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <HAL_UART_RxCpltCallback+0x17c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d107      	bne.n	800168a <HAL_UART_RxCpltCallback+0x132>
		HAL_UART_Receive_IT(&huart4, &UART4_rxBuffer, 21); //Reçoit les 21 bytes
 800167a:	2215      	movs	r2, #21
 800167c:	4916      	ldr	r1, [pc, #88]	; (80016d8 <HAL_UART_RxCpltCallback+0x180>)
 800167e:	4817      	ldr	r0, [pc, #92]	; (80016dc <HAL_UART_RxCpltCallback+0x184>)
 8001680:	f006 fcb6 	bl	8007ff0 <HAL_UART_Receive_IT>
		NPK_Decode(NPK_cleandata); //Triage et Parsing
 8001684:	4816      	ldr	r0, [pc, #88]	; (80016e0 <HAL_UART_RxCpltCallback+0x188>)
 8001686:	f7ff fba3 	bl	8000dd0 <NPK_Decode>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40011000 	.word	0x40011000
 8001698:	24000bac 	.word	0x24000bac
 800169c:	240004a8 	.word	0x240004a8
 80016a0:	24000bdf 	.word	0x24000bdf
 80016a4:	24000be0 	.word	0x24000be0
 80016a8:	240005c8 	.word	0x240005c8
 80016ac:	0800f618 	.word	0x0800f618
 80016b0:	24000ba4 	.word	0x24000ba4
 80016b4:	40004400 	.word	0x40004400
 80016b8:	24000bad 	.word	0x24000bad
 80016bc:	24000ba8 	.word	0x24000ba8
 80016c0:	24000538 	.word	0x24000538
 80016c4:	40004800 	.word	0x40004800
 80016c8:	24000bae 	.word	0x24000bae
 80016cc:	24000c44 	.word	0x24000c44
 80016d0:	24000c48 	.word	0x24000c48
 80016d4:	40004c00 	.word	0x40004c00
 80016d8:	24000bb0 	.word	0x24000bb0
 80016dc:	24000418 	.word	0x24000418
 80016e0:	24000b6c 	.word	0x24000b6c

080016e4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80016ea:	f001 f993 	bl	8002a14 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80016ee:	f000 f899 	bl	8001824 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80016f2:	f000 fb3b 	bl	8001d6c <MX_GPIO_Init>
	MX_ETH_Init();
 80016f6:	f000 f923 	bl	8001940 <MX_ETH_Init>
	MX_USART3_UART_Init();
 80016fa:	f000 fab9 	bl	8001c70 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80016fe:	f000 fb03 	bl	8001d08 <MX_USB_OTG_FS_PCD_Init>
	MX_USART2_UART_Init();
 8001702:	f000 fa69 	bl	8001bd8 <MX_USART2_UART_Init>
	MX_I2C2_Init();
 8001706:	f000 f967 	bl	80019d8 <MX_I2C2_Init>
	MX_UART4_Init();
 800170a:	f000 f9cd 	bl	8001aa8 <MX_UART4_Init>
	MX_USART1_UART_Init();
 800170e:	f000 fa17 	bl	8001b40 <MX_USART1_UART_Init>
	MX_RTC_Init();
 8001712:	f000 f9a1 	bl	8001a58 <MX_RTC_Init>

	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2104      	movs	r1, #4
 800171a:	4834      	ldr	r0, [pc, #208]	; (80017ec <main+0x108>)
 800171c:	f002 feb8 	bl	8004490 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart1, &UART1_rxBuffer, 1); //INIT Interrupt UART pour LORA
 8001720:	2201      	movs	r2, #1
 8001722:	4933      	ldr	r1, [pc, #204]	; (80017f0 <main+0x10c>)
 8001724:	4833      	ldr	r0, [pc, #204]	; (80017f4 <main+0x110>)
 8001726:	f006 fc63 	bl	8007ff0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer, 1); //INIT Interrupt UART pour GPS
 800172a:	2201      	movs	r2, #1
 800172c:	4932      	ldr	r1, [pc, #200]	; (80017f8 <main+0x114>)
 800172e:	4833      	ldr	r0, [pc, #204]	; (80017fc <main+0x118>)
 8001730:	f006 fc5e 	bl	8007ff0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &UART3_rxBuffer, 1); //INIT Interrupt UART pour USB
 8001734:	2201      	movs	r2, #1
 8001736:	4932      	ldr	r1, [pc, #200]	; (8001800 <main+0x11c>)
 8001738:	4832      	ldr	r0, [pc, #200]	; (8001804 <main+0x120>)
 800173a:	f006 fc59 	bl	8007ff0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, UART4_rxBuffer, 21); //INIT Interrupt UART pour NPK
 800173e:	2215      	movs	r2, #21
 8001740:	4931      	ldr	r1, [pc, #196]	; (8001808 <main+0x124>)
 8001742:	4832      	ldr	r0, [pc, #200]	; (800180c <main+0x128>)
 8001744:	f006 fc54 	bl	8007ff0 <HAL_UART_Receive_IT>
	/* USER CODE BEGIN WHILE */
	while (1) {

		//------------------WAKEUP STOPMODE------------------------------------
		//** Wake Up Ici**
		connected = 0;
 8001748:	4b31      	ldr	r3, [pc, #196]	; (8001810 <main+0x12c>)
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
		stop_gps = 0;
 800174e:	4b31      	ldr	r3, [pc, #196]	; (8001814 <main+0x130>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001754:	4830      	ldr	r0, [pc, #192]	; (8001818 <main+0x134>)
 8001756:	f006 fae1 	bl	8007d1c <HAL_RTCEx_DeactivateWakeUpTimer>
		MX_USART2_UART_Init();
 800175a:	f000 fa3d 	bl	8001bd8 <MX_USART2_UART_Init>
		HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer, 1); //Restart Interrupt
 800175e:	2201      	movs	r2, #1
 8001760:	4925      	ldr	r1, [pc, #148]	; (80017f8 <main+0x114>)
 8001762:	4826      	ldr	r0, [pc, #152]	; (80017fc <main+0x118>)
 8001764:	f006 fc44 	bl	8007ff0 <HAL_UART_Receive_IT>

		//----------------------LORA-------------------------------------------
		if (connected == 0) {
 8001768:	4b29      	ldr	r3, [pc, #164]	; (8001810 <main+0x12c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <main+0x90>
			LoRa_Init(); //Init and connect to LoRa
 8001770:	f7ff fe24 	bl	80013bc <LoRa_Init>
		}

		//----------------------SHT SENSOR/I2C---------------------------------
		get_SHT_data();
 8001774:	f7ff fb88 	bl	8000e88 <get_SHT_data>

		//----------------------GAZ SENSOR/I2C---------------------------------
		get_GAZ_data();
 8001778:	f7ff fbf2 	bl	8000f60 <get_GAZ_data>

		//----------------------NPK SENSOR/UART--------------------------------
		get_NPK_data();
 800177c:	f7ff fb6a 	bl	8000e54 <get_NPK_data>

		//---------------------GPS---------------------------------------------

		//------------------PRINT DATA------------------------------------------
		print_debug();
 8001780:	f7ff fc64 	bl	800104c <print_debug>
		print_lora();
 8001784:	f7ff fd22 	bl	80011cc <print_lora>

		//------------------ENTERING STOPMODE--------------------------------------------
		uint8_t buffer[40] = { 0 };
 8001788:	2300      	movs	r3, #0
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	2224      	movs	r2, #36	; 0x24
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f009 f9e2 	bl	800ab5c <memset>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2104      	movs	r1, #4
 800179c:	4813      	ldr	r0, [pc, #76]	; (80017ec <main+0x108>)
 800179e:	f002 fe77 	bl	8004490 <HAL_GPIO_WritePin>
		sprintf(buffer, "Entering StopMode\r\n");
 80017a2:	463b      	mov	r3, r7
 80017a4:	491d      	ldr	r1, [pc, #116]	; (800181c <main+0x138>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f00a f830 	bl	800b80c <siprintf>
		HAL_UART_Transmit(&huart3, buffer, sizeof(buffer), 100);
 80017ac:	4639      	mov	r1, r7
 80017ae:	2364      	movs	r3, #100	; 0x64
 80017b0:	2228      	movs	r2, #40	; 0x28
 80017b2:	4814      	ldr	r0, [pc, #80]	; (8001804 <main+0x120>)
 80017b4:	f006 fb86 	bl	8007ec4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, "AT+LOWPOWER\r\n", 30, 100);
 80017b8:	2364      	movs	r3, #100	; 0x64
 80017ba:	221e      	movs	r2, #30
 80017bc:	4918      	ldr	r1, [pc, #96]	; (8001820 <main+0x13c>)
 80017be:	480d      	ldr	r0, [pc, #52]	; (80017f4 <main+0x110>)
 80017c0:	f006 fb80 	bl	8007ec4 <HAL_UART_Transmit>

		//Every 5min
		if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, SEC10,
 80017c4:	2204      	movs	r2, #4
 80017c6:	210a      	movs	r1, #10
 80017c8:	4813      	ldr	r0, [pc, #76]	; (8001818 <main+0x134>)
 80017ca:	f006 fa15 	bl	8007bf8 <HAL_RTCEx_SetWakeUpTimer_IT>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <main+0xf4>
		RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK) {
			Error_Handler();
 80017d4:	f000 fbde 	bl	8001f94 <Error_Handler>
		}

		HAL_SuspendTick();
 80017d8:	f001 f9d2 	bl	8002b80 <HAL_SuspendTick>
		HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
 80017dc:	2101      	movs	r1, #1
 80017de:	2000      	movs	r0, #0
 80017e0:	f003 fd52 	bl	8005288 <HAL_PWR_EnterSTOPMode>
		HAL_Delay(100);
 80017e4:	2064      	movs	r0, #100	; 0x64
 80017e6:	f001 f9a7 	bl	8002b38 <HAL_Delay>
	while (1) {
 80017ea:	e7ad      	b.n	8001748 <main+0x64>
 80017ec:	58021400 	.word	0x58021400
 80017f0:	24000bac 	.word	0x24000bac
 80017f4:	240004a8 	.word	0x240004a8
 80017f8:	24000bad 	.word	0x24000bad
 80017fc:	24000538 	.word	0x24000538
 8001800:	24000bae 	.word	0x24000bae
 8001804:	240005c8 	.word	0x240005c8
 8001808:	24000bb0 	.word	0x24000bb0
 800180c:	24000418 	.word	0x24000418
 8001810:	24000ba4 	.word	0x24000ba4
 8001814:	24000ba8 	.word	0x24000ba8
 8001818:	240003f4 	.word	0x240003f4
 800181c:	0800f630 	.word	0x0800f630
 8001820:	0800f644 	.word	0x0800f644

08001824 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b09c      	sub	sp, #112	; 0x70
 8001828:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800182a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182e:	224c      	movs	r2, #76	; 0x4c
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f009 f992 	bl	800ab5c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2220      	movs	r2, #32
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f009 f98c 	bl	800ab5c <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001844:	2002      	movs	r0, #2
 8001846:	f003 fd5b 	bl	8005300 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800184a:	2300      	movs	r3, #0
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	4b39      	ldr	r3, [pc, #228]	; (8001934 <SystemClock_Config+0x110>)
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	4a38      	ldr	r2, [pc, #224]	; (8001934 <SystemClock_Config+0x110>)
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	62d3      	str	r3, [r2, #44]	; 0x2c
 800185a:	4b36      	ldr	r3, [pc, #216]	; (8001934 <SystemClock_Config+0x110>)
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	4b34      	ldr	r3, [pc, #208]	; (8001938 <SystemClock_Config+0x114>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800186c:	4a32      	ldr	r2, [pc, #200]	; (8001938 <SystemClock_Config+0x114>)
 800186e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b30      	ldr	r3, [pc, #192]	; (8001938 <SystemClock_Config+0x114>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001880:	bf00      	nop
 8001882:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <SystemClock_Config+0x114>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800188a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800188e:	d1f8      	bne.n	8001882 <SystemClock_Config+0x5e>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001890:	f003 fcea 	bl	8005268 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001894:	f001 f994 	bl	8002bc0 <HAL_GetREVID>
 8001898:	4b28      	ldr	r3, [pc, #160]	; (800193c <SystemClock_Config+0x118>)
 800189a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189c:	4a27      	ldr	r2, [pc, #156]	; (800193c <SystemClock_Config+0x118>)
 800189e:	f023 0318 	bic.w	r3, r3, #24
 80018a2:	6713      	str	r3, [r2, #112]	; 0x70

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80018a4:	2307      	movs	r3, #7
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018ae:	2301      	movs	r3, #1
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80018b2:	2301      	movs	r3, #1
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b6:	2340      	movs	r3, #64	; 0x40
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ba:	2302      	movs	r3, #2
 80018bc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018be:	2302      	movs	r3, #2
 80018c0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80018c2:	2301      	movs	r3, #1
 80018c4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 24;
 80018c6:	2318      	movs	r3, #24
 80018c8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80018ca:	2302      	movs	r3, #2
 80018cc:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80018ce:	2304      	movs	r3, #4
 80018d0:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80018d2:	2302      	movs	r3, #2
 80018d4:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80018d6:	230c      	movs	r3, #12
 80018d8:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80018da:	2300      	movs	r3, #0
 80018dc:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 fd54 	bl	8005394 <HAL_RCC_OscConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0xd2>
		Error_Handler();
 80018f2:	f000 fb4f 	bl	8001f94 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018f6:	233f      	movs	r3, #63	; 0x3f
 80018f8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	2101      	movs	r1, #1
 800191a:	4618      	mov	r0, r3
 800191c:	f004 f968 	bl	8005bf0 <HAL_RCC_ClockConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <SystemClock_Config+0x106>
		Error_Handler();
 8001926:	f000 fb35 	bl	8001f94 <Error_Handler>
	}
}
 800192a:	bf00      	nop
 800192c:	3770      	adds	r7, #112	; 0x70
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	58000400 	.word	0x58000400
 8001938:	58024800 	.word	0x58024800
 800193c:	58024400 	.word	0x58024400

08001940 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <MX_ETH_Init+0x80>)
 8001946:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <MX_ETH_Init+0x84>)
 8001948:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 800194a:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <MX_ETH_Init+0x88>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8001950:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <MX_ETH_Init+0x88>)
 8001952:	2280      	movs	r2, #128	; 0x80
 8001954:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 8001956:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <MX_ETH_Init+0x88>)
 8001958:	22e1      	movs	r2, #225	; 0xe1
 800195a:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 800195c:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <MX_ETH_Init+0x88>)
 800195e:	2200      	movs	r2, #0
 8001960:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8001962:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <MX_ETH_Init+0x88>)
 8001964:	2200      	movs	r2, #0
 8001966:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <MX_ETH_Init+0x88>)
 800196a:	2200      	movs	r2, #0
 800196c:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 800196e:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <MX_ETH_Init+0x80>)
 8001970:	4a15      	ldr	r2, [pc, #84]	; (80019c8 <MX_ETH_Init+0x88>)
 8001972:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <MX_ETH_Init+0x80>)
 8001976:	2201      	movs	r2, #1
 8001978:	721a      	strb	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_ETH_Init+0x80>)
 800197c:	4a13      	ldr	r2, [pc, #76]	; (80019cc <MX_ETH_Init+0x8c>)
 800197e:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_ETH_Init+0x80>)
 8001982:	4a13      	ldr	r2, [pc, #76]	; (80019d0 <MX_ETH_Init+0x90>)
 8001984:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <MX_ETH_Init+0x80>)
 8001988:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800198c:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 800198e:	480c      	ldr	r0, [pc, #48]	; (80019c0 <MX_ETH_Init+0x80>)
 8001990:	f001 ffaa 	bl	80038e8 <HAL_ETH_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_ETH_Init+0x5e>
		Error_Handler();
 800199a:	f000 fafb 	bl	8001f94 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 800199e:	2238      	movs	r2, #56	; 0x38
 80019a0:	2100      	movs	r1, #0
 80019a2:	480c      	ldr	r0, [pc, #48]	; (80019d4 <MX_ETH_Init+0x94>)
 80019a4:	f009 f8da 	bl	800ab5c <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <MX_ETH_Init+0x94>)
 80019aa:	2221      	movs	r2, #33	; 0x21
 80019ac:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_ETH_Init+0x94>)
 80019b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019b4:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <MX_ETH_Init+0x94>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	240002f8 	.word	0x240002f8
 80019c4:	40028000 	.word	0x40028000
 80019c8:	24000cac 	.word	0x24000cac
 80019cc:	24000244 	.word	0x24000244
 80019d0:	240001e4 	.word	0x240001e4
 80019d4:	240002c0 	.word	0x240002c0

080019d8 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <MX_I2C2_Init+0x74>)
 80019de:	4a1c      	ldr	r2, [pc, #112]	; (8001a50 <MX_I2C2_Init+0x78>)
 80019e0:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10707DBC;
 80019e2:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <MX_I2C2_Init+0x74>)
 80019e4:	4a1b      	ldr	r2, [pc, #108]	; (8001a54 <MX_I2C2_Init+0x7c>)
 80019e6:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <MX_I2C2_Init+0x74>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <MX_I2C2_Init+0x74>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <MX_I2C2_Init+0x74>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <MX_I2C2_Init+0x74>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <MX_I2C2_Init+0x74>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_I2C2_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <MX_I2C2_Init+0x74>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001a12:	480e      	ldr	r0, [pc, #56]	; (8001a4c <MX_I2C2_Init+0x74>)
 8001a14:	f002 fd56 	bl	80044c4 <HAL_I2C_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_I2C2_Init+0x4a>
		Error_Handler();
 8001a1e:	f000 fab9 	bl	8001f94 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8001a22:	2100      	movs	r1, #0
 8001a24:	4809      	ldr	r0, [pc, #36]	; (8001a4c <MX_I2C2_Init+0x74>)
 8001a26:	f003 fa3f 	bl	8004ea8 <HAL_I2CEx_ConfigAnalogFilter>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001a30:	f000 fab0 	bl	8001f94 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8001a34:	2100      	movs	r1, #0
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_I2C2_Init+0x74>)
 8001a38:	f003 fa81 	bl	8004f3e <HAL_I2CEx_ConfigDigitalFilter>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_I2C2_Init+0x6e>
		Error_Handler();
 8001a42:	f000 faa7 	bl	8001f94 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	240003a8 	.word	0x240003a8
 8001a50:	40005800 	.word	0x40005800
 8001a54:	10707dbc 	.word	0x10707dbc

08001a58 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001a5c:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <MX_RTC_Init+0x48>)
 8001a5e:	4a11      	ldr	r2, [pc, #68]	; (8001aa4 <MX_RTC_Init+0x4c>)
 8001a60:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_RTC_Init+0x48>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001a68:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <MX_RTC_Init+0x48>)
 8001a6a:	227f      	movs	r2, #127	; 0x7f
 8001a6c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_RTC_Init+0x48>)
 8001a70:	22ff      	movs	r2, #255	; 0xff
 8001a72:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <MX_RTC_Init+0x48>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_RTC_Init+0x48>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <MX_RTC_Init+0x48>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_RTC_Init+0x48>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <MX_RTC_Init+0x48>)
 8001a8e:	f005 ffa3 	bl	80079d8 <HAL_RTC_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_RTC_Init+0x44>
		Error_Handler();
 8001a98:	f000 fa7c 	bl	8001f94 <Error_Handler>
	 }*/
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	240003f4 	.word	0x240003f4
 8001aa4:	58004000 	.word	0x58004000

08001aa8 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001aac:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <MX_UART4_Init+0x90>)
 8001aae:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <MX_UART4_Init+0x94>)
 8001ab0:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 4800;
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <MX_UART4_Init+0x90>)
 8001ab4:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001ab8:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001aba:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <MX_UART4_Init+0x90>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <MX_UART4_Init+0x90>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <MX_UART4_Init+0x90>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <MX_UART4_Init+0x90>)
 8001ace:	220c      	movs	r2, #12
 8001ad0:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad2:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <MX_UART4_Init+0x90>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <MX_UART4_Init+0x90>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ade:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <MX_UART4_Init+0x90>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <MX_UART4_Init+0x90>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <MX_UART4_Init+0x90>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8001af0:	4811      	ldr	r0, [pc, #68]	; (8001b38 <MX_UART4_Init+0x90>)
 8001af2:	f006 f997 	bl	8007e24 <HAL_UART_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_UART4_Init+0x58>
		Error_Handler();
 8001afc:	f000 fa4a 	bl	8001f94 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 8001b00:	2100      	movs	r1, #0
 8001b02:	480d      	ldr	r0, [pc, #52]	; (8001b38 <MX_UART4_Init+0x90>)
 8001b04:	f008 fc2b 	bl	800a35e <HAL_UARTEx_SetTxFifoThreshold>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_UART4_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001b0e:	f000 fa41 	bl	8001f94 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 8001b12:	2100      	movs	r1, #0
 8001b14:	4808      	ldr	r0, [pc, #32]	; (8001b38 <MX_UART4_Init+0x90>)
 8001b16:	f008 fc60 	bl	800a3da <HAL_UARTEx_SetRxFifoThreshold>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_UART4_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001b20:	f000 fa38 	bl	8001f94 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 8001b24:	4804      	ldr	r0, [pc, #16]	; (8001b38 <MX_UART4_Init+0x90>)
 8001b26:	f008 fbe1 	bl	800a2ec <HAL_UARTEx_DisableFifoMode>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_UART4_Init+0x8c>
		Error_Handler();
 8001b30:	f000 fa30 	bl	8001f94 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	24000418 	.word	0x24000418
 8001b3c:	40004c00 	.word	0x40004c00

08001b40 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001b44:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <MX_USART1_UART_Init+0x90>)
 8001b46:	4a23      	ldr	r2, [pc, #140]	; (8001bd4 <MX_USART1_UART_Init+0x94>)
 8001b48:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001b4a:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <MX_USART1_UART_Init+0x90>)
 8001b4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b50:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b52:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <MX_USART1_UART_Init+0x90>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <MX_USART1_UART_Init+0x90>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <MX_USART1_UART_Init+0x90>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <MX_USART1_UART_Init+0x90>)
 8001b66:	220c      	movs	r2, #12
 8001b68:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6a:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <MX_USART1_UART_Init+0x90>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <MX_USART1_UART_Init+0x90>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <MX_USART1_UART_Init+0x90>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <MX_USART1_UART_Init+0x90>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b82:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <MX_USART1_UART_Init+0x90>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001b88:	4811      	ldr	r0, [pc, #68]	; (8001bd0 <MX_USART1_UART_Init+0x90>)
 8001b8a:	f006 f94b 	bl	8007e24 <HAL_UART_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001b94:	f000 f9fe 	bl	8001f94 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001b98:	2100      	movs	r1, #0
 8001b9a:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <MX_USART1_UART_Init+0x90>)
 8001b9c:	f008 fbdf 	bl	800a35e <HAL_UARTEx_SetTxFifoThreshold>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001ba6:	f000 f9f5 	bl	8001f94 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8001baa:	2100      	movs	r1, #0
 8001bac:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <MX_USART1_UART_Init+0x90>)
 8001bae:	f008 fc14 	bl	800a3da <HAL_UARTEx_SetRxFifoThreshold>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001bb8:	f000 f9ec 	bl	8001f94 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8001bbc:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <MX_USART1_UART_Init+0x90>)
 8001bbe:	f008 fb95 	bl	800a2ec <HAL_UARTEx_DisableFifoMode>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8001bc8:	f000 f9e4 	bl	8001f94 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	240004a8 	.word	0x240004a8
 8001bd4:	40011000 	.word	0x40011000

08001bd8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001bdc:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001bde:	4a23      	ldr	r2, [pc, #140]	; (8001c6c <MX_USART2_UART_Init+0x94>)
 8001be0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001be2:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001be4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001be8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bea:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001bfe:	220c      	movs	r2, #12
 8001c00:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c02:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c08:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c0e:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c14:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001c20:	4811      	ldr	r0, [pc, #68]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001c22:	f006 f8ff 	bl	8007e24 <HAL_UART_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8001c2c:	f000 f9b2 	bl	8001f94 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8001c30:	2100      	movs	r1, #0
 8001c32:	480d      	ldr	r0, [pc, #52]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001c34:	f008 fb93 	bl	800a35e <HAL_UARTEx_SetTxFifoThreshold>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001c3e:	f000 f9a9 	bl	8001f94 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8001c42:	2100      	movs	r1, #0
 8001c44:	4808      	ldr	r0, [pc, #32]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001c46:	f008 fbc8 	bl	800a3da <HAL_UARTEx_SetRxFifoThreshold>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001c50:	f000 f9a0 	bl	8001f94 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8001c54:	4804      	ldr	r0, [pc, #16]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001c56:	f008 fb49 	bl	800a2ec <HAL_UARTEx_DisableFifoMode>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8001c60:	f000 f998 	bl	8001f94 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	24000538 	.word	0x24000538
 8001c6c:	40004400 	.word	0x40004400

08001c70 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <MX_USART3_UART_Init+0x90>)
 8001c76:	4a23      	ldr	r2, [pc, #140]	; (8001d04 <MX_USART3_UART_Init+0x94>)
 8001c78:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001c7a:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <MX_USART3_UART_Init+0x90>)
 8001c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c80:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c82:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <MX_USART3_UART_Init+0x90>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001c88:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <MX_USART3_UART_Init+0x90>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <MX_USART3_UART_Init+0x90>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <MX_USART3_UART_Init+0x90>)
 8001c96:	220c      	movs	r2, #12
 8001c98:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9a:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <MX_USART3_UART_Init+0x90>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <MX_USART3_UART_Init+0x90>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ca6:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <MX_USART3_UART_Init+0x90>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <MX_USART3_UART_Init+0x90>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <MX_USART3_UART_Init+0x90>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001cb8:	4811      	ldr	r0, [pc, #68]	; (8001d00 <MX_USART3_UART_Init+0x90>)
 8001cba:	f006 f8b3 	bl	8007e24 <HAL_UART_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_USART3_UART_Init+0x58>
		Error_Handler();
 8001cc4:	f000 f966 	bl	8001f94 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8001cc8:	2100      	movs	r1, #0
 8001cca:	480d      	ldr	r0, [pc, #52]	; (8001d00 <MX_USART3_UART_Init+0x90>)
 8001ccc:	f008 fb47 	bl	800a35e <HAL_UARTEx_SetTxFifoThreshold>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_USART3_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001cd6:	f000 f95d 	bl	8001f94 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4808      	ldr	r0, [pc, #32]	; (8001d00 <MX_USART3_UART_Init+0x90>)
 8001cde:	f008 fb7c 	bl	800a3da <HAL_UARTEx_SetRxFifoThreshold>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_USART3_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001ce8:	f000 f954 	bl	8001f94 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8001cec:	4804      	ldr	r0, [pc, #16]	; (8001d00 <MX_USART3_UART_Init+0x90>)
 8001cee:	f008 fafd 	bl	800a2ec <HAL_UARTEx_DisableFifoMode>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 8001cf8:	f000 f94c 	bl	8001f94 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	240005c8 	.word	0x240005c8
 8001d04:	40004800 	.word	0x40004800

08001d08 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d0c:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d0e:	4a16      	ldr	r2, [pc, #88]	; (8001d68 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001d10:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d14:	2209      	movs	r2, #9
 8001d16:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d26:	2202      	movs	r2, #2
 8001d28:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	629a      	str	r2, [r3, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d50:	f003 f941 	bl	8004fd6 <HAL_PCD_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_USB_OTG_FS_PCD_Init+0x56>
		Error_Handler();
 8001d5a:	f000 f91b 	bl	8001f94 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	24000658 	.word	0x24000658
 8001d68:	40080000 	.word	0x40080000

08001d6c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08e      	sub	sp, #56	; 0x38
 8001d70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d82:	4b7d      	ldr	r3, [pc, #500]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d88:	4a7b      	ldr	r2, [pc, #492]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d92:	4b79      	ldr	r3, [pc, #484]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	623b      	str	r3, [r7, #32]
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001da0:	4b75      	ldr	r3, [pc, #468]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da6:	4a74      	ldr	r2, [pc, #464]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001da8:	f043 0320 	orr.w	r3, r3, #32
 8001dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db0:	4b71      	ldr	r3, [pc, #452]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001dbe:	4b6e      	ldr	r3, [pc, #440]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc4:	4a6c      	ldr	r2, [pc, #432]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dce:	4b6a      	ldr	r3, [pc, #424]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	4b66      	ldr	r3, [pc, #408]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de2:	4a65      	ldr	r2, [pc, #404]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dec:	4b62      	ldr	r3, [pc, #392]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	4b5f      	ldr	r3, [pc, #380]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e00:	4a5d      	ldr	r2, [pc, #372]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001e02:	f043 0302 	orr.w	r3, r3, #2
 8001e06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0a:	4b5b      	ldr	r3, [pc, #364]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001e18:	4b57      	ldr	r3, [pc, #348]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1e:	4a56      	ldr	r2, [pc, #344]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001e20:	f043 0308 	orr.w	r3, r3, #8
 8001e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e28:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001e36:	4b50      	ldr	r3, [pc, #320]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3c:	4a4e      	ldr	r2, [pc, #312]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e46:	4b4c      	ldr	r3, [pc, #304]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001e54:	4b48      	ldr	r3, [pc, #288]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5a:	4a47      	ldr	r2, [pc, #284]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001e5c:	f043 0310 	orr.w	r3, r3, #16
 8001e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e64:	4b44      	ldr	r3, [pc, #272]	; (8001f78 <MX_GPIO_Init+0x20c>)
 8001e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2104      	movs	r1, #4
 8001e76:	4841      	ldr	r0, [pc, #260]	; (8001f7c <MX_GPIO_Init+0x210>)
 8001e78:	f002 fb0a 	bl	8004490 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f244 0101 	movw	r1, #16385	; 0x4001
 8001e82:	483f      	ldr	r0, [pc, #252]	; (8001f80 <MX_GPIO_Init+0x214>)
 8001e84:	f002 fb04 	bl	8004490 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin,
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e8e:	483d      	ldr	r0, [pc, #244]	; (8001f84 <MX_GPIO_Init+0x218>)
 8001e90:	f002 fafe 	bl	8004490 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e9a:	483b      	ldr	r0, [pc, #236]	; (8001f88 <MX_GPIO_Init+0x21c>)
 8001e9c:	f002 faf8 	bl	8004490 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	4839      	ldr	r0, [pc, #228]	; (8001f8c <MX_GPIO_Init+0x220>)
 8001ea6:	f002 faf3 	bl	8004490 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : B1_Pin PC9 */
	GPIO_InitStruct.Pin = B1_Pin | GPIO_PIN_9;
 8001eaa:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4832      	ldr	r0, [pc, #200]	; (8001f88 <MX_GPIO_Init+0x21c>)
 8001ec0:	f002 f936 	bl	8004130 <HAL_GPIO_Init>

	/*Configure GPIO pin : PF2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4828      	ldr	r0, [pc, #160]	; (8001f7c <MX_GPIO_Init+0x210>)
 8001edc:	f002 f928 	bl	8004130 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 8001ee0:	f244 0301 	movw	r3, #16385	; 0x4001
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4821      	ldr	r0, [pc, #132]	; (8001f80 <MX_GPIO_Init+0x214>)
 8001efa:	f002 f919 	bl	8004130 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f04:	2301      	movs	r3, #1
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f14:	4619      	mov	r1, r3
 8001f16:	481b      	ldr	r0, [pc, #108]	; (8001f84 <MX_GPIO_Init+0x218>)
 8001f18:	f002 f90a 	bl	8004130 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4817      	ldr	r0, [pc, #92]	; (8001f90 <MX_GPIO_Init+0x224>)
 8001f32:	f002 f8fd 	bl	8004130 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	2300      	movs	r3, #0
 8001f46:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	480e      	ldr	r0, [pc, #56]	; (8001f88 <MX_GPIO_Init+0x21c>)
 8001f50:	f002 f8ee 	bl	8004130 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001f54:	2302      	movs	r3, #2
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4808      	ldr	r0, [pc, #32]	; (8001f8c <MX_GPIO_Init+0x220>)
 8001f6c:	f002 f8e0 	bl	8004130 <HAL_GPIO_Init>

}
 8001f70:	bf00      	nop
 8001f72:	3738      	adds	r7, #56	; 0x38
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	58024400 	.word	0x58024400
 8001f7c:	58021400 	.word	0x58021400
 8001f80:	58020400 	.word	0x58020400
 8001f84:	58020c00 	.word	0x58020c00
 8001f88:	58020800 	.word	0x58020800
 8001f8c:	58021000 	.word	0x58021000
 8001f90:	58021800 	.word	0x58021800

08001f94 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f98:	b672      	cpsid	i
}
 8001f9a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f9c:	e7fe      	b.n	8001f9c <Error_Handler+0x8>
	...

08001fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_MspInit+0x30>)
 8001fa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fac:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <HAL_MspInit+0x30>)
 8001fae:	f043 0302 	orr.w	r3, r3, #2
 8001fb2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_MspInit+0x30>)
 8001fb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	58024400 	.word	0x58024400

08001fd4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08e      	sub	sp, #56	; 0x38
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a59      	ldr	r2, [pc, #356]	; (8002158 <HAL_ETH_MspInit+0x184>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	f040 80ab 	bne.w	800214e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001ff8:	4b58      	ldr	r3, [pc, #352]	; (800215c <HAL_ETH_MspInit+0x188>)
 8001ffa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ffe:	4a57      	ldr	r2, [pc, #348]	; (800215c <HAL_ETH_MspInit+0x188>)
 8002000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002004:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002008:	4b54      	ldr	r3, [pc, #336]	; (800215c <HAL_ETH_MspInit+0x188>)
 800200a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800200e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002016:	4b51      	ldr	r3, [pc, #324]	; (800215c <HAL_ETH_MspInit+0x188>)
 8002018:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800201c:	4a4f      	ldr	r2, [pc, #316]	; (800215c <HAL_ETH_MspInit+0x188>)
 800201e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002022:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002026:	4b4d      	ldr	r3, [pc, #308]	; (800215c <HAL_ETH_MspInit+0x188>)
 8002028:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800202c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002034:	4b49      	ldr	r3, [pc, #292]	; (800215c <HAL_ETH_MspInit+0x188>)
 8002036:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800203a:	4a48      	ldr	r2, [pc, #288]	; (800215c <HAL_ETH_MspInit+0x188>)
 800203c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002040:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002044:	4b45      	ldr	r3, [pc, #276]	; (800215c <HAL_ETH_MspInit+0x188>)
 8002046:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002052:	4b42      	ldr	r3, [pc, #264]	; (800215c <HAL_ETH_MspInit+0x188>)
 8002054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002058:	4a40      	ldr	r2, [pc, #256]	; (800215c <HAL_ETH_MspInit+0x188>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002062:	4b3e      	ldr	r3, [pc, #248]	; (800215c <HAL_ETH_MspInit+0x188>)
 8002064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002070:	4b3a      	ldr	r3, [pc, #232]	; (800215c <HAL_ETH_MspInit+0x188>)
 8002072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002076:	4a39      	ldr	r2, [pc, #228]	; (800215c <HAL_ETH_MspInit+0x188>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002080:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_ETH_MspInit+0x188>)
 8002082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	4b33      	ldr	r3, [pc, #204]	; (800215c <HAL_ETH_MspInit+0x188>)
 8002090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002094:	4a31      	ldr	r2, [pc, #196]	; (800215c <HAL_ETH_MspInit+0x188>)
 8002096:	f043 0302 	orr.w	r3, r3, #2
 800209a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800209e:	4b2f      	ldr	r3, [pc, #188]	; (800215c <HAL_ETH_MspInit+0x188>)
 80020a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020ac:	4b2b      	ldr	r3, [pc, #172]	; (800215c <HAL_ETH_MspInit+0x188>)
 80020ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b2:	4a2a      	ldr	r2, [pc, #168]	; (800215c <HAL_ETH_MspInit+0x188>)
 80020b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_ETH_MspInit+0x188>)
 80020be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80020ca:	2332      	movs	r3, #50	; 0x32
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020da:	230b      	movs	r3, #11
 80020dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e2:	4619      	mov	r1, r3
 80020e4:	481e      	ldr	r0, [pc, #120]	; (8002160 <HAL_ETH_MspInit+0x18c>)
 80020e6:	f002 f823 	bl	8004130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80020ea:	2386      	movs	r3, #134	; 0x86
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020fa:	230b      	movs	r3, #11
 80020fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002102:	4619      	mov	r1, r3
 8002104:	4817      	ldr	r0, [pc, #92]	; (8002164 <HAL_ETH_MspInit+0x190>)
 8002106:	f002 f813 	bl	8004130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800210a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800211c:	230b      	movs	r3, #11
 800211e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002124:	4619      	mov	r1, r3
 8002126:	4810      	ldr	r0, [pc, #64]	; (8002168 <HAL_ETH_MspInit+0x194>)
 8002128:	f002 f802 	bl	8004130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800212c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800213e:	230b      	movs	r3, #11
 8002140:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002146:	4619      	mov	r1, r3
 8002148:	4808      	ldr	r0, [pc, #32]	; (800216c <HAL_ETH_MspInit+0x198>)
 800214a:	f001 fff1 	bl	8004130 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800214e:	bf00      	nop
 8002150:	3738      	adds	r7, #56	; 0x38
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40028000 	.word	0x40028000
 800215c:	58024400 	.word	0x58024400
 8002160:	58020800 	.word	0x58020800
 8002164:	58020000 	.word	0x58020000
 8002168:	58020400 	.word	0x58020400
 800216c:	58021800 	.word	0x58021800

08002170 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b0b8      	sub	sp, #224	; 0xe0
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	22bc      	movs	r2, #188	; 0xbc
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f008 fce3 	bl	800ab5c <memset>
  if(hi2c->Instance==I2C2)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a25      	ldr	r2, [pc, #148]	; (8002230 <HAL_I2C_MspInit+0xc0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d142      	bne.n	8002226 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80021a0:	2308      	movs	r3, #8
 80021a2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021aa:	f107 0310 	add.w	r3, r7, #16
 80021ae:	4618      	mov	r0, r3
 80021b0:	f004 f8aa 	bl	8006308 <HAL_RCCEx_PeriphCLKConfig>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80021ba:	f7ff feeb 	bl	8001f94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_I2C_MspInit+0xc4>)
 80021c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c4:	4a1b      	ldr	r2, [pc, #108]	; (8002234 <HAL_I2C_MspInit+0xc4>)
 80021c6:	f043 0302 	orr.w	r3, r3, #2
 80021ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ce:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_I2C_MspInit+0xc4>)
 80021d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SHT30_Pin|GPIO_PIN_11;
 80021dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021e4:	2312      	movs	r3, #18
 80021e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021f6:	2304      	movs	r3, #4
 80021f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002200:	4619      	mov	r1, r3
 8002202:	480d      	ldr	r0, [pc, #52]	; (8002238 <HAL_I2C_MspInit+0xc8>)
 8002204:	f001 ff94 	bl	8004130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002208:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <HAL_I2C_MspInit+0xc4>)
 800220a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800220e:	4a09      	ldr	r2, [pc, #36]	; (8002234 <HAL_I2C_MspInit+0xc4>)
 8002210:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002214:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_I2C_MspInit+0xc4>)
 800221a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800221e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002226:	bf00      	nop
 8002228:	37e0      	adds	r7, #224	; 0xe0
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40005800 	.word	0x40005800
 8002234:	58024400 	.word	0x58024400
 8002238:	58020400 	.word	0x58020400

0800223c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b0b2      	sub	sp, #200	; 0xc8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	22bc      	movs	r2, #188	; 0xbc
 800224a:	2100      	movs	r1, #0
 800224c:	4618      	mov	r0, r3
 800224e:	f008 fc85 	bl	800ab5c <memset>
  if(hrtc->Instance==RTC)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <HAL_RTC_MspInit+0x68>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d11e      	bne.n	800229a <HAL_RTC_MspInit+0x5e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800225c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002260:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002266:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800226a:	f107 030c 	add.w	r3, r7, #12
 800226e:	4618      	mov	r0, r3
 8002270:	f004 f84a 	bl	8006308 <HAL_RCCEx_PeriphCLKConfig>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800227a:	f7ff fe8b 	bl	8001f94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <HAL_RTC_MspInit+0x6c>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002282:	4a09      	ldr	r2, [pc, #36]	; (80022a8 <HAL_RTC_MspInit+0x6c>)
 8002284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002288:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	2003      	movs	r0, #3
 8002290:	f000 fd91 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002294:	2003      	movs	r0, #3
 8002296:	f000 fda8 	bl	8002dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800229a:	bf00      	nop
 800229c:	37c8      	adds	r7, #200	; 0xc8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	58004000 	.word	0x58004000
 80022a8:	58024400 	.word	0x58024400

080022ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b0be      	sub	sp, #248	; 0xf8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022c8:	22bc      	movs	r2, #188	; 0xbc
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f008 fc45 	bl	800ab5c <memset>
  if(huart->Instance==UART4)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4aa1      	ldr	r2, [pc, #644]	; (800255c <HAL_UART_MspInit+0x2b0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d14a      	bne.n	8002372 <HAL_UART_MspInit+0xc6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80022dc:	2302      	movs	r3, #2
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ea:	4618      	mov	r0, r3
 80022ec:	f004 f80c 	bl	8006308 <HAL_RCCEx_PeriphCLKConfig>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022f6:	f7ff fe4d 	bl	8001f94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022fa:	4b99      	ldr	r3, [pc, #612]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 80022fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002300:	4a97      	ldr	r2, [pc, #604]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 8002302:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002306:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800230a:	4b95      	ldr	r3, [pc, #596]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 800230c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002310:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002318:	4b91      	ldr	r3, [pc, #580]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 800231a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800231e:	4a90      	ldr	r2, [pc, #576]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 8002320:	f043 0308 	orr.w	r3, r3, #8
 8002324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002328:	4b8d      	ldr	r3, [pc, #564]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 800232a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	623b      	str	r3, [r7, #32]
 8002334:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002336:	2303      	movs	r3, #3
 8002338:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800234e:	2308      	movs	r3, #8
 8002350:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002354:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002358:	4619      	mov	r1, r3
 800235a:	4882      	ldr	r0, [pc, #520]	; (8002564 <HAL_UART_MspInit+0x2b8>)
 800235c:	f001 fee8 	bl	8004130 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002360:	2200      	movs	r2, #0
 8002362:	2100      	movs	r1, #0
 8002364:	2034      	movs	r0, #52	; 0x34
 8002366:	f000 fd26 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800236a:	2034      	movs	r0, #52	; 0x34
 800236c:	f000 fd3d 	bl	8002dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002370:	e0ef      	b.n	8002552 <HAL_UART_MspInit+0x2a6>
  else if(huart->Instance==USART1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a7c      	ldr	r2, [pc, #496]	; (8002568 <HAL_UART_MspInit+0x2bc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d14a      	bne.n	8002412 <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800237c:	2301      	movs	r3, #1
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800238a:	4618      	mov	r0, r3
 800238c:	f003 ffbc 	bl	8006308 <HAL_RCCEx_PeriphCLKConfig>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_UART_MspInit+0xee>
      Error_Handler();
 8002396:	f7ff fdfd 	bl	8001f94 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800239a:	4b71      	ldr	r3, [pc, #452]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 800239c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023a0:	4a6f      	ldr	r2, [pc, #444]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 80023a2:	f043 0310 	orr.w	r3, r3, #16
 80023a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023aa:	4b6d      	ldr	r3, [pc, #436]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 80023ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b8:	4b69      	ldr	r3, [pc, #420]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 80023ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023be:	4a68      	ldr	r2, [pc, #416]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023c8:	4b65      	ldr	r3, [pc, #404]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 80023ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023d6:	23c0      	movs	r3, #192	; 0xc0
 80023d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023dc:	2302      	movs	r3, #2
 80023de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023ee:	2307      	movs	r3, #7
 80023f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023f8:	4619      	mov	r1, r3
 80023fa:	485c      	ldr	r0, [pc, #368]	; (800256c <HAL_UART_MspInit+0x2c0>)
 80023fc:	f001 fe98 	bl	8004130 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	2100      	movs	r1, #0
 8002404:	2025      	movs	r0, #37	; 0x25
 8002406:	f000 fcd6 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800240a:	2025      	movs	r0, #37	; 0x25
 800240c:	f000 fced 	bl	8002dea <HAL_NVIC_EnableIRQ>
}
 8002410:	e09f      	b.n	8002552 <HAL_UART_MspInit+0x2a6>
  else if(huart->Instance==USART2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a56      	ldr	r2, [pc, #344]	; (8002570 <HAL_UART_MspInit+0x2c4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d14a      	bne.n	80024b2 <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800241c:	2302      	movs	r3, #2
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800242a:	4618      	mov	r0, r3
 800242c:	f003 ff6c 	bl	8006308 <HAL_RCCEx_PeriphCLKConfig>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_UART_MspInit+0x18e>
      Error_Handler();
 8002436:	f7ff fdad 	bl	8001f94 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800243a:	4b49      	ldr	r3, [pc, #292]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 800243c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002440:	4a47      	ldr	r2, [pc, #284]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 8002442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002446:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800244a:	4b45      	ldr	r3, [pc, #276]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 800244c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002458:	4b41      	ldr	r3, [pc, #260]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 800245a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245e:	4a40      	ldr	r2, [pc, #256]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 8002460:	f043 0308 	orr.w	r3, r3, #8
 8002464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002468:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 800246a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002476:	2360      	movs	r3, #96	; 0x60
 8002478:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800248e:	2307      	movs	r3, #7
 8002490:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002494:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002498:	4619      	mov	r1, r3
 800249a:	4832      	ldr	r0, [pc, #200]	; (8002564 <HAL_UART_MspInit+0x2b8>)
 800249c:	f001 fe48 	bl	8004130 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024a0:	2200      	movs	r2, #0
 80024a2:	2100      	movs	r1, #0
 80024a4:	2026      	movs	r0, #38	; 0x26
 80024a6:	f000 fc86 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024aa:	2026      	movs	r0, #38	; 0x26
 80024ac:	f000 fc9d 	bl	8002dea <HAL_NVIC_EnableIRQ>
}
 80024b0:	e04f      	b.n	8002552 <HAL_UART_MspInit+0x2a6>
  else if(huart->Instance==USART3)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a2f      	ldr	r2, [pc, #188]	; (8002574 <HAL_UART_MspInit+0x2c8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d14a      	bne.n	8002552 <HAL_UART_MspInit+0x2a6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024bc:	2302      	movs	r3, #2
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ca:	4618      	mov	r0, r3
 80024cc:	f003 ff1c 	bl	8006308 <HAL_RCCEx_PeriphCLKConfig>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_UART_MspInit+0x22e>
      Error_Handler();
 80024d6:	f7ff fd5d 	bl	8001f94 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024da:	4b21      	ldr	r3, [pc, #132]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 80024dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024e0:	4a1f      	ldr	r2, [pc, #124]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 80024e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024ea:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 80024ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 80024fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024fe:	4a18      	ldr	r2, [pc, #96]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 8002500:	f043 0308 	orr.w	r3, r3, #8
 8002504:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <HAL_UART_MspInit+0x2b4>)
 800250a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002516:	f44f 7340 	mov.w	r3, #768	; 0x300
 800251a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2300      	movs	r3, #0
 800252c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002530:	2307      	movs	r3, #7
 8002532:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002536:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800253a:	4619      	mov	r1, r3
 800253c:	4809      	ldr	r0, [pc, #36]	; (8002564 <HAL_UART_MspInit+0x2b8>)
 800253e:	f001 fdf7 	bl	8004130 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2100      	movs	r1, #0
 8002546:	2027      	movs	r0, #39	; 0x27
 8002548:	f000 fc35 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800254c:	2027      	movs	r0, #39	; 0x27
 800254e:	f000 fc4c 	bl	8002dea <HAL_NVIC_EnableIRQ>
}
 8002552:	bf00      	nop
 8002554:	37f8      	adds	r7, #248	; 0xf8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40004c00 	.word	0x40004c00
 8002560:	58024400 	.word	0x58024400
 8002564:	58020c00 	.word	0x58020c00
 8002568:	40011000 	.word	0x40011000
 800256c:	58020400 	.word	0x58020400
 8002570:	40004400 	.word	0x40004400
 8002574:	40004800 	.word	0x40004800

08002578 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b0b8      	sub	sp, #224	; 0xe0
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002590:	f107 0310 	add.w	r3, r7, #16
 8002594:	22bc      	movs	r2, #188	; 0xbc
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f008 fadf 	bl	800ab5c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2f      	ldr	r2, [pc, #188]	; (8002660 <HAL_PCD_MspInit+0xe8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d156      	bne.n	8002656 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80025a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80025ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b6:	f107 0310 	add.w	r3, r7, #16
 80025ba:	4618      	mov	r0, r3
 80025bc:	f003 fea4 	bl	8006308 <HAL_RCCEx_PeriphCLKConfig>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80025c6:	f7ff fce5 	bl	8001f94 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80025ca:	f002 fed3 	bl	8005374 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ce:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_PCD_MspInit+0xec>)
 80025d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d4:	4a23      	ldr	r2, [pc, #140]	; (8002664 <HAL_PCD_MspInit+0xec>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025de:	4b21      	ldr	r3, [pc, #132]	; (8002664 <HAL_PCD_MspInit+0xec>)
 80025e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80025ec:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80025f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002606:	230a      	movs	r3, #10
 8002608:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002610:	4619      	mov	r1, r3
 8002612:	4815      	ldr	r0, [pc, #84]	; (8002668 <HAL_PCD_MspInit+0xf0>)
 8002614:	f001 fd8c 	bl	8004130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800261c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002620:	2300      	movs	r3, #0
 8002622:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002630:	4619      	mov	r1, r3
 8002632:	480d      	ldr	r0, [pc, #52]	; (8002668 <HAL_PCD_MspInit+0xf0>)
 8002634:	f001 fd7c 	bl	8004130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_PCD_MspInit+0xec>)
 800263a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800263e:	4a09      	ldr	r2, [pc, #36]	; (8002664 <HAL_PCD_MspInit+0xec>)
 8002640:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002644:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_PCD_MspInit+0xec>)
 800264a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800264e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002656:	bf00      	nop
 8002658:	37e0      	adds	r7, #224	; 0xe0
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40080000 	.word	0x40080000
 8002664:	58024400 	.word	0x58024400
 8002668:	58020000 	.word	0x58020000

0800266c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002670:	e7fe      	b.n	8002670 <NMI_Handler+0x4>

08002672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002676:	e7fe      	b.n	8002676 <HardFault_Handler+0x4>

08002678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800267c:	e7fe      	b.n	800267c <MemManage_Handler+0x4>

0800267e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002682:	e7fe      	b.n	8002682 <BusFault_Handler+0x4>

08002684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002688:	e7fe      	b.n	8002688 <UsageFault_Handler+0x4>

0800268a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026b8:	f000 fa1e 	bl	8002af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}

080026c0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <RTC_WKUP_IRQHandler+0x10>)
 80026c6:	f005 fb87 	bl	8007dd8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	240003f4 	.word	0x240003f4

080026d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026d8:	4802      	ldr	r0, [pc, #8]	; (80026e4 <USART1_IRQHandler+0x10>)
 80026da:	f005 fcdf 	bl	800809c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	240004a8 	.word	0x240004a8

080026e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026ec:	4802      	ldr	r0, [pc, #8]	; (80026f8 <USART2_IRQHandler+0x10>)
 80026ee:	f005 fcd5 	bl	800809c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	24000538 	.word	0x24000538

080026fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002700:	4802      	ldr	r0, [pc, #8]	; (800270c <USART3_IRQHandler+0x10>)
 8002702:	f005 fccb 	bl	800809c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	240005c8 	.word	0x240005c8

08002710 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002714:	4802      	ldr	r0, [pc, #8]	; (8002720 <UART4_IRQHandler+0x10>)
 8002716:	f005 fcc1 	bl	800809c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	24000418 	.word	0x24000418

08002724 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
	return 1;
 8002728:	2301      	movs	r3, #1
}
 800272a:	4618      	mov	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <_kill>:

int _kill(int pid, int sig)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800273e:	f008 f9e3 	bl	800ab08 <__errno>
 8002742:	4603      	mov	r3, r0
 8002744:	2216      	movs	r2, #22
 8002746:	601a      	str	r2, [r3, #0]
	return -1;
 8002748:	f04f 33ff 	mov.w	r3, #4294967295
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <_exit>:

void _exit (int status)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800275c:	f04f 31ff 	mov.w	r1, #4294967295
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff ffe7 	bl	8002734 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002766:	e7fe      	b.n	8002766 <_exit+0x12>

08002768 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	e00a      	b.n	8002790 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800277a:	f3af 8000 	nop.w
 800277e:	4601      	mov	r1, r0
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	60ba      	str	r2, [r7, #8]
 8002786:	b2ca      	uxtb	r2, r1
 8002788:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	3301      	adds	r3, #1
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	429a      	cmp	r2, r3
 8002796:	dbf0      	blt.n	800277a <_read+0x12>
	}

return len;
 8002798:	687b      	ldr	r3, [r7, #4]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	e009      	b.n	80027c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	60ba      	str	r2, [r7, #8]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3301      	adds	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	dbf1      	blt.n	80027b4 <_write+0x12>
	}
	return len;
 80027d0:	687b      	ldr	r3, [r7, #4]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <_close>:

int _close(int file)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
	return -1;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002802:	605a      	str	r2, [r3, #4]
	return 0;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <_isatty>:

int _isatty(int file)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
	return 1;
 800281a:	2301      	movs	r3, #1
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
	return 0;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800284c:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <_sbrk+0x5c>)
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <_sbrk+0x60>)
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002858:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <_sbrk+0x64>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d102      	bne.n	8002866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <_sbrk+0x64>)
 8002862:	4a12      	ldr	r2, [pc, #72]	; (80028ac <_sbrk+0x68>)
 8002864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <_sbrk+0x64>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	429a      	cmp	r2, r3
 8002872:	d207      	bcs.n	8002884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002874:	f008 f948 	bl	800ab08 <__errno>
 8002878:	4603      	mov	r3, r0
 800287a:	220c      	movs	r2, #12
 800287c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800287e:	f04f 33ff 	mov.w	r3, #4294967295
 8002882:	e009      	b.n	8002898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <_sbrk+0x64>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <_sbrk+0x64>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <_sbrk+0x64>)
 8002894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002896:	68fb      	ldr	r3, [r7, #12]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	24080000 	.word	0x24080000
 80028a4:	00000400 	.word	0x00000400
 80028a8:	24000cb4 	.word	0x24000cb4
 80028ac:	24000cd0 	.word	0x24000cd0

080028b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028b4:	4b37      	ldr	r3, [pc, #220]	; (8002994 <SystemInit+0xe4>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	4a36      	ldr	r2, [pc, #216]	; (8002994 <SystemInit+0xe4>)
 80028bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028c4:	4b34      	ldr	r3, [pc, #208]	; (8002998 <SystemInit+0xe8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	2b06      	cmp	r3, #6
 80028ce:	d807      	bhi.n	80028e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028d0:	4b31      	ldr	r3, [pc, #196]	; (8002998 <SystemInit+0xe8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 030f 	bic.w	r3, r3, #15
 80028d8:	4a2f      	ldr	r2, [pc, #188]	; (8002998 <SystemInit+0xe8>)
 80028da:	f043 0307 	orr.w	r3, r3, #7
 80028de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80028e0:	4b2e      	ldr	r3, [pc, #184]	; (800299c <SystemInit+0xec>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a2d      	ldr	r2, [pc, #180]	; (800299c <SystemInit+0xec>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028ec:	4b2b      	ldr	r3, [pc, #172]	; (800299c <SystemInit+0xec>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80028f2:	4b2a      	ldr	r3, [pc, #168]	; (800299c <SystemInit+0xec>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	4929      	ldr	r1, [pc, #164]	; (800299c <SystemInit+0xec>)
 80028f8:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <SystemInit+0xf0>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028fe:	4b26      	ldr	r3, [pc, #152]	; (8002998 <SystemInit+0xe8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d007      	beq.n	800291a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800290a:	4b23      	ldr	r3, [pc, #140]	; (8002998 <SystemInit+0xe8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 030f 	bic.w	r3, r3, #15
 8002912:	4a21      	ldr	r2, [pc, #132]	; (8002998 <SystemInit+0xe8>)
 8002914:	f043 0307 	orr.w	r3, r3, #7
 8002918:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800291a:	4b20      	ldr	r3, [pc, #128]	; (800299c <SystemInit+0xec>)
 800291c:	2200      	movs	r2, #0
 800291e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002920:	4b1e      	ldr	r3, [pc, #120]	; (800299c <SystemInit+0xec>)
 8002922:	2200      	movs	r2, #0
 8002924:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002926:	4b1d      	ldr	r3, [pc, #116]	; (800299c <SystemInit+0xec>)
 8002928:	2200      	movs	r2, #0
 800292a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <SystemInit+0xec>)
 800292e:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <SystemInit+0xf4>)
 8002930:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002932:	4b1a      	ldr	r3, [pc, #104]	; (800299c <SystemInit+0xec>)
 8002934:	4a1c      	ldr	r2, [pc, #112]	; (80029a8 <SystemInit+0xf8>)
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002938:	4b18      	ldr	r3, [pc, #96]	; (800299c <SystemInit+0xec>)
 800293a:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <SystemInit+0xfc>)
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800293e:	4b17      	ldr	r3, [pc, #92]	; (800299c <SystemInit+0xec>)
 8002940:	2200      	movs	r2, #0
 8002942:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002944:	4b15      	ldr	r3, [pc, #84]	; (800299c <SystemInit+0xec>)
 8002946:	4a19      	ldr	r2, [pc, #100]	; (80029ac <SystemInit+0xfc>)
 8002948:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800294a:	4b14      	ldr	r3, [pc, #80]	; (800299c <SystemInit+0xec>)
 800294c:	2200      	movs	r2, #0
 800294e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <SystemInit+0xec>)
 8002952:	4a16      	ldr	r2, [pc, #88]	; (80029ac <SystemInit+0xfc>)
 8002954:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002956:	4b11      	ldr	r3, [pc, #68]	; (800299c <SystemInit+0xec>)
 8002958:	2200      	movs	r2, #0
 800295a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <SystemInit+0xec>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0e      	ldr	r2, [pc, #56]	; (800299c <SystemInit+0xec>)
 8002962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002966:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <SystemInit+0xec>)
 800296a:	2200      	movs	r2, #0
 800296c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800296e:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <SystemInit+0x100>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <SystemInit+0x104>)
 8002974:	4013      	ands	r3, r2
 8002976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800297a:	d202      	bcs.n	8002982 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800297c:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <SystemInit+0x108>)
 800297e:	2201      	movs	r2, #1
 8002980:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <SystemInit+0x10c>)
 8002984:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002988:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000ed00 	.word	0xe000ed00
 8002998:	52002000 	.word	0x52002000
 800299c:	58024400 	.word	0x58024400
 80029a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80029a4:	02020200 	.word	0x02020200
 80029a8:	01ff0000 	.word	0x01ff0000
 80029ac:	01010280 	.word	0x01010280
 80029b0:	5c001000 	.word	0x5c001000
 80029b4:	ffff0000 	.word	0xffff0000
 80029b8:	51008108 	.word	0x51008108
 80029bc:	52004000 	.word	0x52004000

080029c0 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack      /* set stack pointer */
 80029c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029c4:	f7ff ff74 	bl	80028b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029c8:	480c      	ldr	r0, [pc, #48]	; (80029fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029ca:	490d      	ldr	r1, [pc, #52]	; (8002a00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029cc:	4a0d      	ldr	r2, [pc, #52]	; (8002a04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029d0:	e002      	b.n	80029d8 <LoopCopyDataInit>

080029d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029d6:	3304      	adds	r3, #4

080029d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029dc:	d3f9      	bcc.n	80029d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029de:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029e0:	4c0a      	ldr	r4, [pc, #40]	; (8002a0c <LoopFillZerobss+0x22>)
  movs r3, #0
 80029e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e4:	e001      	b.n	80029ea <LoopFillZerobss>

080029e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e8:	3204      	adds	r2, #4

080029ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029ec:	d3fb      	bcc.n	80029e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029ee:	f008 f891 	bl	800ab14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029f2:	f7fe fe77 	bl	80016e4 <main>
  bx  lr
 80029f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029f8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80029fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a00:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8002a04:	0800fb44 	.word	0x0800fb44
  ldr r2, =_sbss
 8002a08:	240002a4 	.word	0x240002a4
  ldr r4, =_ebss
 8002a0c:	24000ccc 	.word	0x24000ccc

08002a10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a10:	e7fe      	b.n	8002a10 <ADC3_IRQHandler>
	...

08002a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a1a:	2003      	movs	r0, #3
 8002a1c:	f000 f9c0 	bl	8002da0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a20:	f003 fa9c 	bl	8005f5c <HAL_RCC_GetSysClockFreq>
 8002a24:	4602      	mov	r2, r0
 8002a26:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <HAL_Init+0x68>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	4913      	ldr	r1, [pc, #76]	; (8002a80 <HAL_Init+0x6c>)
 8002a32:	5ccb      	ldrb	r3, [r1, r3]
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <HAL_Init+0x68>)
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	4a0e      	ldr	r2, [pc, #56]	; (8002a80 <HAL_Init+0x6c>)
 8002a48:	5cd3      	ldrb	r3, [r2, r3]
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
 8002a54:	4a0b      	ldr	r2, [pc, #44]	; (8002a84 <HAL_Init+0x70>)
 8002a56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a58:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <HAL_Init+0x74>)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f000 f814 	bl	8002a8c <HAL_InitTick>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e002      	b.n	8002a74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a6e:	f7ff fa97 	bl	8001fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	58024400 	.word	0x58024400
 8002a80:	0800f654 	.word	0x0800f654
 8002a84:	24000004 	.word	0x24000004
 8002a88:	24000000 	.word	0x24000000

08002a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a94:	4b15      	ldr	r3, [pc, #84]	; (8002aec <HAL_InitTick+0x60>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e021      	b.n	8002ae4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002aa0:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <HAL_InitTick+0x64>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_InitTick+0x60>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f9a5 	bl	8002e06 <HAL_SYSTICK_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00e      	b.n	8002ae4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b0f      	cmp	r3, #15
 8002aca:	d80a      	bhi.n	8002ae2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002acc:	2200      	movs	r2, #0
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	f000 f96f 	bl	8002db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad8:	4a06      	ldr	r2, [pc, #24]	; (8002af4 <HAL_InitTick+0x68>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e000      	b.n	8002ae4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	2400000c 	.word	0x2400000c
 8002af0:	24000000 	.word	0x24000000
 8002af4:	24000008 	.word	0x24000008

08002af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_IncTick+0x20>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_IncTick+0x24>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4413      	add	r3, r2
 8002b08:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <HAL_IncTick+0x24>)
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	2400000c 	.word	0x2400000c
 8002b1c:	24000cb8 	.word	0x24000cb8

08002b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return uwTick;
 8002b24:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <HAL_GetTick+0x14>)
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	24000cb8 	.word	0x24000cb8

08002b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b40:	f7ff ffee 	bl	8002b20 <HAL_GetTick>
 8002b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b50:	d005      	beq.n	8002b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <HAL_Delay+0x44>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b5e:	bf00      	nop
 8002b60:	f7ff ffde 	bl	8002b20 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d8f7      	bhi.n	8002b60 <HAL_Delay+0x28>
  {
  }
}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	2400000c 	.word	0x2400000c

08002b80 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_SuspendTick+0x1c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <HAL_SuspendTick+0x1c>)
 8002b8a:	f023 0302 	bic.w	r3, r3, #2
 8002b8e:	6013      	str	r3, [r2, #0]
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000e010 	.word	0xe000e010

08002ba0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_ResumeTick+0x1c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <HAL_ResumeTick+0x1c>)
 8002baa:	f043 0302 	orr.w	r3, r3, #2
 8002bae:	6013      	str	r3, [r2, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000e010 	.word	0xe000e010

08002bc0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_GetREVID+0x14>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	0c1b      	lsrs	r3, r3, #16
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	5c001000 	.word	0x5c001000

08002bd8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002be8:	4904      	ldr	r1, [pc, #16]	; (8002bfc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	58000400 	.word	0x58000400

08002c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <__NVIC_SetPriorityGrouping+0x40>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <__NVIC_SetPriorityGrouping+0x44>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2e:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <__NVIC_SetPriorityGrouping+0x40>)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	60d3      	str	r3, [r2, #12]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	e000ed00 	.word	0xe000ed00
 8002c44:	05fa0000 	.word	0x05fa0000

08002c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c4c:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <__NVIC_GetPriorityGrouping+0x18>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	f003 0307 	and.w	r3, r3, #7
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	db0b      	blt.n	8002c8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	f003 021f 	and.w	r2, r3, #31
 8002c7c:	4907      	ldr	r1, [pc, #28]	; (8002c9c <__NVIC_EnableIRQ+0x38>)
 8002c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	2001      	movs	r0, #1
 8002c86:	fa00 f202 	lsl.w	r2, r0, r2
 8002c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	e000e100 	.word	0xe000e100

08002ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	db0a      	blt.n	8002cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	490c      	ldr	r1, [pc, #48]	; (8002cec <__NVIC_SetPriority+0x4c>)
 8002cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cbe:	0112      	lsls	r2, r2, #4
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc8:	e00a      	b.n	8002ce0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4908      	ldr	r1, [pc, #32]	; (8002cf0 <__NVIC_SetPriority+0x50>)
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	3b04      	subs	r3, #4
 8002cd8:	0112      	lsls	r2, r2, #4
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	440b      	add	r3, r1
 8002cde:	761a      	strb	r2, [r3, #24]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000e100 	.word	0xe000e100
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	; 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f1c3 0307 	rsb	r3, r3, #7
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	bf28      	it	cs
 8002d12:	2304      	movcs	r3, #4
 8002d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	2b06      	cmp	r3, #6
 8002d1c:	d902      	bls.n	8002d24 <NVIC_EncodePriority+0x30>
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3b03      	subs	r3, #3
 8002d22:	e000      	b.n	8002d26 <NVIC_EncodePriority+0x32>
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	f04f 32ff 	mov.w	r2, #4294967295
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43da      	mvns	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	401a      	ands	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	fa01 f303 	lsl.w	r3, r1, r3
 8002d46:	43d9      	mvns	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	4313      	orrs	r3, r2
         );
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3724      	adds	r7, #36	; 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d6c:	d301      	bcc.n	8002d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00f      	b.n	8002d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <SysTick_Config+0x40>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d80:	f7ff ff8e 	bl	8002ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <SysTick_Config+0x40>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d8a:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <SysTick_Config+0x40>)
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	e000e010 	.word	0xe000e010

08002da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ff29 	bl	8002c00 <__NVIC_SetPriorityGrouping>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b086      	sub	sp, #24
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc4:	f7ff ff40 	bl	8002c48 <__NVIC_GetPriorityGrouping>
 8002dc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	6978      	ldr	r0, [r7, #20]
 8002dd0:	f7ff ff90 	bl	8002cf4 <NVIC_EncodePriority>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff5f 	bl	8002ca0 <__NVIC_SetPriority>
}
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	4603      	mov	r3, r0
 8002df2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ff33 	bl	8002c64 <__NVIC_EnableIRQ>
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff ffa4 	bl	8002d5c <SysTick_Config>
 8002e14:	4603      	mov	r3, r0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e28:	f7ff fe7a 	bl	8002b20 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e2dc      	b.n	80033f2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d008      	beq.n	8002e56 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2280      	movs	r2, #128	; 0x80
 8002e48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e2cd      	b.n	80033f2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a76      	ldr	r2, [pc, #472]	; (8003034 <HAL_DMA_Abort+0x214>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d04a      	beq.n	8002ef6 <HAL_DMA_Abort+0xd6>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a74      	ldr	r2, [pc, #464]	; (8003038 <HAL_DMA_Abort+0x218>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d045      	beq.n	8002ef6 <HAL_DMA_Abort+0xd6>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a73      	ldr	r2, [pc, #460]	; (800303c <HAL_DMA_Abort+0x21c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d040      	beq.n	8002ef6 <HAL_DMA_Abort+0xd6>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a71      	ldr	r2, [pc, #452]	; (8003040 <HAL_DMA_Abort+0x220>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d03b      	beq.n	8002ef6 <HAL_DMA_Abort+0xd6>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a70      	ldr	r2, [pc, #448]	; (8003044 <HAL_DMA_Abort+0x224>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d036      	beq.n	8002ef6 <HAL_DMA_Abort+0xd6>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a6e      	ldr	r2, [pc, #440]	; (8003048 <HAL_DMA_Abort+0x228>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d031      	beq.n	8002ef6 <HAL_DMA_Abort+0xd6>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a6d      	ldr	r2, [pc, #436]	; (800304c <HAL_DMA_Abort+0x22c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d02c      	beq.n	8002ef6 <HAL_DMA_Abort+0xd6>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a6b      	ldr	r2, [pc, #428]	; (8003050 <HAL_DMA_Abort+0x230>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d027      	beq.n	8002ef6 <HAL_DMA_Abort+0xd6>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a6a      	ldr	r2, [pc, #424]	; (8003054 <HAL_DMA_Abort+0x234>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d022      	beq.n	8002ef6 <HAL_DMA_Abort+0xd6>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a68      	ldr	r2, [pc, #416]	; (8003058 <HAL_DMA_Abort+0x238>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01d      	beq.n	8002ef6 <HAL_DMA_Abort+0xd6>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a67      	ldr	r2, [pc, #412]	; (800305c <HAL_DMA_Abort+0x23c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d018      	beq.n	8002ef6 <HAL_DMA_Abort+0xd6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a65      	ldr	r2, [pc, #404]	; (8003060 <HAL_DMA_Abort+0x240>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <HAL_DMA_Abort+0xd6>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a64      	ldr	r2, [pc, #400]	; (8003064 <HAL_DMA_Abort+0x244>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00e      	beq.n	8002ef6 <HAL_DMA_Abort+0xd6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a62      	ldr	r2, [pc, #392]	; (8003068 <HAL_DMA_Abort+0x248>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d009      	beq.n	8002ef6 <HAL_DMA_Abort+0xd6>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a61      	ldr	r2, [pc, #388]	; (800306c <HAL_DMA_Abort+0x24c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <HAL_DMA_Abort+0xd6>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a5f      	ldr	r2, [pc, #380]	; (8003070 <HAL_DMA_Abort+0x250>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d101      	bne.n	8002efa <HAL_DMA_Abort+0xda>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <HAL_DMA_Abort+0xdc>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d013      	beq.n	8002f28 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 021e 	bic.w	r2, r2, #30
 8002f0e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f1e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	e00a      	b.n	8002f3e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 020e 	bic.w	r2, r2, #14
 8002f36:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a3c      	ldr	r2, [pc, #240]	; (8003034 <HAL_DMA_Abort+0x214>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d072      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a3a      	ldr	r2, [pc, #232]	; (8003038 <HAL_DMA_Abort+0x218>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d06d      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a39      	ldr	r2, [pc, #228]	; (800303c <HAL_DMA_Abort+0x21c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d068      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a37      	ldr	r2, [pc, #220]	; (8003040 <HAL_DMA_Abort+0x220>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d063      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a36      	ldr	r2, [pc, #216]	; (8003044 <HAL_DMA_Abort+0x224>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d05e      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a34      	ldr	r2, [pc, #208]	; (8003048 <HAL_DMA_Abort+0x228>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d059      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a33      	ldr	r2, [pc, #204]	; (800304c <HAL_DMA_Abort+0x22c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d054      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a31      	ldr	r2, [pc, #196]	; (8003050 <HAL_DMA_Abort+0x230>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d04f      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a30      	ldr	r2, [pc, #192]	; (8003054 <HAL_DMA_Abort+0x234>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d04a      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a2e      	ldr	r2, [pc, #184]	; (8003058 <HAL_DMA_Abort+0x238>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d045      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a2d      	ldr	r2, [pc, #180]	; (800305c <HAL_DMA_Abort+0x23c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d040      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a2b      	ldr	r2, [pc, #172]	; (8003060 <HAL_DMA_Abort+0x240>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d03b      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a2a      	ldr	r2, [pc, #168]	; (8003064 <HAL_DMA_Abort+0x244>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d036      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a28      	ldr	r2, [pc, #160]	; (8003068 <HAL_DMA_Abort+0x248>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d031      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a27      	ldr	r2, [pc, #156]	; (800306c <HAL_DMA_Abort+0x24c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d02c      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a25      	ldr	r2, [pc, #148]	; (8003070 <HAL_DMA_Abort+0x250>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d027      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a24      	ldr	r2, [pc, #144]	; (8003074 <HAL_DMA_Abort+0x254>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d022      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a22      	ldr	r2, [pc, #136]	; (8003078 <HAL_DMA_Abort+0x258>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d01d      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a21      	ldr	r2, [pc, #132]	; (800307c <HAL_DMA_Abort+0x25c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d018      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1f      	ldr	r2, [pc, #124]	; (8003080 <HAL_DMA_Abort+0x260>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1e      	ldr	r2, [pc, #120]	; (8003084 <HAL_DMA_Abort+0x264>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00e      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1c      	ldr	r2, [pc, #112]	; (8003088 <HAL_DMA_Abort+0x268>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d009      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1b      	ldr	r2, [pc, #108]	; (800308c <HAL_DMA_Abort+0x26c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d004      	beq.n	800302e <HAL_DMA_Abort+0x20e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a19      	ldr	r2, [pc, #100]	; (8003090 <HAL_DMA_Abort+0x270>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d132      	bne.n	8003094 <HAL_DMA_Abort+0x274>
 800302e:	2301      	movs	r3, #1
 8003030:	e031      	b.n	8003096 <HAL_DMA_Abort+0x276>
 8003032:	bf00      	nop
 8003034:	40020010 	.word	0x40020010
 8003038:	40020028 	.word	0x40020028
 800303c:	40020040 	.word	0x40020040
 8003040:	40020058 	.word	0x40020058
 8003044:	40020070 	.word	0x40020070
 8003048:	40020088 	.word	0x40020088
 800304c:	400200a0 	.word	0x400200a0
 8003050:	400200b8 	.word	0x400200b8
 8003054:	40020410 	.word	0x40020410
 8003058:	40020428 	.word	0x40020428
 800305c:	40020440 	.word	0x40020440
 8003060:	40020458 	.word	0x40020458
 8003064:	40020470 	.word	0x40020470
 8003068:	40020488 	.word	0x40020488
 800306c:	400204a0 	.word	0x400204a0
 8003070:	400204b8 	.word	0x400204b8
 8003074:	58025408 	.word	0x58025408
 8003078:	5802541c 	.word	0x5802541c
 800307c:	58025430 	.word	0x58025430
 8003080:	58025444 	.word	0x58025444
 8003084:	58025458 	.word	0x58025458
 8003088:	5802546c 	.word	0x5802546c
 800308c:	58025480 	.word	0x58025480
 8003090:	58025494 	.word	0x58025494
 8003094:	2300      	movs	r3, #0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6d      	ldr	r2, [pc, #436]	; (8003264 <HAL_DMA_Abort+0x444>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d04a      	beq.n	800314a <HAL_DMA_Abort+0x32a>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a6b      	ldr	r2, [pc, #428]	; (8003268 <HAL_DMA_Abort+0x448>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d045      	beq.n	800314a <HAL_DMA_Abort+0x32a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a6a      	ldr	r2, [pc, #424]	; (800326c <HAL_DMA_Abort+0x44c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d040      	beq.n	800314a <HAL_DMA_Abort+0x32a>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a68      	ldr	r2, [pc, #416]	; (8003270 <HAL_DMA_Abort+0x450>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d03b      	beq.n	800314a <HAL_DMA_Abort+0x32a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a67      	ldr	r2, [pc, #412]	; (8003274 <HAL_DMA_Abort+0x454>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d036      	beq.n	800314a <HAL_DMA_Abort+0x32a>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a65      	ldr	r2, [pc, #404]	; (8003278 <HAL_DMA_Abort+0x458>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d031      	beq.n	800314a <HAL_DMA_Abort+0x32a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a64      	ldr	r2, [pc, #400]	; (800327c <HAL_DMA_Abort+0x45c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d02c      	beq.n	800314a <HAL_DMA_Abort+0x32a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a62      	ldr	r2, [pc, #392]	; (8003280 <HAL_DMA_Abort+0x460>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d027      	beq.n	800314a <HAL_DMA_Abort+0x32a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a61      	ldr	r2, [pc, #388]	; (8003284 <HAL_DMA_Abort+0x464>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <HAL_DMA_Abort+0x32a>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a5f      	ldr	r2, [pc, #380]	; (8003288 <HAL_DMA_Abort+0x468>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01d      	beq.n	800314a <HAL_DMA_Abort+0x32a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a5e      	ldr	r2, [pc, #376]	; (800328c <HAL_DMA_Abort+0x46c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d018      	beq.n	800314a <HAL_DMA_Abort+0x32a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a5c      	ldr	r2, [pc, #368]	; (8003290 <HAL_DMA_Abort+0x470>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_DMA_Abort+0x32a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a5b      	ldr	r2, [pc, #364]	; (8003294 <HAL_DMA_Abort+0x474>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00e      	beq.n	800314a <HAL_DMA_Abort+0x32a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a59      	ldr	r2, [pc, #356]	; (8003298 <HAL_DMA_Abort+0x478>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d009      	beq.n	800314a <HAL_DMA_Abort+0x32a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a58      	ldr	r2, [pc, #352]	; (800329c <HAL_DMA_Abort+0x47c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d004      	beq.n	800314a <HAL_DMA_Abort+0x32a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a56      	ldr	r2, [pc, #344]	; (80032a0 <HAL_DMA_Abort+0x480>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d108      	bne.n	800315c <HAL_DMA_Abort+0x33c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	e007      	b.n	800316c <HAL_DMA_Abort+0x34c>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0201 	bic.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800316c:	e013      	b.n	8003196 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800316e:	f7ff fcd7 	bl	8002b20 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b05      	cmp	r3, #5
 800317a:	d90c      	bls.n	8003196 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2203      	movs	r2, #3
 8003186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e12d      	b.n	80033f2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1e5      	bne.n	800316e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a2f      	ldr	r2, [pc, #188]	; (8003264 <HAL_DMA_Abort+0x444>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d04a      	beq.n	8003242 <HAL_DMA_Abort+0x422>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a2d      	ldr	r2, [pc, #180]	; (8003268 <HAL_DMA_Abort+0x448>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d045      	beq.n	8003242 <HAL_DMA_Abort+0x422>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a2c      	ldr	r2, [pc, #176]	; (800326c <HAL_DMA_Abort+0x44c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d040      	beq.n	8003242 <HAL_DMA_Abort+0x422>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2a      	ldr	r2, [pc, #168]	; (8003270 <HAL_DMA_Abort+0x450>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d03b      	beq.n	8003242 <HAL_DMA_Abort+0x422>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a29      	ldr	r2, [pc, #164]	; (8003274 <HAL_DMA_Abort+0x454>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d036      	beq.n	8003242 <HAL_DMA_Abort+0x422>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a27      	ldr	r2, [pc, #156]	; (8003278 <HAL_DMA_Abort+0x458>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d031      	beq.n	8003242 <HAL_DMA_Abort+0x422>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a26      	ldr	r2, [pc, #152]	; (800327c <HAL_DMA_Abort+0x45c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d02c      	beq.n	8003242 <HAL_DMA_Abort+0x422>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a24      	ldr	r2, [pc, #144]	; (8003280 <HAL_DMA_Abort+0x460>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d027      	beq.n	8003242 <HAL_DMA_Abort+0x422>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a23      	ldr	r2, [pc, #140]	; (8003284 <HAL_DMA_Abort+0x464>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d022      	beq.n	8003242 <HAL_DMA_Abort+0x422>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a21      	ldr	r2, [pc, #132]	; (8003288 <HAL_DMA_Abort+0x468>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d01d      	beq.n	8003242 <HAL_DMA_Abort+0x422>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a20      	ldr	r2, [pc, #128]	; (800328c <HAL_DMA_Abort+0x46c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d018      	beq.n	8003242 <HAL_DMA_Abort+0x422>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1e      	ldr	r2, [pc, #120]	; (8003290 <HAL_DMA_Abort+0x470>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_DMA_Abort+0x422>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <HAL_DMA_Abort+0x474>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00e      	beq.n	8003242 <HAL_DMA_Abort+0x422>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1b      	ldr	r2, [pc, #108]	; (8003298 <HAL_DMA_Abort+0x478>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_DMA_Abort+0x422>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a1a      	ldr	r2, [pc, #104]	; (800329c <HAL_DMA_Abort+0x47c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d004      	beq.n	8003242 <HAL_DMA_Abort+0x422>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a18      	ldr	r2, [pc, #96]	; (80032a0 <HAL_DMA_Abort+0x480>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d101      	bne.n	8003246 <HAL_DMA_Abort+0x426>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_DMA_Abort+0x428>
 8003246:	2300      	movs	r3, #0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d02b      	beq.n	80032a4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	223f      	movs	r2, #63	; 0x3f
 800325c:	409a      	lsls	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	e02a      	b.n	80032ba <HAL_DMA_Abort+0x49a>
 8003264:	40020010 	.word	0x40020010
 8003268:	40020028 	.word	0x40020028
 800326c:	40020040 	.word	0x40020040
 8003270:	40020058 	.word	0x40020058
 8003274:	40020070 	.word	0x40020070
 8003278:	40020088 	.word	0x40020088
 800327c:	400200a0 	.word	0x400200a0
 8003280:	400200b8 	.word	0x400200b8
 8003284:	40020410 	.word	0x40020410
 8003288:	40020428 	.word	0x40020428
 800328c:	40020440 	.word	0x40020440
 8003290:	40020458 	.word	0x40020458
 8003294:	40020470 	.word	0x40020470
 8003298:	40020488 	.word	0x40020488
 800329c:	400204a0 	.word	0x400204a0
 80032a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	2201      	movs	r2, #1
 80032b4:	409a      	lsls	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a4f      	ldr	r2, [pc, #316]	; (80033fc <HAL_DMA_Abort+0x5dc>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d072      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a4d      	ldr	r2, [pc, #308]	; (8003400 <HAL_DMA_Abort+0x5e0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d06d      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a4c      	ldr	r2, [pc, #304]	; (8003404 <HAL_DMA_Abort+0x5e4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d068      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a4a      	ldr	r2, [pc, #296]	; (8003408 <HAL_DMA_Abort+0x5e8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d063      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a49      	ldr	r2, [pc, #292]	; (800340c <HAL_DMA_Abort+0x5ec>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d05e      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a47      	ldr	r2, [pc, #284]	; (8003410 <HAL_DMA_Abort+0x5f0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d059      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a46      	ldr	r2, [pc, #280]	; (8003414 <HAL_DMA_Abort+0x5f4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d054      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a44      	ldr	r2, [pc, #272]	; (8003418 <HAL_DMA_Abort+0x5f8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d04f      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a43      	ldr	r2, [pc, #268]	; (800341c <HAL_DMA_Abort+0x5fc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d04a      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a41      	ldr	r2, [pc, #260]	; (8003420 <HAL_DMA_Abort+0x600>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d045      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a40      	ldr	r2, [pc, #256]	; (8003424 <HAL_DMA_Abort+0x604>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d040      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a3e      	ldr	r2, [pc, #248]	; (8003428 <HAL_DMA_Abort+0x608>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d03b      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a3d      	ldr	r2, [pc, #244]	; (800342c <HAL_DMA_Abort+0x60c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d036      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a3b      	ldr	r2, [pc, #236]	; (8003430 <HAL_DMA_Abort+0x610>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d031      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a3a      	ldr	r2, [pc, #232]	; (8003434 <HAL_DMA_Abort+0x614>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d02c      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a38      	ldr	r2, [pc, #224]	; (8003438 <HAL_DMA_Abort+0x618>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d027      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a37      	ldr	r2, [pc, #220]	; (800343c <HAL_DMA_Abort+0x61c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d022      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a35      	ldr	r2, [pc, #212]	; (8003440 <HAL_DMA_Abort+0x620>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d01d      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a34      	ldr	r2, [pc, #208]	; (8003444 <HAL_DMA_Abort+0x624>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d018      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a32      	ldr	r2, [pc, #200]	; (8003448 <HAL_DMA_Abort+0x628>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d013      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a31      	ldr	r2, [pc, #196]	; (800344c <HAL_DMA_Abort+0x62c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d00e      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a2f      	ldr	r2, [pc, #188]	; (8003450 <HAL_DMA_Abort+0x630>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d009      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a2e      	ldr	r2, [pc, #184]	; (8003454 <HAL_DMA_Abort+0x634>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d004      	beq.n	80033aa <HAL_DMA_Abort+0x58a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a2c      	ldr	r2, [pc, #176]	; (8003458 <HAL_DMA_Abort+0x638>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d101      	bne.n	80033ae <HAL_DMA_Abort+0x58e>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <HAL_DMA_Abort+0x590>
 80033ae:	2300      	movs	r3, #0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d015      	beq.n	80033e0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80033bc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00c      	beq.n	80033e0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033d4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80033de:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40020010 	.word	0x40020010
 8003400:	40020028 	.word	0x40020028
 8003404:	40020040 	.word	0x40020040
 8003408:	40020058 	.word	0x40020058
 800340c:	40020070 	.word	0x40020070
 8003410:	40020088 	.word	0x40020088
 8003414:	400200a0 	.word	0x400200a0
 8003418:	400200b8 	.word	0x400200b8
 800341c:	40020410 	.word	0x40020410
 8003420:	40020428 	.word	0x40020428
 8003424:	40020440 	.word	0x40020440
 8003428:	40020458 	.word	0x40020458
 800342c:	40020470 	.word	0x40020470
 8003430:	40020488 	.word	0x40020488
 8003434:	400204a0 	.word	0x400204a0
 8003438:	400204b8 	.word	0x400204b8
 800343c:	58025408 	.word	0x58025408
 8003440:	5802541c 	.word	0x5802541c
 8003444:	58025430 	.word	0x58025430
 8003448:	58025444 	.word	0x58025444
 800344c:	58025458 	.word	0x58025458
 8003450:	5802546c 	.word	0x5802546c
 8003454:	58025480 	.word	0x58025480
 8003458:	58025494 	.word	0x58025494

0800345c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e237      	b.n	80038de <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d004      	beq.n	8003484 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2280      	movs	r2, #128	; 0x80
 800347e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e22c      	b.n	80038de <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a5c      	ldr	r2, [pc, #368]	; (80035fc <HAL_DMA_Abort_IT+0x1a0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d04a      	beq.n	8003524 <HAL_DMA_Abort_IT+0xc8>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a5b      	ldr	r2, [pc, #364]	; (8003600 <HAL_DMA_Abort_IT+0x1a4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d045      	beq.n	8003524 <HAL_DMA_Abort_IT+0xc8>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a59      	ldr	r2, [pc, #356]	; (8003604 <HAL_DMA_Abort_IT+0x1a8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d040      	beq.n	8003524 <HAL_DMA_Abort_IT+0xc8>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a58      	ldr	r2, [pc, #352]	; (8003608 <HAL_DMA_Abort_IT+0x1ac>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d03b      	beq.n	8003524 <HAL_DMA_Abort_IT+0xc8>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a56      	ldr	r2, [pc, #344]	; (800360c <HAL_DMA_Abort_IT+0x1b0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d036      	beq.n	8003524 <HAL_DMA_Abort_IT+0xc8>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a55      	ldr	r2, [pc, #340]	; (8003610 <HAL_DMA_Abort_IT+0x1b4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d031      	beq.n	8003524 <HAL_DMA_Abort_IT+0xc8>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a53      	ldr	r2, [pc, #332]	; (8003614 <HAL_DMA_Abort_IT+0x1b8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d02c      	beq.n	8003524 <HAL_DMA_Abort_IT+0xc8>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a52      	ldr	r2, [pc, #328]	; (8003618 <HAL_DMA_Abort_IT+0x1bc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d027      	beq.n	8003524 <HAL_DMA_Abort_IT+0xc8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a50      	ldr	r2, [pc, #320]	; (800361c <HAL_DMA_Abort_IT+0x1c0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d022      	beq.n	8003524 <HAL_DMA_Abort_IT+0xc8>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a4f      	ldr	r2, [pc, #316]	; (8003620 <HAL_DMA_Abort_IT+0x1c4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d01d      	beq.n	8003524 <HAL_DMA_Abort_IT+0xc8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a4d      	ldr	r2, [pc, #308]	; (8003624 <HAL_DMA_Abort_IT+0x1c8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d018      	beq.n	8003524 <HAL_DMA_Abort_IT+0xc8>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a4c      	ldr	r2, [pc, #304]	; (8003628 <HAL_DMA_Abort_IT+0x1cc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d013      	beq.n	8003524 <HAL_DMA_Abort_IT+0xc8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a4a      	ldr	r2, [pc, #296]	; (800362c <HAL_DMA_Abort_IT+0x1d0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00e      	beq.n	8003524 <HAL_DMA_Abort_IT+0xc8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a49      	ldr	r2, [pc, #292]	; (8003630 <HAL_DMA_Abort_IT+0x1d4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d009      	beq.n	8003524 <HAL_DMA_Abort_IT+0xc8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a47      	ldr	r2, [pc, #284]	; (8003634 <HAL_DMA_Abort_IT+0x1d8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d004      	beq.n	8003524 <HAL_DMA_Abort_IT+0xc8>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a46      	ldr	r2, [pc, #280]	; (8003638 <HAL_DMA_Abort_IT+0x1dc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d101      	bne.n	8003528 <HAL_DMA_Abort_IT+0xcc>
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <HAL_DMA_Abort_IT+0xce>
 8003528:	2300      	movs	r3, #0
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 8086 	beq.w	800363c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2204      	movs	r2, #4
 8003534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a2f      	ldr	r2, [pc, #188]	; (80035fc <HAL_DMA_Abort_IT+0x1a0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d04a      	beq.n	80035d8 <HAL_DMA_Abort_IT+0x17c>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a2e      	ldr	r2, [pc, #184]	; (8003600 <HAL_DMA_Abort_IT+0x1a4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d045      	beq.n	80035d8 <HAL_DMA_Abort_IT+0x17c>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a2c      	ldr	r2, [pc, #176]	; (8003604 <HAL_DMA_Abort_IT+0x1a8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d040      	beq.n	80035d8 <HAL_DMA_Abort_IT+0x17c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a2b      	ldr	r2, [pc, #172]	; (8003608 <HAL_DMA_Abort_IT+0x1ac>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d03b      	beq.n	80035d8 <HAL_DMA_Abort_IT+0x17c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a29      	ldr	r2, [pc, #164]	; (800360c <HAL_DMA_Abort_IT+0x1b0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d036      	beq.n	80035d8 <HAL_DMA_Abort_IT+0x17c>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a28      	ldr	r2, [pc, #160]	; (8003610 <HAL_DMA_Abort_IT+0x1b4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d031      	beq.n	80035d8 <HAL_DMA_Abort_IT+0x17c>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a26      	ldr	r2, [pc, #152]	; (8003614 <HAL_DMA_Abort_IT+0x1b8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d02c      	beq.n	80035d8 <HAL_DMA_Abort_IT+0x17c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a25      	ldr	r2, [pc, #148]	; (8003618 <HAL_DMA_Abort_IT+0x1bc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d027      	beq.n	80035d8 <HAL_DMA_Abort_IT+0x17c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a23      	ldr	r2, [pc, #140]	; (800361c <HAL_DMA_Abort_IT+0x1c0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d022      	beq.n	80035d8 <HAL_DMA_Abort_IT+0x17c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a22      	ldr	r2, [pc, #136]	; (8003620 <HAL_DMA_Abort_IT+0x1c4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d01d      	beq.n	80035d8 <HAL_DMA_Abort_IT+0x17c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a20      	ldr	r2, [pc, #128]	; (8003624 <HAL_DMA_Abort_IT+0x1c8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d018      	beq.n	80035d8 <HAL_DMA_Abort_IT+0x17c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1f      	ldr	r2, [pc, #124]	; (8003628 <HAL_DMA_Abort_IT+0x1cc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d013      	beq.n	80035d8 <HAL_DMA_Abort_IT+0x17c>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1d      	ldr	r2, [pc, #116]	; (800362c <HAL_DMA_Abort_IT+0x1d0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00e      	beq.n	80035d8 <HAL_DMA_Abort_IT+0x17c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <HAL_DMA_Abort_IT+0x1d4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d009      	beq.n	80035d8 <HAL_DMA_Abort_IT+0x17c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <HAL_DMA_Abort_IT+0x1d8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <HAL_DMA_Abort_IT+0x17c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a19      	ldr	r2, [pc, #100]	; (8003638 <HAL_DMA_Abort_IT+0x1dc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d108      	bne.n	80035ea <HAL_DMA_Abort_IT+0x18e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	e178      	b.n	80038dc <HAL_DMA_Abort_IT+0x480>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0201 	bic.w	r2, r2, #1
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e16f      	b.n	80038dc <HAL_DMA_Abort_IT+0x480>
 80035fc:	40020010 	.word	0x40020010
 8003600:	40020028 	.word	0x40020028
 8003604:	40020040 	.word	0x40020040
 8003608:	40020058 	.word	0x40020058
 800360c:	40020070 	.word	0x40020070
 8003610:	40020088 	.word	0x40020088
 8003614:	400200a0 	.word	0x400200a0
 8003618:	400200b8 	.word	0x400200b8
 800361c:	40020410 	.word	0x40020410
 8003620:	40020428 	.word	0x40020428
 8003624:	40020440 	.word	0x40020440
 8003628:	40020458 	.word	0x40020458
 800362c:	40020470 	.word	0x40020470
 8003630:	40020488 	.word	0x40020488
 8003634:	400204a0 	.word	0x400204a0
 8003638:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 020e 	bic.w	r2, r2, #14
 800364a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a6c      	ldr	r2, [pc, #432]	; (8003804 <HAL_DMA_Abort_IT+0x3a8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d04a      	beq.n	80036ec <HAL_DMA_Abort_IT+0x290>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a6b      	ldr	r2, [pc, #428]	; (8003808 <HAL_DMA_Abort_IT+0x3ac>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d045      	beq.n	80036ec <HAL_DMA_Abort_IT+0x290>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a69      	ldr	r2, [pc, #420]	; (800380c <HAL_DMA_Abort_IT+0x3b0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d040      	beq.n	80036ec <HAL_DMA_Abort_IT+0x290>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a68      	ldr	r2, [pc, #416]	; (8003810 <HAL_DMA_Abort_IT+0x3b4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d03b      	beq.n	80036ec <HAL_DMA_Abort_IT+0x290>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a66      	ldr	r2, [pc, #408]	; (8003814 <HAL_DMA_Abort_IT+0x3b8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d036      	beq.n	80036ec <HAL_DMA_Abort_IT+0x290>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a65      	ldr	r2, [pc, #404]	; (8003818 <HAL_DMA_Abort_IT+0x3bc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d031      	beq.n	80036ec <HAL_DMA_Abort_IT+0x290>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a63      	ldr	r2, [pc, #396]	; (800381c <HAL_DMA_Abort_IT+0x3c0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d02c      	beq.n	80036ec <HAL_DMA_Abort_IT+0x290>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a62      	ldr	r2, [pc, #392]	; (8003820 <HAL_DMA_Abort_IT+0x3c4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d027      	beq.n	80036ec <HAL_DMA_Abort_IT+0x290>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a60      	ldr	r2, [pc, #384]	; (8003824 <HAL_DMA_Abort_IT+0x3c8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d022      	beq.n	80036ec <HAL_DMA_Abort_IT+0x290>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a5f      	ldr	r2, [pc, #380]	; (8003828 <HAL_DMA_Abort_IT+0x3cc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d01d      	beq.n	80036ec <HAL_DMA_Abort_IT+0x290>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a5d      	ldr	r2, [pc, #372]	; (800382c <HAL_DMA_Abort_IT+0x3d0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d018      	beq.n	80036ec <HAL_DMA_Abort_IT+0x290>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a5c      	ldr	r2, [pc, #368]	; (8003830 <HAL_DMA_Abort_IT+0x3d4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d013      	beq.n	80036ec <HAL_DMA_Abort_IT+0x290>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a5a      	ldr	r2, [pc, #360]	; (8003834 <HAL_DMA_Abort_IT+0x3d8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00e      	beq.n	80036ec <HAL_DMA_Abort_IT+0x290>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a59      	ldr	r2, [pc, #356]	; (8003838 <HAL_DMA_Abort_IT+0x3dc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d009      	beq.n	80036ec <HAL_DMA_Abort_IT+0x290>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a57      	ldr	r2, [pc, #348]	; (800383c <HAL_DMA_Abort_IT+0x3e0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d004      	beq.n	80036ec <HAL_DMA_Abort_IT+0x290>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a56      	ldr	r2, [pc, #344]	; (8003840 <HAL_DMA_Abort_IT+0x3e4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d108      	bne.n	80036fe <HAL_DMA_Abort_IT+0x2a2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	e007      	b.n	800370e <HAL_DMA_Abort_IT+0x2b2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0201 	bic.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a3c      	ldr	r2, [pc, #240]	; (8003804 <HAL_DMA_Abort_IT+0x3a8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d072      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a3a      	ldr	r2, [pc, #232]	; (8003808 <HAL_DMA_Abort_IT+0x3ac>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d06d      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a39      	ldr	r2, [pc, #228]	; (800380c <HAL_DMA_Abort_IT+0x3b0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d068      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a37      	ldr	r2, [pc, #220]	; (8003810 <HAL_DMA_Abort_IT+0x3b4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d063      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a36      	ldr	r2, [pc, #216]	; (8003814 <HAL_DMA_Abort_IT+0x3b8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d05e      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a34      	ldr	r2, [pc, #208]	; (8003818 <HAL_DMA_Abort_IT+0x3bc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d059      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a33      	ldr	r2, [pc, #204]	; (800381c <HAL_DMA_Abort_IT+0x3c0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d054      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a31      	ldr	r2, [pc, #196]	; (8003820 <HAL_DMA_Abort_IT+0x3c4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d04f      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a30      	ldr	r2, [pc, #192]	; (8003824 <HAL_DMA_Abort_IT+0x3c8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d04a      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a2e      	ldr	r2, [pc, #184]	; (8003828 <HAL_DMA_Abort_IT+0x3cc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d045      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a2d      	ldr	r2, [pc, #180]	; (800382c <HAL_DMA_Abort_IT+0x3d0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d040      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a2b      	ldr	r2, [pc, #172]	; (8003830 <HAL_DMA_Abort_IT+0x3d4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d03b      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a2a      	ldr	r2, [pc, #168]	; (8003834 <HAL_DMA_Abort_IT+0x3d8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d036      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a28      	ldr	r2, [pc, #160]	; (8003838 <HAL_DMA_Abort_IT+0x3dc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d031      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a27      	ldr	r2, [pc, #156]	; (800383c <HAL_DMA_Abort_IT+0x3e0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d02c      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a25      	ldr	r2, [pc, #148]	; (8003840 <HAL_DMA_Abort_IT+0x3e4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d027      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a24      	ldr	r2, [pc, #144]	; (8003844 <HAL_DMA_Abort_IT+0x3e8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d022      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a22      	ldr	r2, [pc, #136]	; (8003848 <HAL_DMA_Abort_IT+0x3ec>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01d      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a21      	ldr	r2, [pc, #132]	; (800384c <HAL_DMA_Abort_IT+0x3f0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d018      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1f      	ldr	r2, [pc, #124]	; (8003850 <HAL_DMA_Abort_IT+0x3f4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <HAL_DMA_Abort_IT+0x3f8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00e      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <HAL_DMA_Abort_IT+0x3fc>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d009      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1b      	ldr	r2, [pc, #108]	; (800385c <HAL_DMA_Abort_IT+0x400>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <HAL_DMA_Abort_IT+0x3a2>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a19      	ldr	r2, [pc, #100]	; (8003860 <HAL_DMA_Abort_IT+0x404>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d132      	bne.n	8003864 <HAL_DMA_Abort_IT+0x408>
 80037fe:	2301      	movs	r3, #1
 8003800:	e031      	b.n	8003866 <HAL_DMA_Abort_IT+0x40a>
 8003802:	bf00      	nop
 8003804:	40020010 	.word	0x40020010
 8003808:	40020028 	.word	0x40020028
 800380c:	40020040 	.word	0x40020040
 8003810:	40020058 	.word	0x40020058
 8003814:	40020070 	.word	0x40020070
 8003818:	40020088 	.word	0x40020088
 800381c:	400200a0 	.word	0x400200a0
 8003820:	400200b8 	.word	0x400200b8
 8003824:	40020410 	.word	0x40020410
 8003828:	40020428 	.word	0x40020428
 800382c:	40020440 	.word	0x40020440
 8003830:	40020458 	.word	0x40020458
 8003834:	40020470 	.word	0x40020470
 8003838:	40020488 	.word	0x40020488
 800383c:	400204a0 	.word	0x400204a0
 8003840:	400204b8 	.word	0x400204b8
 8003844:	58025408 	.word	0x58025408
 8003848:	5802541c 	.word	0x5802541c
 800384c:	58025430 	.word	0x58025430
 8003850:	58025444 	.word	0x58025444
 8003854:	58025458 	.word	0x58025458
 8003858:	5802546c 	.word	0x5802546c
 800385c:	58025480 	.word	0x58025480
 8003860:	58025494 	.word	0x58025494
 8003864:	2300      	movs	r3, #0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d028      	beq.n	80038bc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003878:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	2201      	movs	r2, #1
 800388a:	409a      	lsls	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003898:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00c      	beq.n	80038bc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop

080038e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e0cf      	b.n	8003a9a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003900:	2b00      	cmp	r3, #0
 8003902:	d106      	bne.n	8003912 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2223      	movs	r2, #35	; 0x23
 8003908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7fe fb61 	bl	8001fd4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003912:	4b64      	ldr	r3, [pc, #400]	; (8003aa4 <HAL_ETH_Init+0x1bc>)
 8003914:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003918:	4a62      	ldr	r2, [pc, #392]	; (8003aa4 <HAL_ETH_Init+0x1bc>)
 800391a:	f043 0302 	orr.w	r3, r3, #2
 800391e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003922:	4b60      	ldr	r3, [pc, #384]	; (8003aa4 <HAL_ETH_Init+0x1bc>)
 8003924:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	7a1b      	ldrb	r3, [r3, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d103      	bne.n	8003940 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003938:	2000      	movs	r0, #0
 800393a:	f7ff f94d 	bl	8002bd8 <HAL_SYSCFG_ETHInterfaceSelect>
 800393e:	e003      	b.n	8003948 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003940:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003944:	f7ff f948 	bl	8002bd8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003948:	4b57      	ldr	r3, [pc, #348]	; (8003aa8 <HAL_ETH_Init+0x1c0>)
 800394a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003962:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003964:	f7ff f8dc 	bl	8002b20 <HAL_GetTick>
 8003968:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800396a:	e011      	b.n	8003990 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800396c:	f7ff f8d8 	bl	8002b20 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800397a:	d909      	bls.n	8003990 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2204      	movs	r2, #4
 8003980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	22e0      	movs	r2, #224	; 0xe0
 8003988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e084      	b.n	8003a9a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e4      	bne.n	800396c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f886 	bl	8003ab4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80039a8:	f002 fc52 	bl	8006250 <HAL_RCC_GetHCLKFreq>
 80039ac:	4603      	mov	r3, r0
 80039ae:	4a3f      	ldr	r2, [pc, #252]	; (8003aac <HAL_ETH_Init+0x1c4>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	0c9a      	lsrs	r2, r3, #18
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3a01      	subs	r2, #1
 80039bc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fa71 	bl	8003ea8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80039d2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039e2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	22e0      	movs	r2, #224	; 0xe0
 80039fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e049      	b.n	8003a9a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a0e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003a12:	4b27      	ldr	r3, [pc, #156]	; (8003ab0 <HAL_ETH_Init+0x1c8>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6952      	ldr	r2, [r2, #20]
 8003a1a:	0051      	lsls	r1, r2, #1
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	430b      	orrs	r3, r1
 8003a22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a26:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fad9 	bl	8003fe2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fb1f 	bl	8004074 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	3305      	adds	r3, #5
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	021a      	lsls	r2, r3, #8
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	3304      	adds	r3, #4
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	3303      	adds	r3, #3
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	061a      	lsls	r2, r3, #24
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	3302      	adds	r3, #2
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	041b      	lsls	r3, r3, #16
 8003a68:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003a74:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003a82:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003a84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2210      	movs	r2, #16
 8003a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	58024400 	.word	0x58024400
 8003aa8:	58000400 	.word	0x58000400
 8003aac:	431bde83 	.word	0x431bde83
 8003ab0:	ffff8001 	.word	0xffff8001

08003ab4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003ace:	f002 fbbf 	bl	8006250 <HAL_RCC_GetHCLKFreq>
 8003ad2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4a1e      	ldr	r2, [pc, #120]	; (8003b50 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d908      	bls.n	8003aee <HAL_ETH_SetMDIOClockRange+0x3a>
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4a1d      	ldr	r2, [pc, #116]	; (8003b54 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d804      	bhi.n	8003aee <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	e027      	b.n	8003b3e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d908      	bls.n	8003b08 <HAL_ETH_SetMDIOClockRange+0x54>
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	4a17      	ldr	r2, [pc, #92]	; (8003b58 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d204      	bcs.n	8003b08 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	e01a      	b.n	8003b3e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4a13      	ldr	r2, [pc, #76]	; (8003b58 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d303      	bcc.n	8003b18 <HAL_ETH_SetMDIOClockRange+0x64>
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d911      	bls.n	8003b3c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4a10      	ldr	r2, [pc, #64]	; (8003b5c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d908      	bls.n	8003b32 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4a0f      	ldr	r2, [pc, #60]	; (8003b60 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d804      	bhi.n	8003b32 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e005      	b.n	8003b3e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	e000      	b.n	8003b3e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003b3c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003b48:	bf00      	nop
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	01312cff 	.word	0x01312cff
 8003b54:	02160ebf 	.word	0x02160ebf
 8003b58:	03938700 	.word	0x03938700
 8003b5c:	05f5e0ff 	.word	0x05f5e0ff
 8003b60:	08f0d17f 	.word	0x08f0d17f

08003b64 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003b76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	791b      	ldrb	r3, [r3, #4]
 8003b7c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003b7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	7b1b      	ldrb	r3, [r3, #12]
 8003b84:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003b86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	7b5b      	ldrb	r3, [r3, #13]
 8003b8c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003b8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	7b9b      	ldrb	r3, [r3, #14]
 8003b94:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003b96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	7bdb      	ldrb	r3, [r3, #15]
 8003b9c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003b9e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	7c12      	ldrb	r2, [r2, #16]
 8003ba4:	2a00      	cmp	r2, #0
 8003ba6:	d102      	bne.n	8003bae <ETH_SetMACConfig+0x4a>
 8003ba8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003bac:	e000      	b.n	8003bb0 <ETH_SetMACConfig+0x4c>
 8003bae:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003bb0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	7c52      	ldrb	r2, [r2, #17]
 8003bb6:	2a00      	cmp	r2, #0
 8003bb8:	d102      	bne.n	8003bc0 <ETH_SetMACConfig+0x5c>
 8003bba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bbe:	e000      	b.n	8003bc2 <ETH_SetMACConfig+0x5e>
 8003bc0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003bc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	7c9b      	ldrb	r3, [r3, #18]
 8003bc8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003bca:	431a      	orrs	r2, r3
               macconf->Speed |
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003bd0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003bd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	7f1b      	ldrb	r3, [r3, #28]
 8003bdc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003bde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	7f5b      	ldrb	r3, [r3, #29]
 8003be4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003be6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	7f92      	ldrb	r2, [r2, #30]
 8003bec:	2a00      	cmp	r2, #0
 8003bee:	d102      	bne.n	8003bf6 <ETH_SetMACConfig+0x92>
 8003bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bf4:	e000      	b.n	8003bf8 <ETH_SetMACConfig+0x94>
 8003bf6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003bf8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	7fdb      	ldrb	r3, [r3, #31]
 8003bfe:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003c00:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003c08:	2a00      	cmp	r2, #0
 8003c0a:	d102      	bne.n	8003c12 <ETH_SetMACConfig+0xae>
 8003c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c10:	e000      	b.n	8003c14 <ETH_SetMACConfig+0xb0>
 8003c12:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003c14:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003c1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c22:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003c24:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	4b56      	ldr	r3, [pc, #344]	; (8003d90 <ETH_SetMACConfig+0x22c>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	68f9      	ldr	r1, [r7, #12]
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c46:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c4e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003c50:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c58:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003c5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003c62:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003c64:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003c6c:	2a00      	cmp	r2, #0
 8003c6e:	d102      	bne.n	8003c76 <ETH_SetMACConfig+0x112>
 8003c70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c74:	e000      	b.n	8003c78 <ETH_SetMACConfig+0x114>
 8003c76:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003c78:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	4b42      	ldr	r3, [pc, #264]	; (8003d94 <ETH_SetMACConfig+0x230>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	68f9      	ldr	r1, [r7, #12]
 8003c92:	430b      	orrs	r3, r1
 8003c94:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c9c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	4b3a      	ldr	r3, [pc, #232]	; (8003d98 <ETH_SetMACConfig+0x234>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	68f9      	ldr	r1, [r7, #12]
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003cc0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003cc6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003cce:	2a00      	cmp	r2, #0
 8003cd0:	d101      	bne.n	8003cd6 <ETH_SetMACConfig+0x172>
 8003cd2:	2280      	movs	r2, #128	; 0x80
 8003cd4:	e000      	b.n	8003cd8 <ETH_SetMACConfig+0x174>
 8003cd6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003cd8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cde:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cea:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003cee:	4013      	ands	r3, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	68f9      	ldr	r1, [r7, #12]
 8003cf6:	430b      	orrs	r3, r1
 8003cf8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003d00:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003d08:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d16:	f023 0103 	bic.w	r1, r3, #3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003d2e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003d4a:	2a00      	cmp	r2, #0
 8003d4c:	d101      	bne.n	8003d52 <ETH_SetMACConfig+0x1ee>
 8003d4e:	2240      	movs	r2, #64	; 0x40
 8003d50:	e000      	b.n	8003d54 <ETH_SetMACConfig+0x1f0>
 8003d52:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003d54:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003d5c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003d5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003d66:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003d74:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003d84:	bf00      	nop
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	00048083 	.word	0x00048083
 8003d94:	c0f88000 	.word	0xc0f88000
 8003d98:	fffffef0 	.word	0xfffffef0

08003d9c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4b38      	ldr	r3, [pc, #224]	; (8003e94 <ETH_SetDMAConfig+0xf8>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	6811      	ldr	r1, [r2, #0]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003dc2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	791b      	ldrb	r3, [r3, #4]
 8003dc8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003dce:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	7b1b      	ldrb	r3, [r3, #12]
 8003dd4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	4b2c      	ldr	r3, [pc, #176]	; (8003e98 <ETH_SetDMAConfig+0xfc>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	68f9      	ldr	r1, [r7, #12]
 8003dee:	430b      	orrs	r3, r1
 8003df0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003df4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	7b5b      	ldrb	r3, [r3, #13]
 8003dfa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e0c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003e10:	4b22      	ldr	r3, [pc, #136]	; (8003e9c <ETH_SetDMAConfig+0x100>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	68f9      	ldr	r1, [r7, #12]
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e20:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	7d1b      	ldrb	r3, [r3, #20]
 8003e2c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003e2e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	7f5b      	ldrb	r3, [r3, #29]
 8003e34:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e42:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003e46:	4b16      	ldr	r3, [pc, #88]	; (8003ea0 <ETH_SetDMAConfig+0x104>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	68f9      	ldr	r1, [r7, #12]
 8003e50:	430b      	orrs	r3, r1
 8003e52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e56:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	7f1b      	ldrb	r3, [r3, #28]
 8003e5e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e70:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <ETH_SetDMAConfig+0x108>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	68f9      	ldr	r1, [r7, #12]
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e84:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	ffff87fd 	.word	0xffff87fd
 8003e98:	ffff2ffe 	.word	0xffff2ffe
 8003e9c:	fffec000 	.word	0xfffec000
 8003ea0:	ffc0efef 	.word	0xffc0efef
 8003ea4:	7fc0ffff 	.word	0x7fc0ffff

08003ea8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b0a4      	sub	sp, #144	; 0x90
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ee8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003eea:	2300      	movs	r3, #0
 8003eec:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003f00:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003f04:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003f06:	2300      	movs	r3, #0
 8003f08:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003f22:	2300      	movs	r3, #0
 8003f24:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003f26:	2300      	movs	r3, #0
 8003f28:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003f34:	2300      	movs	r3, #0
 8003f36:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003f40:	2320      	movs	r3, #32
 8003f42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003f46:	2301      	movs	r3, #1
 8003f48:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003f52:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003f58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f5c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003f64:	2302      	movs	r3, #2
 8003f66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003f82:	2300      	movs	r3, #0
 8003f84:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003f86:	2301      	movs	r3, #1
 8003f88:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f90:	4619      	mov	r1, r3
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff fde6 	bl	8003b64 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003fb2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003fb6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003fbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003fc0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003fc8:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003fcc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003fce:	f107 0308 	add.w	r3, r7, #8
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff fee1 	bl	8003d9c <ETH_SetDMAConfig>
}
 8003fda:	bf00      	nop
 8003fdc:	3790      	adds	r7, #144	; 0x90
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b085      	sub	sp, #20
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	e01d      	b.n	800402c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68d9      	ldr	r1, [r3, #12]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	4413      	add	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	440b      	add	r3, r1
 8004000:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2200      	movs	r2, #0
 800400c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2200      	movs	r2, #0
 8004012:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2200      	movs	r2, #0
 8004018:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	3206      	adds	r2, #6
 8004022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3301      	adds	r3, #1
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b03      	cmp	r3, #3
 8004030:	d9de      	bls.n	8003ff0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004040:	461a      	mov	r2, r3
 8004042:	2303      	movs	r3, #3
 8004044:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004054:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004064:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004068:	bf00      	nop
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	e023      	b.n	80040ca <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6919      	ldr	r1, [r3, #16]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4613      	mov	r3, r2
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	4413      	add	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	440b      	add	r3, r1
 8004092:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2200      	movs	r2, #0
 800409e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2200      	movs	r2, #0
 80040a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2200      	movs	r2, #0
 80040aa:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2200      	movs	r2, #0
 80040b0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2200      	movs	r2, #0
 80040b6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	3212      	adds	r2, #18
 80040c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3301      	adds	r3, #1
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d9d8      	bls.n	8004082 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f6:	461a      	mov	r2, r3
 80040f8:	2303      	movs	r3, #3
 80040fa:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800410a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004122:	bf00      	nop
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004130:	b480      	push	{r7}
 8004132:	b089      	sub	sp, #36	; 0x24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800413a:	2300      	movs	r3, #0
 800413c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800413e:	4b89      	ldr	r3, [pc, #548]	; (8004364 <HAL_GPIO_Init+0x234>)
 8004140:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004142:	e194      	b.n	800446e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	2101      	movs	r1, #1
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	fa01 f303 	lsl.w	r3, r1, r3
 8004150:	4013      	ands	r3, r2
 8004152:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8186 	beq.w	8004468 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	2b01      	cmp	r3, #1
 8004166:	d005      	beq.n	8004174 <HAL_GPIO_Init+0x44>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d130      	bne.n	80041d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	2203      	movs	r2, #3
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	43db      	mvns	r3, r3
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4013      	ands	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041aa:	2201      	movs	r2, #1
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	091b      	lsrs	r3, r3, #4
 80041c0:	f003 0201 	and.w	r2, r3, #1
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d017      	beq.n	8004212 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	2203      	movs	r2, #3
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	43db      	mvns	r3, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4013      	ands	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4313      	orrs	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d123      	bne.n	8004266 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	08da      	lsrs	r2, r3, #3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3208      	adds	r2, #8
 8004226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800422a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	220f      	movs	r2, #15
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4013      	ands	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4313      	orrs	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	08da      	lsrs	r2, r3, #3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3208      	adds	r2, #8
 8004260:	69b9      	ldr	r1, [r7, #24]
 8004262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	2203      	movs	r2, #3
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4013      	ands	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 0203 	and.w	r2, r3, #3
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4313      	orrs	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 80e0 	beq.w	8004468 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042a8:	4b2f      	ldr	r3, [pc, #188]	; (8004368 <HAL_GPIO_Init+0x238>)
 80042aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042ae:	4a2e      	ldr	r2, [pc, #184]	; (8004368 <HAL_GPIO_Init+0x238>)
 80042b0:	f043 0302 	orr.w	r3, r3, #2
 80042b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80042b8:	4b2b      	ldr	r3, [pc, #172]	; (8004368 <HAL_GPIO_Init+0x238>)
 80042ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042c6:	4a29      	ldr	r2, [pc, #164]	; (800436c <HAL_GPIO_Init+0x23c>)
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	089b      	lsrs	r3, r3, #2
 80042cc:	3302      	adds	r3, #2
 80042ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	220f      	movs	r2, #15
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	43db      	mvns	r3, r3
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	4013      	ands	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a20      	ldr	r2, [pc, #128]	; (8004370 <HAL_GPIO_Init+0x240>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d052      	beq.n	8004398 <HAL_GPIO_Init+0x268>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a1f      	ldr	r2, [pc, #124]	; (8004374 <HAL_GPIO_Init+0x244>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d031      	beq.n	800435e <HAL_GPIO_Init+0x22e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a1e      	ldr	r2, [pc, #120]	; (8004378 <HAL_GPIO_Init+0x248>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d02b      	beq.n	800435a <HAL_GPIO_Init+0x22a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a1d      	ldr	r2, [pc, #116]	; (800437c <HAL_GPIO_Init+0x24c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d025      	beq.n	8004356 <HAL_GPIO_Init+0x226>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a1c      	ldr	r2, [pc, #112]	; (8004380 <HAL_GPIO_Init+0x250>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d01f      	beq.n	8004352 <HAL_GPIO_Init+0x222>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a1b      	ldr	r2, [pc, #108]	; (8004384 <HAL_GPIO_Init+0x254>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d019      	beq.n	800434e <HAL_GPIO_Init+0x21e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a1a      	ldr	r2, [pc, #104]	; (8004388 <HAL_GPIO_Init+0x258>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d013      	beq.n	800434a <HAL_GPIO_Init+0x21a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a19      	ldr	r2, [pc, #100]	; (800438c <HAL_GPIO_Init+0x25c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00d      	beq.n	8004346 <HAL_GPIO_Init+0x216>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a18      	ldr	r2, [pc, #96]	; (8004390 <HAL_GPIO_Init+0x260>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d007      	beq.n	8004342 <HAL_GPIO_Init+0x212>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a17      	ldr	r2, [pc, #92]	; (8004394 <HAL_GPIO_Init+0x264>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d101      	bne.n	800433e <HAL_GPIO_Init+0x20e>
 800433a:	2309      	movs	r3, #9
 800433c:	e02d      	b.n	800439a <HAL_GPIO_Init+0x26a>
 800433e:	230a      	movs	r3, #10
 8004340:	e02b      	b.n	800439a <HAL_GPIO_Init+0x26a>
 8004342:	2308      	movs	r3, #8
 8004344:	e029      	b.n	800439a <HAL_GPIO_Init+0x26a>
 8004346:	2307      	movs	r3, #7
 8004348:	e027      	b.n	800439a <HAL_GPIO_Init+0x26a>
 800434a:	2306      	movs	r3, #6
 800434c:	e025      	b.n	800439a <HAL_GPIO_Init+0x26a>
 800434e:	2305      	movs	r3, #5
 8004350:	e023      	b.n	800439a <HAL_GPIO_Init+0x26a>
 8004352:	2304      	movs	r3, #4
 8004354:	e021      	b.n	800439a <HAL_GPIO_Init+0x26a>
 8004356:	2303      	movs	r3, #3
 8004358:	e01f      	b.n	800439a <HAL_GPIO_Init+0x26a>
 800435a:	2302      	movs	r3, #2
 800435c:	e01d      	b.n	800439a <HAL_GPIO_Init+0x26a>
 800435e:	2301      	movs	r3, #1
 8004360:	e01b      	b.n	800439a <HAL_GPIO_Init+0x26a>
 8004362:	bf00      	nop
 8004364:	58000080 	.word	0x58000080
 8004368:	58024400 	.word	0x58024400
 800436c:	58000400 	.word	0x58000400
 8004370:	58020000 	.word	0x58020000
 8004374:	58020400 	.word	0x58020400
 8004378:	58020800 	.word	0x58020800
 800437c:	58020c00 	.word	0x58020c00
 8004380:	58021000 	.word	0x58021000
 8004384:	58021400 	.word	0x58021400
 8004388:	58021800 	.word	0x58021800
 800438c:	58021c00 	.word	0x58021c00
 8004390:	58022000 	.word	0x58022000
 8004394:	58022400 	.word	0x58022400
 8004398:	2300      	movs	r3, #0
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	f002 0203 	and.w	r2, r2, #3
 80043a0:	0092      	lsls	r2, r2, #2
 80043a2:	4093      	lsls	r3, r2
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043aa:	4938      	ldr	r1, [pc, #224]	; (800448c <HAL_GPIO_Init+0x35c>)
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	089b      	lsrs	r3, r3, #2
 80043b0:	3302      	adds	r3, #2
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	43db      	mvns	r3, r3
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4013      	ands	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80043de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80043e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800440c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	43db      	mvns	r3, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	43db      	mvns	r3, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4013      	ands	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	3301      	adds	r3, #1
 800446c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	f47f ae63 	bne.w	8004144 <HAL_GPIO_Init+0x14>
  }
}
 800447e:	bf00      	nop
 8004480:	bf00      	nop
 8004482:	3724      	adds	r7, #36	; 0x24
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	58000400 	.word	0x58000400

08004490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	807b      	strh	r3, [r7, #2]
 800449c:	4613      	mov	r3, r2
 800449e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044a0:	787b      	ldrb	r3, [r7, #1]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044a6:	887a      	ldrh	r2, [r7, #2]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80044ac:	e003      	b.n	80044b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80044ae:	887b      	ldrh	r3, [r7, #2]
 80044b0:	041a      	lsls	r2, r3, #16
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	619a      	str	r2, [r3, #24]
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
	...

080044c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e07f      	b.n	80045d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fd fe40 	bl	8002170 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2224      	movs	r2, #36	; 0x24
 80044f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0201 	bic.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004514:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004524:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d107      	bne.n	800453e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800453a:	609a      	str	r2, [r3, #8]
 800453c:	e006      	b.n	800454c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800454a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b02      	cmp	r3, #2
 8004552:	d104      	bne.n	800455e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800455c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6859      	ldr	r1, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <HAL_I2C_Init+0x11c>)
 800456a:	430b      	orrs	r3, r1
 800456c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800457c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69d9      	ldr	r1, [r3, #28]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1a      	ldr	r2, [r3, #32]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	02008000 	.word	0x02008000

080045e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	607a      	str	r2, [r7, #4]
 80045ee:	461a      	mov	r2, r3
 80045f0:	460b      	mov	r3, r1
 80045f2:	817b      	strh	r3, [r7, #10]
 80045f4:	4613      	mov	r3, r2
 80045f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b20      	cmp	r3, #32
 8004602:	f040 80da 	bne.w	80047ba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_I2C_Master_Transmit+0x30>
 8004610:	2302      	movs	r3, #2
 8004612:	e0d3      	b.n	80047bc <HAL_I2C_Master_Transmit+0x1d8>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800461c:	f7fe fa80 	bl	8002b20 <HAL_GetTick>
 8004620:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	2319      	movs	r3, #25
 8004628:	2201      	movs	r2, #1
 800462a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f9e6 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e0be      	b.n	80047bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2221      	movs	r2, #33	; 0x21
 8004642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2210      	movs	r2, #16
 800464a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	893a      	ldrh	r2, [r7, #8]
 800465e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466a:	b29b      	uxth	r3, r3
 800466c:	2bff      	cmp	r3, #255	; 0xff
 800466e:	d90e      	bls.n	800468e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	22ff      	movs	r2, #255	; 0xff
 8004674:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467a:	b2da      	uxtb	r2, r3
 800467c:	8979      	ldrh	r1, [r7, #10]
 800467e:	4b51      	ldr	r3, [pc, #324]	; (80047c4 <HAL_I2C_Master_Transmit+0x1e0>)
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fbdc 	bl	8004e44 <I2C_TransferConfig>
 800468c:	e06c      	b.n	8004768 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469c:	b2da      	uxtb	r2, r3
 800469e:	8979      	ldrh	r1, [r7, #10]
 80046a0:	4b48      	ldr	r3, [pc, #288]	; (80047c4 <HAL_I2C_Master_Transmit+0x1e0>)
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fbcb 	bl	8004e44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80046ae:	e05b      	b.n	8004768 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	6a39      	ldr	r1, [r7, #32]
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f9e3 	bl	8004a80 <I2C_WaitOnTXISFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e07b      	b.n	80047bc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	781a      	ldrb	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d034      	beq.n	8004768 <HAL_I2C_Master_Transmit+0x184>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004702:	2b00      	cmp	r3, #0
 8004704:	d130      	bne.n	8004768 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	2200      	movs	r2, #0
 800470e:	2180      	movs	r1, #128	; 0x80
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 f975 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e04d      	b.n	80047bc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	2bff      	cmp	r3, #255	; 0xff
 8004728:	d90e      	bls.n	8004748 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	22ff      	movs	r2, #255	; 0xff
 800472e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004734:	b2da      	uxtb	r2, r3
 8004736:	8979      	ldrh	r1, [r7, #10]
 8004738:	2300      	movs	r3, #0
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fb7f 	bl	8004e44 <I2C_TransferConfig>
 8004746:	e00f      	b.n	8004768 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004756:	b2da      	uxtb	r2, r3
 8004758:	8979      	ldrh	r1, [r7, #10]
 800475a:	2300      	movs	r3, #0
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 fb6e 	bl	8004e44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d19e      	bne.n	80046b0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	6a39      	ldr	r1, [r7, #32]
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f9c2 	bl	8004b00 <I2C_WaitOnSTOPFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e01a      	b.n	80047bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2220      	movs	r2, #32
 800478c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6859      	ldr	r1, [r3, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_I2C_Master_Transmit+0x1e4>)
 800479a:	400b      	ands	r3, r1
 800479c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e000      	b.n	80047bc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80047ba:	2302      	movs	r3, #2
  }
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	80002000 	.word	0x80002000
 80047c8:	fe00e800 	.word	0xfe00e800

080047cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af02      	add	r7, sp, #8
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	607a      	str	r2, [r7, #4]
 80047d6:	461a      	mov	r2, r3
 80047d8:	460b      	mov	r3, r1
 80047da:	817b      	strh	r3, [r7, #10]
 80047dc:	4613      	mov	r3, r2
 80047de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	f040 80db 	bne.w	80049a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_I2C_Master_Receive+0x30>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e0d4      	b.n	80049a6 <HAL_I2C_Master_Receive+0x1da>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004804:	f7fe f98c 	bl	8002b20 <HAL_GetTick>
 8004808:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	2319      	movs	r3, #25
 8004810:	2201      	movs	r2, #1
 8004812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 f8f2 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e0bf      	b.n	80049a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2222      	movs	r2, #34	; 0x22
 800482a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2210      	movs	r2, #16
 8004832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	893a      	ldrh	r2, [r7, #8]
 8004846:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004852:	b29b      	uxth	r3, r3
 8004854:	2bff      	cmp	r3, #255	; 0xff
 8004856:	d90e      	bls.n	8004876 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	22ff      	movs	r2, #255	; 0xff
 800485c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004862:	b2da      	uxtb	r2, r3
 8004864:	8979      	ldrh	r1, [r7, #10]
 8004866:	4b52      	ldr	r3, [pc, #328]	; (80049b0 <HAL_I2C_Master_Receive+0x1e4>)
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 fae8 	bl	8004e44 <I2C_TransferConfig>
 8004874:	e06d      	b.n	8004952 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004884:	b2da      	uxtb	r2, r3
 8004886:	8979      	ldrh	r1, [r7, #10]
 8004888:	4b49      	ldr	r3, [pc, #292]	; (80049b0 <HAL_I2C_Master_Receive+0x1e4>)
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 fad7 	bl	8004e44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004896:	e05c      	b.n	8004952 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	6a39      	ldr	r1, [r7, #32]
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f96b 	bl	8004b78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e07c      	b.n	80049a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d034      	beq.n	8004952 <HAL_I2C_Master_Receive+0x186>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d130      	bne.n	8004952 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	2200      	movs	r2, #0
 80048f8:	2180      	movs	r1, #128	; 0x80
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 f880 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e04d      	b.n	80049a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	2bff      	cmp	r3, #255	; 0xff
 8004912:	d90e      	bls.n	8004932 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	22ff      	movs	r2, #255	; 0xff
 8004918:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491e:	b2da      	uxtb	r2, r3
 8004920:	8979      	ldrh	r1, [r7, #10]
 8004922:	2300      	movs	r3, #0
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 fa8a 	bl	8004e44 <I2C_TransferConfig>
 8004930:	e00f      	b.n	8004952 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004940:	b2da      	uxtb	r2, r3
 8004942:	8979      	ldrh	r1, [r7, #10]
 8004944:	2300      	movs	r3, #0
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 fa79 	bl	8004e44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d19d      	bne.n	8004898 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	6a39      	ldr	r1, [r7, #32]
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f8cd 	bl	8004b00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e01a      	b.n	80049a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2220      	movs	r2, #32
 8004976:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6859      	ldr	r1, [r3, #4]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <HAL_I2C_Master_Receive+0x1e8>)
 8004984:	400b      	ands	r3, r1
 8004986:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	e000      	b.n	80049a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80049a4:	2302      	movs	r3, #2
  }
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	80002400 	.word	0x80002400
 80049b4:	fe00e800 	.word	0xfe00e800

080049b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d103      	bne.n	80049d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2200      	movs	r2, #0
 80049d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d007      	beq.n	80049f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	619a      	str	r2, [r3, #24]
  }
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a10:	e022      	b.n	8004a58 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d01e      	beq.n	8004a58 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1a:	f7fe f881 	bl	8002b20 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d302      	bcc.n	8004a30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d113      	bne.n	8004a58 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a34:	f043 0220 	orr.w	r2, r3, #32
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e00f      	b.n	8004a78 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	4013      	ands	r3, r2
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	bf0c      	ite	eq
 8004a68:	2301      	moveq	r3, #1
 8004a6a:	2300      	movne	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d0cd      	beq.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a8c:	e02c      	b.n	8004ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f8ea 	bl	8004c6c <I2C_IsErrorOccurred>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e02a      	b.n	8004af8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa8:	d01e      	beq.n	8004ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aaa:	f7fe f839 	bl	8002b20 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d302      	bcc.n	8004ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d113      	bne.n	8004ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac4:	f043 0220 	orr.w	r2, r3, #32
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e007      	b.n	8004af8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d1cb      	bne.n	8004a8e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b0c:	e028      	b.n	8004b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 f8aa 	bl	8004c6c <I2C_IsErrorOccurred>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e026      	b.n	8004b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b22:	f7fd fffd 	bl	8002b20 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d302      	bcc.n	8004b38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d113      	bne.n	8004b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3c:	f043 0220 	orr.w	r2, r3, #32
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e007      	b.n	8004b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d1cf      	bne.n	8004b0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b84:	e064      	b.n	8004c50 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f86e 	bl	8004c6c <I2C_IsErrorOccurred>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e062      	b.n	8004c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d138      	bne.n	8004c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d105      	bne.n	8004bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e04e      	b.n	8004c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d107      	bne.n	8004be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2210      	movs	r2, #16
 8004bd6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2204      	movs	r2, #4
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44
 8004bde:	e002      	b.n	8004be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2220      	movs	r2, #32
 8004bec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6859      	ldr	r1, [r3, #4]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	4b1b      	ldr	r3, [pc, #108]	; (8004c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004bfa:	400b      	ands	r3, r1
 8004bfc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e022      	b.n	8004c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1a:	f7fd ff81 	bl	8002b20 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d302      	bcc.n	8004c30 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10f      	bne.n	8004c50 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c34:	f043 0220 	orr.w	r2, r3, #32
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e007      	b.n	8004c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d193      	bne.n	8004b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	fe00e800 	.word	0xfe00e800

08004c6c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08a      	sub	sp, #40	; 0x28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d075      	beq.n	8004d84 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2210      	movs	r2, #16
 8004c9e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ca0:	e056      	b.n	8004d50 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d052      	beq.n	8004d50 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004caa:	f7fd ff39 	bl	8002b20 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d302      	bcc.n	8004cc0 <I2C_IsErrorOccurred+0x54>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d147      	bne.n	8004d50 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cd2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce2:	d12e      	bne.n	8004d42 <I2C_IsErrorOccurred+0xd6>
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cea:	d02a      	beq.n	8004d42 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004cec:	7cfb      	ldrb	r3, [r7, #19]
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d027      	beq.n	8004d42 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d00:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d02:	f7fd ff0d 	bl	8002b20 <HAL_GetTick>
 8004d06:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d08:	e01b      	b.n	8004d42 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d0a:	f7fd ff09 	bl	8002b20 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b19      	cmp	r3, #25
 8004d16:	d914      	bls.n	8004d42 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1c:	f043 0220 	orr.w	r2, r3, #32
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d1dc      	bne.n	8004d0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	d003      	beq.n	8004d66 <I2C_IsErrorOccurred+0xfa>
 8004d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d09d      	beq.n	8004ca2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d103      	bne.n	8004d76 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2220      	movs	r2, #32
 8004d74:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	f043 0304 	orr.w	r3, r3, #4
 8004d7c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00b      	beq.n	8004dae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004da6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00b      	beq.n	8004dd0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	f043 0308 	orr.w	r3, r3, #8
 8004dbe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00b      	beq.n	8004df2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	f043 0302 	orr.w	r3, r3, #2
 8004de0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004df2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01c      	beq.n	8004e34 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f7ff fddc 	bl	80049b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6859      	ldr	r1, [r3, #4]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <I2C_IsErrorOccurred+0x1d4>)
 8004e0c:	400b      	ands	r3, r1
 8004e0e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3728      	adds	r7, #40	; 0x28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	fe00e800 	.word	0xfe00e800

08004e44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	607b      	str	r3, [r7, #4]
 8004e4e:	460b      	mov	r3, r1
 8004e50:	817b      	strh	r3, [r7, #10]
 8004e52:	4613      	mov	r3, r2
 8004e54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e56:	897b      	ldrh	r3, [r7, #10]
 8004e58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e5c:	7a7b      	ldrb	r3, [r7, #9]
 8004e5e:	041b      	lsls	r3, r3, #16
 8004e60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e64:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e72:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	0d5b      	lsrs	r3, r3, #21
 8004e7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004e82:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <I2C_TransferConfig+0x60>)
 8004e84:	430b      	orrs	r3, r1
 8004e86:	43db      	mvns	r3, r3
 8004e88:	ea02 0103 	and.w	r1, r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	03ff63ff 	.word	0x03ff63ff

08004ea8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b20      	cmp	r3, #32
 8004ebc:	d138      	bne.n	8004f30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e032      	b.n	8004f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2224      	movs	r2, #36	; 0x24
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0201 	bic.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004efa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6819      	ldr	r1, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e000      	b.n	8004f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f30:	2302      	movs	r3, #2
  }
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d139      	bne.n	8004fc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e033      	b.n	8004fca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2224      	movs	r2, #36	; 0x24
 8004f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0201 	bic.w	r2, r2, #1
 8004f80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	021b      	lsls	r3, r3, #8
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0201 	orr.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	e000      	b.n	8004fca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004fc8:	2302      	movs	r3, #2
  }
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd8:	b08f      	sub	sp, #60	; 0x3c
 8004fda:	af0a      	add	r7, sp, #40	; 0x28
 8004fdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e116      	b.n	8005216 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fd fab8 	bl	8002578 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2203      	movs	r2, #3
 800500c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d102      	bne.n	8005022 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f005 fad2 	bl	800a5d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	603b      	str	r3, [r7, #0]
 8005032:	687e      	ldr	r6, [r7, #4]
 8005034:	466d      	mov	r5, sp
 8005036:	f106 0410 	add.w	r4, r6, #16
 800503a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800503c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800503e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005042:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005046:	e885 0003 	stmia.w	r5, {r0, r1}
 800504a:	1d33      	adds	r3, r6, #4
 800504c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800504e:	6838      	ldr	r0, [r7, #0]
 8005050:	f005 fa50 	bl	800a4f4 <USB_CoreInit>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2202      	movs	r2, #2
 800505e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e0d7      	b.n	8005216 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2100      	movs	r1, #0
 800506c:	4618      	mov	r0, r3
 800506e:	f005 fac0 	bl	800a5f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005072:	2300      	movs	r3, #0
 8005074:	73fb      	strb	r3, [r7, #15]
 8005076:	e04a      	b.n	800510e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005078:	7bfa      	ldrb	r2, [r7, #15]
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	333d      	adds	r3, #61	; 0x3d
 8005088:	2201      	movs	r2, #1
 800508a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800508c:	7bfa      	ldrb	r2, [r7, #15]
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	333c      	adds	r3, #60	; 0x3c
 800509c:	7bfa      	ldrb	r2, [r7, #15]
 800509e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050a0:	7bfa      	ldrb	r2, [r7, #15]
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	b298      	uxth	r0, r3
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	4613      	mov	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	3344      	adds	r3, #68	; 0x44
 80050b4:	4602      	mov	r2, r0
 80050b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050b8:	7bfa      	ldrb	r2, [r7, #15]
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	4613      	mov	r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	3340      	adds	r3, #64	; 0x40
 80050c8:	2200      	movs	r2, #0
 80050ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050cc:	7bfa      	ldrb	r2, [r7, #15]
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	3348      	adds	r3, #72	; 0x48
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050e0:	7bfa      	ldrb	r2, [r7, #15]
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	334c      	adds	r3, #76	; 0x4c
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80050f4:	7bfa      	ldrb	r2, [r7, #15]
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	4613      	mov	r3, r2
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	440b      	add	r3, r1
 8005102:	3354      	adds	r3, #84	; 0x54
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	3301      	adds	r3, #1
 800510c:	73fb      	strb	r3, [r7, #15]
 800510e:	7bfa      	ldrb	r2, [r7, #15]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	429a      	cmp	r2, r3
 8005116:	d3af      	bcc.n	8005078 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005118:	2300      	movs	r3, #0
 800511a:	73fb      	strb	r3, [r7, #15]
 800511c:	e044      	b.n	80051a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800511e:	7bfa      	ldrb	r2, [r7, #15]
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	440b      	add	r3, r1
 800512c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005130:	2200      	movs	r2, #0
 8005132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005134:	7bfa      	ldrb	r2, [r7, #15]
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	4613      	mov	r3, r2
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	440b      	add	r3, r1
 8005142:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005146:	7bfa      	ldrb	r2, [r7, #15]
 8005148:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800514a:	7bfa      	ldrb	r2, [r7, #15]
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	4613      	mov	r3, r2
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	4413      	add	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	440b      	add	r3, r1
 8005158:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800515c:	2200      	movs	r2, #0
 800515e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005160:	7bfa      	ldrb	r2, [r7, #15]
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005176:	7bfa      	ldrb	r2, [r7, #15]
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	4613      	mov	r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	4413      	add	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	440b      	add	r3, r1
 8005184:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800518c:	7bfa      	ldrb	r2, [r7, #15]
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	4613      	mov	r3, r2
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	4413      	add	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
 80051a4:	3301      	adds	r3, #1
 80051a6:	73fb      	strb	r3, [r7, #15]
 80051a8:	7bfa      	ldrb	r2, [r7, #15]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d3b5      	bcc.n	800511e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	603b      	str	r3, [r7, #0]
 80051b8:	687e      	ldr	r6, [r7, #4]
 80051ba:	466d      	mov	r5, sp
 80051bc:	f106 0410 	add.w	r4, r6, #16
 80051c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80051d0:	1d33      	adds	r3, r6, #4
 80051d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051d4:	6838      	ldr	r0, [r7, #0]
 80051d6:	f005 fa59 	bl	800a68c <USB_DevInit>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d005      	beq.n	80051ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e014      	b.n	8005216 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	2b01      	cmp	r3, #1
 8005202:	d102      	bne.n	800520a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f80b 	bl	8005220 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f005 fc17 	bl	800aa42 <USB_DevDisconnect>

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005220 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800524e:	4b05      	ldr	r3, [pc, #20]	; (8005264 <HAL_PCDEx_ActivateLPM+0x44>)
 8005250:	4313      	orrs	r3, r2
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	10000003 	.word	0x10000003

08005268 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800526c:	4b05      	ldr	r3, [pc, #20]	; (8005284 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a04      	ldr	r2, [pc, #16]	; (8005284 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005276:	6013      	str	r3, [r2, #0]
}
 8005278:	bf00      	nop
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	58024800 	.word	0x58024800

08005288 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8005294:	4b18      	ldr	r3, [pc, #96]	; (80052f8 <HAL_PWR_EnterSTOPMode+0x70>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f023 0201 	bic.w	r2, r3, #1
 800529c:	4916      	ldr	r1, [pc, #88]	; (80052f8 <HAL_PWR_EnterSTOPMode+0x70>)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 80052a4:	4b14      	ldr	r3, [pc, #80]	; (80052f8 <HAL_PWR_EnterSTOPMode+0x70>)
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	4a13      	ldr	r2, [pc, #76]	; (80052f8 <HAL_PWR_EnterSTOPMode+0x70>)
 80052aa:	f023 0305 	bic.w	r3, r3, #5
 80052ae:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 80052b0:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <HAL_PWR_EnterSTOPMode+0x70>)
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	4a10      	ldr	r2, [pc, #64]	; (80052f8 <HAL_PWR_EnterSTOPMode+0x70>)
 80052b6:	f023 0302 	bic.w	r3, r3, #2
 80052ba:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80052bc:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <HAL_PWR_EnterSTOPMode+0x74>)
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	4a0e      	ldr	r2, [pc, #56]	; (80052fc <HAL_PWR_EnterSTOPMode+0x74>)
 80052c2:	f043 0304 	orr.w	r3, r3, #4
 80052c6:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80052c8:	f3bf 8f4f 	dsb	sy
}
 80052cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80052ce:	f3bf 8f6f 	isb	sy
}
 80052d2:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80052d4:	78fb      	ldrb	r3, [r7, #3]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 80052da:	bf30      	wfi
 80052dc:	e000      	b.n	80052e0 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 80052de:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80052e0:	4b06      	ldr	r3, [pc, #24]	; (80052fc <HAL_PWR_EnterSTOPMode+0x74>)
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	4a05      	ldr	r2, [pc, #20]	; (80052fc <HAL_PWR_EnterSTOPMode+0x74>)
 80052e6:	f023 0304 	bic.w	r3, r3, #4
 80052ea:	6113      	str	r3, [r2, #16]
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	58024800 	.word	0x58024800
 80052fc:	e000ed00 	.word	0xe000ed00

08005300 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005308:	4b19      	ldr	r3, [pc, #100]	; (8005370 <HAL_PWREx_ConfigSupply+0x70>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b04      	cmp	r3, #4
 8005312:	d00a      	beq.n	800532a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005314:	4b16      	ldr	r3, [pc, #88]	; (8005370 <HAL_PWREx_ConfigSupply+0x70>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	429a      	cmp	r2, r3
 8005320:	d001      	beq.n	8005326 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e01f      	b.n	8005366 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	e01d      	b.n	8005366 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800532a:	4b11      	ldr	r3, [pc, #68]	; (8005370 <HAL_PWREx_ConfigSupply+0x70>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f023 0207 	bic.w	r2, r3, #7
 8005332:	490f      	ldr	r1, [pc, #60]	; (8005370 <HAL_PWREx_ConfigSupply+0x70>)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4313      	orrs	r3, r2
 8005338:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800533a:	f7fd fbf1 	bl	8002b20 <HAL_GetTick>
 800533e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005340:	e009      	b.n	8005356 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005342:	f7fd fbed 	bl	8002b20 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005350:	d901      	bls.n	8005356 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e007      	b.n	8005366 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <HAL_PWREx_ConfigSupply+0x70>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800535e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005362:	d1ee      	bne.n	8005342 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	58024800 	.word	0x58024800

08005374 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4a04      	ldr	r2, [pc, #16]	; (8005390 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800537e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005382:	60d3      	str	r3, [r2, #12]
}
 8005384:	bf00      	nop
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	58024800 	.word	0x58024800

08005394 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08c      	sub	sp, #48	; 0x30
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d102      	bne.n	80053a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	f000 bc1d 	b.w	8005be2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8087 	beq.w	80054c4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053b6:	4b99      	ldr	r3, [pc, #612]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053c0:	4b96      	ldr	r3, [pc, #600]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80053c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80053c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c8:	2b10      	cmp	r3, #16
 80053ca:	d007      	beq.n	80053dc <HAL_RCC_OscConfig+0x48>
 80053cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ce:	2b18      	cmp	r3, #24
 80053d0:	d110      	bne.n	80053f4 <HAL_RCC_OscConfig+0x60>
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	f003 0303 	and.w	r3, r3, #3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d10b      	bne.n	80053f4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053dc:	4b8f      	ldr	r3, [pc, #572]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d06c      	beq.n	80054c2 <HAL_RCC_OscConfig+0x12e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d168      	bne.n	80054c2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e3f6      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fc:	d106      	bne.n	800540c <HAL_RCC_OscConfig+0x78>
 80053fe:	4b87      	ldr	r3, [pc, #540]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a86      	ldr	r2, [pc, #536]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	e02e      	b.n	800546a <HAL_RCC_OscConfig+0xd6>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10c      	bne.n	800542e <HAL_RCC_OscConfig+0x9a>
 8005414:	4b81      	ldr	r3, [pc, #516]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a80      	ldr	r2, [pc, #512]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800541a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	4b7e      	ldr	r3, [pc, #504]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a7d      	ldr	r2, [pc, #500]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	e01d      	b.n	800546a <HAL_RCC_OscConfig+0xd6>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005436:	d10c      	bne.n	8005452 <HAL_RCC_OscConfig+0xbe>
 8005438:	4b78      	ldr	r3, [pc, #480]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a77      	ldr	r2, [pc, #476]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800543e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	4b75      	ldr	r3, [pc, #468]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a74      	ldr	r2, [pc, #464]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800544a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544e:	6013      	str	r3, [r2, #0]
 8005450:	e00b      	b.n	800546a <HAL_RCC_OscConfig+0xd6>
 8005452:	4b72      	ldr	r3, [pc, #456]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a71      	ldr	r2, [pc, #452]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	4b6f      	ldr	r3, [pc, #444]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a6e      	ldr	r2, [pc, #440]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005468:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d013      	beq.n	800549a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005472:	f7fd fb55 	bl	8002b20 <HAL_GetTick>
 8005476:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005478:	e008      	b.n	800548c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800547a:	f7fd fb51 	bl	8002b20 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b64      	cmp	r3, #100	; 0x64
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e3aa      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800548c:	4b63      	ldr	r3, [pc, #396]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0f0      	beq.n	800547a <HAL_RCC_OscConfig+0xe6>
 8005498:	e014      	b.n	80054c4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549a:	f7fd fb41 	bl	8002b20 <HAL_GetTick>
 800549e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a2:	f7fd fb3d 	bl	8002b20 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b64      	cmp	r3, #100	; 0x64
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e396      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054b4:	4b59      	ldr	r3, [pc, #356]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1f0      	bne.n	80054a2 <HAL_RCC_OscConfig+0x10e>
 80054c0:	e000      	b.n	80054c4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80cb 	beq.w	8005668 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054d2:	4b52      	ldr	r3, [pc, #328]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054da:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054dc:	4b4f      	ldr	r3, [pc, #316]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d007      	beq.n	80054f8 <HAL_RCC_OscConfig+0x164>
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	2b18      	cmp	r3, #24
 80054ec:	d156      	bne.n	800559c <HAL_RCC_OscConfig+0x208>
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	f003 0303 	and.w	r3, r3, #3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d151      	bne.n	800559c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054f8:	4b48      	ldr	r3, [pc, #288]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <HAL_RCC_OscConfig+0x17c>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e368      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005510:	4b42      	ldr	r3, [pc, #264]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f023 0219 	bic.w	r2, r3, #25
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	493f      	ldr	r1, [pc, #252]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800551e:	4313      	orrs	r3, r2
 8005520:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005522:	f7fd fafd 	bl	8002b20 <HAL_GetTick>
 8005526:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800552a:	f7fd faf9 	bl	8002b20 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e352      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800553c:	4b37      	ldr	r3, [pc, #220]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f0      	beq.n	800552a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005548:	f7fd fb3a 	bl	8002bc0 <HAL_GetREVID>
 800554c:	4603      	mov	r3, r0
 800554e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005552:	4293      	cmp	r3, r2
 8005554:	d817      	bhi.n	8005586 <HAL_RCC_OscConfig+0x1f2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d108      	bne.n	8005570 <HAL_RCC_OscConfig+0x1dc>
 800555e:	4b2f      	ldr	r3, [pc, #188]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005566:	4a2d      	ldr	r2, [pc, #180]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800556e:	e07b      	b.n	8005668 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005570:	4b2a      	ldr	r3, [pc, #168]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	031b      	lsls	r3, r3, #12
 800557e:	4927      	ldr	r1, [pc, #156]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005580:	4313      	orrs	r3, r2
 8005582:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005584:	e070      	b.n	8005668 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005586:	4b25      	ldr	r3, [pc, #148]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	061b      	lsls	r3, r3, #24
 8005594:	4921      	ldr	r1, [pc, #132]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005596:	4313      	orrs	r3, r2
 8005598:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800559a:	e065      	b.n	8005668 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d048      	beq.n	8005636 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055a4:	4b1d      	ldr	r3, [pc, #116]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f023 0219 	bic.w	r2, r3, #25
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	491a      	ldr	r1, [pc, #104]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b6:	f7fd fab3 	bl	8002b20 <HAL_GetTick>
 80055ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055bc:	e008      	b.n	80055d0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055be:	f7fd faaf 	bl	8002b20 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e308      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055d0:	4b12      	ldr	r3, [pc, #72]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0f0      	beq.n	80055be <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055dc:	f7fd faf0 	bl	8002bc0 <HAL_GetREVID>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d81a      	bhi.n	8005620 <HAL_RCC_OscConfig+0x28c>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2b40      	cmp	r3, #64	; 0x40
 80055f0:	d108      	bne.n	8005604 <HAL_RCC_OscConfig+0x270>
 80055f2:	4b0a      	ldr	r3, [pc, #40]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80055fa:	4a08      	ldr	r2, [pc, #32]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80055fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005600:	6053      	str	r3, [r2, #4]
 8005602:	e031      	b.n	8005668 <HAL_RCC_OscConfig+0x2d4>
 8005604:	4b05      	ldr	r3, [pc, #20]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	031b      	lsls	r3, r3, #12
 8005612:	4902      	ldr	r1, [pc, #8]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005614:	4313      	orrs	r3, r2
 8005616:	604b      	str	r3, [r1, #4]
 8005618:	e026      	b.n	8005668 <HAL_RCC_OscConfig+0x2d4>
 800561a:	bf00      	nop
 800561c:	58024400 	.word	0x58024400
 8005620:	4b9a      	ldr	r3, [pc, #616]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	061b      	lsls	r3, r3, #24
 800562e:	4997      	ldr	r1, [pc, #604]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005630:	4313      	orrs	r3, r2
 8005632:	604b      	str	r3, [r1, #4]
 8005634:	e018      	b.n	8005668 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005636:	4b95      	ldr	r3, [pc, #596]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a94      	ldr	r2, [pc, #592]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 800563c:	f023 0301 	bic.w	r3, r3, #1
 8005640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005642:	f7fd fa6d 	bl	8002b20 <HAL_GetTick>
 8005646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800564a:	f7fd fa69 	bl	8002b20 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e2c2      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800565c:	4b8b      	ldr	r3, [pc, #556]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1f0      	bne.n	800564a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 80a9 	beq.w	80057c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005676:	4b85      	ldr	r3, [pc, #532]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800567e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005680:	4b82      	ldr	r3, [pc, #520]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	2b08      	cmp	r3, #8
 800568a:	d007      	beq.n	800569c <HAL_RCC_OscConfig+0x308>
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	2b18      	cmp	r3, #24
 8005690:	d13a      	bne.n	8005708 <HAL_RCC_OscConfig+0x374>
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f003 0303 	and.w	r3, r3, #3
 8005698:	2b01      	cmp	r3, #1
 800569a:	d135      	bne.n	8005708 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800569c:	4b7b      	ldr	r3, [pc, #492]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <HAL_RCC_OscConfig+0x320>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	2b80      	cmp	r3, #128	; 0x80
 80056ae:	d001      	beq.n	80056b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e296      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056b4:	f7fd fa84 	bl	8002bc0 <HAL_GetREVID>
 80056b8:	4603      	mov	r3, r0
 80056ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80056be:	4293      	cmp	r3, r2
 80056c0:	d817      	bhi.n	80056f2 <HAL_RCC_OscConfig+0x35e>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d108      	bne.n	80056dc <HAL_RCC_OscConfig+0x348>
 80056ca:	4b70      	ldr	r3, [pc, #448]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80056d2:	4a6e      	ldr	r2, [pc, #440]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 80056d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056da:	e075      	b.n	80057c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056dc:	4b6b      	ldr	r3, [pc, #428]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	069b      	lsls	r3, r3, #26
 80056ea:	4968      	ldr	r1, [pc, #416]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056f0:	e06a      	b.n	80057c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056f2:	4b66      	ldr	r3, [pc, #408]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	061b      	lsls	r3, r3, #24
 8005700:	4962      	ldr	r1, [pc, #392]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005702:	4313      	orrs	r3, r2
 8005704:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005706:	e05f      	b.n	80057c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d042      	beq.n	8005796 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005710:	4b5e      	ldr	r3, [pc, #376]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a5d      	ldr	r2, [pc, #372]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800571a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571c:	f7fd fa00 	bl	8002b20 <HAL_GetTick>
 8005720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005724:	f7fd f9fc 	bl	8002b20 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e255      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005736:	4b55      	ldr	r3, [pc, #340]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f0      	beq.n	8005724 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005742:	f7fd fa3d 	bl	8002bc0 <HAL_GetREVID>
 8005746:	4603      	mov	r3, r0
 8005748:	f241 0203 	movw	r2, #4099	; 0x1003
 800574c:	4293      	cmp	r3, r2
 800574e:	d817      	bhi.n	8005780 <HAL_RCC_OscConfig+0x3ec>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	2b20      	cmp	r3, #32
 8005756:	d108      	bne.n	800576a <HAL_RCC_OscConfig+0x3d6>
 8005758:	4b4c      	ldr	r3, [pc, #304]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005760:	4a4a      	ldr	r2, [pc, #296]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005762:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005766:	6053      	str	r3, [r2, #4]
 8005768:	e02e      	b.n	80057c8 <HAL_RCC_OscConfig+0x434>
 800576a:	4b48      	ldr	r3, [pc, #288]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	069b      	lsls	r3, r3, #26
 8005778:	4944      	ldr	r1, [pc, #272]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 800577a:	4313      	orrs	r3, r2
 800577c:	604b      	str	r3, [r1, #4]
 800577e:	e023      	b.n	80057c8 <HAL_RCC_OscConfig+0x434>
 8005780:	4b42      	ldr	r3, [pc, #264]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	061b      	lsls	r3, r3, #24
 800578e:	493f      	ldr	r1, [pc, #252]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005790:	4313      	orrs	r3, r2
 8005792:	60cb      	str	r3, [r1, #12]
 8005794:	e018      	b.n	80057c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005796:	4b3d      	ldr	r3, [pc, #244]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a3c      	ldr	r2, [pc, #240]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 800579c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a2:	f7fd f9bd 	bl	8002b20 <HAL_GetTick>
 80057a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80057aa:	f7fd f9b9 	bl	8002b20 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e212      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057bc:	4b33      	ldr	r3, [pc, #204]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1f0      	bne.n	80057aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d036      	beq.n	8005842 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d019      	beq.n	8005810 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057dc:	4b2b      	ldr	r3, [pc, #172]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 80057de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e0:	4a2a      	ldr	r2, [pc, #168]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 80057e2:	f043 0301 	orr.w	r3, r3, #1
 80057e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e8:	f7fd f99a 	bl	8002b20 <HAL_GetTick>
 80057ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057f0:	f7fd f996 	bl	8002b20 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e1ef      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005802:	4b22      	ldr	r3, [pc, #136]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f0      	beq.n	80057f0 <HAL_RCC_OscConfig+0x45c>
 800580e:	e018      	b.n	8005842 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005810:	4b1e      	ldr	r3, [pc, #120]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005814:	4a1d      	ldr	r2, [pc, #116]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005816:	f023 0301 	bic.w	r3, r3, #1
 800581a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581c:	f7fd f980 	bl	8002b20 <HAL_GetTick>
 8005820:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005824:	f7fd f97c 	bl	8002b20 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e1d5      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005836:	4b15      	ldr	r3, [pc, #84]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f0      	bne.n	8005824 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b00      	cmp	r3, #0
 800584c:	d039      	beq.n	80058c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01c      	beq.n	8005890 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005856:	4b0d      	ldr	r3, [pc, #52]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a0c      	ldr	r2, [pc, #48]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 800585c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005860:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005862:	f7fd f95d 	bl	8002b20 <HAL_GetTick>
 8005866:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800586a:	f7fd f959 	bl	8002b20 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e1b2      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800587c:	4b03      	ldr	r3, [pc, #12]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0f0      	beq.n	800586a <HAL_RCC_OscConfig+0x4d6>
 8005888:	e01b      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
 800588a:	bf00      	nop
 800588c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005890:	4b9b      	ldr	r3, [pc, #620]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a9a      	ldr	r2, [pc, #616]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800589a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800589c:	f7fd f940 	bl	8002b20 <HAL_GetTick>
 80058a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80058a4:	f7fd f93c 	bl	8002b20 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e195      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058b6:	4b92      	ldr	r3, [pc, #584]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f0      	bne.n	80058a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 8081 	beq.w	80059d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058d0:	4b8c      	ldr	r3, [pc, #560]	; (8005b04 <HAL_RCC_OscConfig+0x770>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a8b      	ldr	r2, [pc, #556]	; (8005b04 <HAL_RCC_OscConfig+0x770>)
 80058d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058dc:	f7fd f920 	bl	8002b20 <HAL_GetTick>
 80058e0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058e4:	f7fd f91c 	bl	8002b20 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b64      	cmp	r3, #100	; 0x64
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e175      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058f6:	4b83      	ldr	r3, [pc, #524]	; (8005b04 <HAL_RCC_OscConfig+0x770>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0f0      	beq.n	80058e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d106      	bne.n	8005918 <HAL_RCC_OscConfig+0x584>
 800590a:	4b7d      	ldr	r3, [pc, #500]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 800590c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590e:	4a7c      	ldr	r2, [pc, #496]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005910:	f043 0301 	orr.w	r3, r3, #1
 8005914:	6713      	str	r3, [r2, #112]	; 0x70
 8005916:	e02d      	b.n	8005974 <HAL_RCC_OscConfig+0x5e0>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10c      	bne.n	800593a <HAL_RCC_OscConfig+0x5a6>
 8005920:	4b77      	ldr	r3, [pc, #476]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005924:	4a76      	ldr	r2, [pc, #472]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005926:	f023 0301 	bic.w	r3, r3, #1
 800592a:	6713      	str	r3, [r2, #112]	; 0x70
 800592c:	4b74      	ldr	r3, [pc, #464]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 800592e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005930:	4a73      	ldr	r2, [pc, #460]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005932:	f023 0304 	bic.w	r3, r3, #4
 8005936:	6713      	str	r3, [r2, #112]	; 0x70
 8005938:	e01c      	b.n	8005974 <HAL_RCC_OscConfig+0x5e0>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b05      	cmp	r3, #5
 8005940:	d10c      	bne.n	800595c <HAL_RCC_OscConfig+0x5c8>
 8005942:	4b6f      	ldr	r3, [pc, #444]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	4a6e      	ldr	r2, [pc, #440]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005948:	f043 0304 	orr.w	r3, r3, #4
 800594c:	6713      	str	r3, [r2, #112]	; 0x70
 800594e:	4b6c      	ldr	r3, [pc, #432]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	4a6b      	ldr	r2, [pc, #428]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005954:	f043 0301 	orr.w	r3, r3, #1
 8005958:	6713      	str	r3, [r2, #112]	; 0x70
 800595a:	e00b      	b.n	8005974 <HAL_RCC_OscConfig+0x5e0>
 800595c:	4b68      	ldr	r3, [pc, #416]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 800595e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005960:	4a67      	ldr	r2, [pc, #412]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	6713      	str	r3, [r2, #112]	; 0x70
 8005968:	4b65      	ldr	r3, [pc, #404]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 800596a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596c:	4a64      	ldr	r2, [pc, #400]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 800596e:	f023 0304 	bic.w	r3, r3, #4
 8005972:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d015      	beq.n	80059a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597c:	f7fd f8d0 	bl	8002b20 <HAL_GetTick>
 8005980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005982:	e00a      	b.n	800599a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005984:	f7fd f8cc 	bl	8002b20 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e123      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800599a:	4b59      	ldr	r3, [pc, #356]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0ee      	beq.n	8005984 <HAL_RCC_OscConfig+0x5f0>
 80059a6:	e014      	b.n	80059d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a8:	f7fd f8ba 	bl	8002b20 <HAL_GetTick>
 80059ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059ae:	e00a      	b.n	80059c6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059b0:	f7fd f8b6 	bl	8002b20 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e10d      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059c6:	4b4e      	ldr	r3, [pc, #312]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 80059c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1ee      	bne.n	80059b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 8102 	beq.w	8005be0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80059dc:	4b48      	ldr	r3, [pc, #288]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059e4:	2b18      	cmp	r3, #24
 80059e6:	f000 80bd 	beq.w	8005b64 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	f040 809e 	bne.w	8005b30 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f4:	4b42      	ldr	r3, [pc, #264]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a41      	ldr	r2, [pc, #260]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 80059fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a00:	f7fd f88e 	bl	8002b20 <HAL_GetTick>
 8005a04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a08:	f7fd f88a 	bl	8002b20 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e0e3      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a1a:	4b39      	ldr	r3, [pc, #228]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1f0      	bne.n	8005a08 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a26:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a2a:	4b37      	ldr	r3, [pc, #220]	; (8005b08 <HAL_RCC_OscConfig+0x774>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a36:	0112      	lsls	r2, r2, #4
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	4931      	ldr	r1, [pc, #196]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	628b      	str	r3, [r1, #40]	; 0x28
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a44:	3b01      	subs	r3, #1
 8005a46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	025b      	lsls	r3, r3, #9
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	431a      	orrs	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	041b      	lsls	r3, r3, #16
 8005a5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	061b      	lsls	r3, r3, #24
 8005a6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a70:	4923      	ldr	r1, [pc, #140]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005a76:	4b22      	ldr	r3, [pc, #136]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7a:	4a21      	ldr	r2, [pc, #132]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a82:	4b1f      	ldr	r3, [pc, #124]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a86:	4b21      	ldr	r3, [pc, #132]	; (8005b0c <HAL_RCC_OscConfig+0x778>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a8e:	00d2      	lsls	r2, r2, #3
 8005a90:	491b      	ldr	r1, [pc, #108]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a96:	4b1a      	ldr	r3, [pc, #104]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	f023 020c 	bic.w	r2, r3, #12
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	4917      	ldr	r1, [pc, #92]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005aa8:	4b15      	ldr	r3, [pc, #84]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	f023 0202 	bic.w	r2, r3, #2
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab4:	4912      	ldr	r1, [pc, #72]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005aba:	4b11      	ldr	r3, [pc, #68]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abe:	4a10      	ldr	r2, [pc, #64]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac6:	4b0e      	ldr	r3, [pc, #56]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aca:	4a0d      	ldr	r2, [pc, #52]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ad2:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad6:	4a0a      	ldr	r2, [pc, #40]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005adc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005ade:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	4a07      	ldr	r2, [pc, #28]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005ae4:	f043 0301 	orr.w	r3, r3, #1
 8005ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aea:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a04      	ldr	r2, [pc, #16]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005af0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af6:	f7fd f813 	bl	8002b20 <HAL_GetTick>
 8005afa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005afc:	e011      	b.n	8005b22 <HAL_RCC_OscConfig+0x78e>
 8005afe:	bf00      	nop
 8005b00:	58024400 	.word	0x58024400
 8005b04:	58024800 	.word	0x58024800
 8005b08:	fffffc0c 	.word	0xfffffc0c
 8005b0c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b10:	f7fd f806 	bl	8002b20 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e05f      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b22:	4b32      	ldr	r3, [pc, #200]	; (8005bec <HAL_RCC_OscConfig+0x858>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0f0      	beq.n	8005b10 <HAL_RCC_OscConfig+0x77c>
 8005b2e:	e057      	b.n	8005be0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b30:	4b2e      	ldr	r3, [pc, #184]	; (8005bec <HAL_RCC_OscConfig+0x858>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a2d      	ldr	r2, [pc, #180]	; (8005bec <HAL_RCC_OscConfig+0x858>)
 8005b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3c:	f7fc fff0 	bl	8002b20 <HAL_GetTick>
 8005b40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b44:	f7fc ffec 	bl	8002b20 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e045      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b56:	4b25      	ldr	r3, [pc, #148]	; (8005bec <HAL_RCC_OscConfig+0x858>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1f0      	bne.n	8005b44 <HAL_RCC_OscConfig+0x7b0>
 8005b62:	e03d      	b.n	8005be0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005b64:	4b21      	ldr	r3, [pc, #132]	; (8005bec <HAL_RCC_OscConfig+0x858>)
 8005b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b6a:	4b20      	ldr	r3, [pc, #128]	; (8005bec <HAL_RCC_OscConfig+0x858>)
 8005b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d031      	beq.n	8005bdc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f003 0203 	and.w	r2, r3, #3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d12a      	bne.n	8005bdc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	091b      	lsrs	r3, r3, #4
 8005b8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d122      	bne.n	8005bdc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d11a      	bne.n	8005bdc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	0a5b      	lsrs	r3, r3, #9
 8005baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d111      	bne.n	8005bdc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	0c1b      	lsrs	r3, r3, #16
 8005bbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d108      	bne.n	8005bdc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	0e1b      	lsrs	r3, r3, #24
 8005bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d001      	beq.n	8005be0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e000      	b.n	8005be2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3730      	adds	r7, #48	; 0x30
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	58024400 	.word	0x58024400

08005bf0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e19c      	b.n	8005f3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c04:	4b8a      	ldr	r3, [pc, #552]	; (8005e30 <HAL_RCC_ClockConfig+0x240>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 030f 	and.w	r3, r3, #15
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d910      	bls.n	8005c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c12:	4b87      	ldr	r3, [pc, #540]	; (8005e30 <HAL_RCC_ClockConfig+0x240>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f023 020f 	bic.w	r2, r3, #15
 8005c1a:	4985      	ldr	r1, [pc, #532]	; (8005e30 <HAL_RCC_ClockConfig+0x240>)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c22:	4b83      	ldr	r3, [pc, #524]	; (8005e30 <HAL_RCC_ClockConfig+0x240>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 030f 	and.w	r3, r3, #15
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d001      	beq.n	8005c34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e184      	b.n	8005f3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d010      	beq.n	8005c62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	4b7b      	ldr	r3, [pc, #492]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d908      	bls.n	8005c62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c50:	4b78      	ldr	r3, [pc, #480]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	4975      	ldr	r1, [pc, #468]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0308 	and.w	r3, r3, #8
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d010      	beq.n	8005c90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695a      	ldr	r2, [r3, #20]
 8005c72:	4b70      	ldr	r3, [pc, #448]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d908      	bls.n	8005c90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c7e:	4b6d      	ldr	r3, [pc, #436]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	496a      	ldr	r1, [pc, #424]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d010      	beq.n	8005cbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699a      	ldr	r2, [r3, #24]
 8005ca0:	4b64      	ldr	r3, [pc, #400]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d908      	bls.n	8005cbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005cac:	4b61      	ldr	r3, [pc, #388]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	495e      	ldr	r1, [pc, #376]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d010      	beq.n	8005cec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69da      	ldr	r2, [r3, #28]
 8005cce:	4b59      	ldr	r3, [pc, #356]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d908      	bls.n	8005cec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005cda:	4b56      	ldr	r3, [pc, #344]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	4953      	ldr	r1, [pc, #332]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d010      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	4b4d      	ldr	r3, [pc, #308]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	f003 030f 	and.w	r3, r3, #15
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d908      	bls.n	8005d1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d08:	4b4a      	ldr	r3, [pc, #296]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	f023 020f 	bic.w	r2, r3, #15
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	4947      	ldr	r1, [pc, #284]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d055      	beq.n	8005dd2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005d26:	4b43      	ldr	r3, [pc, #268]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	4940      	ldr	r1, [pc, #256]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d107      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d40:	4b3c      	ldr	r3, [pc, #240]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d121      	bne.n	8005d90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e0f6      	b.n	8005f3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d107      	bne.n	8005d68 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d58:	4b36      	ldr	r3, [pc, #216]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d115      	bne.n	8005d90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e0ea      	b.n	8005f3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d107      	bne.n	8005d80 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d70:	4b30      	ldr	r3, [pc, #192]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d109      	bne.n	8005d90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e0de      	b.n	8005f3e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d80:	4b2c      	ldr	r3, [pc, #176]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e0d6      	b.n	8005f3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d90:	4b28      	ldr	r3, [pc, #160]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	f023 0207 	bic.w	r2, r3, #7
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	4925      	ldr	r1, [pc, #148]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da2:	f7fc febd 	bl	8002b20 <HAL_GetTick>
 8005da6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005da8:	e00a      	b.n	8005dc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005daa:	f7fc feb9 	bl	8002b20 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e0be      	b.n	8005f3e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dc0:	4b1c      	ldr	r3, [pc, #112]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d1eb      	bne.n	8005daa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d010      	beq.n	8005e00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68da      	ldr	r2, [r3, #12]
 8005de2:	4b14      	ldr	r3, [pc, #80]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d208      	bcs.n	8005e00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dee:	4b11      	ldr	r3, [pc, #68]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	f023 020f 	bic.w	r2, r3, #15
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	490e      	ldr	r1, [pc, #56]	; (8005e34 <HAL_RCC_ClockConfig+0x244>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e00:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <HAL_RCC_ClockConfig+0x240>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 030f 	and.w	r3, r3, #15
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d214      	bcs.n	8005e38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0e:	4b08      	ldr	r3, [pc, #32]	; (8005e30 <HAL_RCC_ClockConfig+0x240>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f023 020f 	bic.w	r2, r3, #15
 8005e16:	4906      	ldr	r1, [pc, #24]	; (8005e30 <HAL_RCC_ClockConfig+0x240>)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1e:	4b04      	ldr	r3, [pc, #16]	; (8005e30 <HAL_RCC_ClockConfig+0x240>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d005      	beq.n	8005e38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e086      	b.n	8005f3e <HAL_RCC_ClockConfig+0x34e>
 8005e30:	52002000 	.word	0x52002000
 8005e34:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d010      	beq.n	8005e66 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	4b3f      	ldr	r3, [pc, #252]	; (8005f48 <HAL_RCC_ClockConfig+0x358>)
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d208      	bcs.n	8005e66 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e54:	4b3c      	ldr	r3, [pc, #240]	; (8005f48 <HAL_RCC_ClockConfig+0x358>)
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	4939      	ldr	r1, [pc, #228]	; (8005f48 <HAL_RCC_ClockConfig+0x358>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d010      	beq.n	8005e94 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695a      	ldr	r2, [r3, #20]
 8005e76:	4b34      	ldr	r3, [pc, #208]	; (8005f48 <HAL_RCC_ClockConfig+0x358>)
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d208      	bcs.n	8005e94 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e82:	4b31      	ldr	r3, [pc, #196]	; (8005f48 <HAL_RCC_ClockConfig+0x358>)
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	492e      	ldr	r1, [pc, #184]	; (8005f48 <HAL_RCC_ClockConfig+0x358>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0310 	and.w	r3, r3, #16
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d010      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	699a      	ldr	r2, [r3, #24]
 8005ea4:	4b28      	ldr	r3, [pc, #160]	; (8005f48 <HAL_RCC_ClockConfig+0x358>)
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d208      	bcs.n	8005ec2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005eb0:	4b25      	ldr	r3, [pc, #148]	; (8005f48 <HAL_RCC_ClockConfig+0x358>)
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	4922      	ldr	r1, [pc, #136]	; (8005f48 <HAL_RCC_ClockConfig+0x358>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d010      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	69da      	ldr	r2, [r3, #28]
 8005ed2:	4b1d      	ldr	r3, [pc, #116]	; (8005f48 <HAL_RCC_ClockConfig+0x358>)
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d208      	bcs.n	8005ef0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005ede:	4b1a      	ldr	r3, [pc, #104]	; (8005f48 <HAL_RCC_ClockConfig+0x358>)
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	4917      	ldr	r1, [pc, #92]	; (8005f48 <HAL_RCC_ClockConfig+0x358>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ef0:	f000 f834 	bl	8005f5c <HAL_RCC_GetSysClockFreq>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <HAL_RCC_ClockConfig+0x358>)
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	0a1b      	lsrs	r3, r3, #8
 8005efc:	f003 030f 	and.w	r3, r3, #15
 8005f00:	4912      	ldr	r1, [pc, #72]	; (8005f4c <HAL_RCC_ClockConfig+0x35c>)
 8005f02:	5ccb      	ldrb	r3, [r1, r3]
 8005f04:	f003 031f 	and.w	r3, r3, #31
 8005f08:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f0e:	4b0e      	ldr	r3, [pc, #56]	; (8005f48 <HAL_RCC_ClockConfig+0x358>)
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	4a0d      	ldr	r2, [pc, #52]	; (8005f4c <HAL_RCC_ClockConfig+0x35c>)
 8005f18:	5cd3      	ldrb	r3, [r2, r3]
 8005f1a:	f003 031f 	and.w	r3, r3, #31
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	fa22 f303 	lsr.w	r3, r2, r3
 8005f24:	4a0a      	ldr	r2, [pc, #40]	; (8005f50 <HAL_RCC_ClockConfig+0x360>)
 8005f26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f28:	4a0a      	ldr	r2, [pc, #40]	; (8005f54 <HAL_RCC_ClockConfig+0x364>)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <HAL_RCC_ClockConfig+0x368>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fc fdaa 	bl	8002a8c <HAL_InitTick>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	58024400 	.word	0x58024400
 8005f4c:	0800f654 	.word	0x0800f654
 8005f50:	24000004 	.word	0x24000004
 8005f54:	24000000 	.word	0x24000000
 8005f58:	24000008 	.word	0x24000008

08005f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b089      	sub	sp, #36	; 0x24
 8005f60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f62:	4bb3      	ldr	r3, [pc, #716]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f6a:	2b18      	cmp	r3, #24
 8005f6c:	f200 8155 	bhi.w	800621a <HAL_RCC_GetSysClockFreq+0x2be>
 8005f70:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f76:	bf00      	nop
 8005f78:	08005fdd 	.word	0x08005fdd
 8005f7c:	0800621b 	.word	0x0800621b
 8005f80:	0800621b 	.word	0x0800621b
 8005f84:	0800621b 	.word	0x0800621b
 8005f88:	0800621b 	.word	0x0800621b
 8005f8c:	0800621b 	.word	0x0800621b
 8005f90:	0800621b 	.word	0x0800621b
 8005f94:	0800621b 	.word	0x0800621b
 8005f98:	08006003 	.word	0x08006003
 8005f9c:	0800621b 	.word	0x0800621b
 8005fa0:	0800621b 	.word	0x0800621b
 8005fa4:	0800621b 	.word	0x0800621b
 8005fa8:	0800621b 	.word	0x0800621b
 8005fac:	0800621b 	.word	0x0800621b
 8005fb0:	0800621b 	.word	0x0800621b
 8005fb4:	0800621b 	.word	0x0800621b
 8005fb8:	08006009 	.word	0x08006009
 8005fbc:	0800621b 	.word	0x0800621b
 8005fc0:	0800621b 	.word	0x0800621b
 8005fc4:	0800621b 	.word	0x0800621b
 8005fc8:	0800621b 	.word	0x0800621b
 8005fcc:	0800621b 	.word	0x0800621b
 8005fd0:	0800621b 	.word	0x0800621b
 8005fd4:	0800621b 	.word	0x0800621b
 8005fd8:	0800600f 	.word	0x0800600f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fdc:	4b94      	ldr	r3, [pc, #592]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0320 	and.w	r3, r3, #32
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d009      	beq.n	8005ffc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fe8:	4b91      	ldr	r3, [pc, #580]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	08db      	lsrs	r3, r3, #3
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	4a90      	ldr	r2, [pc, #576]	; (8006234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005ffa:	e111      	b.n	8006220 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ffc:	4b8d      	ldr	r3, [pc, #564]	; (8006234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ffe:	61bb      	str	r3, [r7, #24]
    break;
 8006000:	e10e      	b.n	8006220 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006002:	4b8d      	ldr	r3, [pc, #564]	; (8006238 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006004:	61bb      	str	r3, [r7, #24]
    break;
 8006006:	e10b      	b.n	8006220 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006008:	4b8c      	ldr	r3, [pc, #560]	; (800623c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800600a:	61bb      	str	r3, [r7, #24]
    break;
 800600c:	e108      	b.n	8006220 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800600e:	4b88      	ldr	r3, [pc, #544]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006018:	4b85      	ldr	r3, [pc, #532]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800601a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601c:	091b      	lsrs	r3, r3, #4
 800601e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006022:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006024:	4b82      	ldr	r3, [pc, #520]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800602e:	4b80      	ldr	r3, [pc, #512]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006032:	08db      	lsrs	r3, r3, #3
 8006034:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	fb02 f303 	mul.w	r3, r2, r3
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006046:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 80e1 	beq.w	8006214 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b02      	cmp	r3, #2
 8006056:	f000 8083 	beq.w	8006160 <HAL_RCC_GetSysClockFreq+0x204>
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2b02      	cmp	r3, #2
 800605e:	f200 80a1 	bhi.w	80061a4 <HAL_RCC_GetSysClockFreq+0x248>
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <HAL_RCC_GetSysClockFreq+0x114>
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d056      	beq.n	800611c <HAL_RCC_GetSysClockFreq+0x1c0>
 800606e:	e099      	b.n	80061a4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006070:	4b6f      	ldr	r3, [pc, #444]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0320 	and.w	r3, r3, #32
 8006078:	2b00      	cmp	r3, #0
 800607a:	d02d      	beq.n	80060d8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800607c:	4b6c      	ldr	r3, [pc, #432]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	08db      	lsrs	r3, r3, #3
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	4a6b      	ldr	r2, [pc, #428]	; (8006234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006088:	fa22 f303 	lsr.w	r3, r2, r3
 800608c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	ee07 3a90 	vmov	s15, r3
 8006094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060a6:	4b62      	ldr	r3, [pc, #392]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80060ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006240 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80060d6:	e087      	b.n	80061e8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006244 <HAL_RCC_GetSysClockFreq+0x2e8>
 80060e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ea:	4b51      	ldr	r3, [pc, #324]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80060fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006240 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800610a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800610e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800611a:	e065      	b.n	80061e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006126:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006248 <HAL_RCC_GetSysClockFreq+0x2ec>
 800612a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800612e:	4b40      	ldr	r3, [pc, #256]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006142:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006240 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800614a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800614e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800615e:	e043      	b.n	80061e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800624c <HAL_RCC_GetSysClockFreq+0x2f0>
 800616e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006172:	4b2f      	ldr	r3, [pc, #188]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006182:	ed97 6a02 	vldr	s12, [r7, #8]
 8006186:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006240 <HAL_RCC_GetSysClockFreq+0x2e4>
 800618a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800618e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800619a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061a2:	e021      	b.n	80061e8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006248 <HAL_RCC_GetSysClockFreq+0x2ec>
 80061b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b6:	4b1e      	ldr	r3, [pc, #120]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061be:	ee07 3a90 	vmov	s15, r3
 80061c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80061ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006240 <HAL_RCC_GetSysClockFreq+0x2e4>
 80061ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061e6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80061e8:	4b11      	ldr	r3, [pc, #68]	; (8006230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ec:	0a5b      	lsrs	r3, r3, #9
 80061ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f2:	3301      	adds	r3, #1
 80061f4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	ee07 3a90 	vmov	s15, r3
 80061fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006200:	edd7 6a07 	vldr	s13, [r7, #28]
 8006204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800620c:	ee17 3a90 	vmov	r3, s15
 8006210:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006212:	e005      	b.n	8006220 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	61bb      	str	r3, [r7, #24]
    break;
 8006218:	e002      	b.n	8006220 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800621a:	4b07      	ldr	r3, [pc, #28]	; (8006238 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800621c:	61bb      	str	r3, [r7, #24]
    break;
 800621e:	bf00      	nop
  }

  return sysclockfreq;
 8006220:	69bb      	ldr	r3, [r7, #24]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3724      	adds	r7, #36	; 0x24
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	58024400 	.word	0x58024400
 8006234:	03d09000 	.word	0x03d09000
 8006238:	003d0900 	.word	0x003d0900
 800623c:	007a1200 	.word	0x007a1200
 8006240:	46000000 	.word	0x46000000
 8006244:	4c742400 	.word	0x4c742400
 8006248:	4a742400 	.word	0x4a742400
 800624c:	4af42400 	.word	0x4af42400

08006250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006256:	f7ff fe81 	bl	8005f5c <HAL_RCC_GetSysClockFreq>
 800625a:	4602      	mov	r2, r0
 800625c:	4b10      	ldr	r3, [pc, #64]	; (80062a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	0a1b      	lsrs	r3, r3, #8
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	490f      	ldr	r1, [pc, #60]	; (80062a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006268:	5ccb      	ldrb	r3, [r1, r3]
 800626a:	f003 031f 	and.w	r3, r3, #31
 800626e:	fa22 f303 	lsr.w	r3, r2, r3
 8006272:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006274:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	f003 030f 	and.w	r3, r3, #15
 800627c:	4a09      	ldr	r2, [pc, #36]	; (80062a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800627e:	5cd3      	ldrb	r3, [r2, r3]
 8006280:	f003 031f 	and.w	r3, r3, #31
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	fa22 f303 	lsr.w	r3, r2, r3
 800628a:	4a07      	ldr	r2, [pc, #28]	; (80062a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800628c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800628e:	4a07      	ldr	r2, [pc, #28]	; (80062ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006294:	4b04      	ldr	r3, [pc, #16]	; (80062a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006296:	681b      	ldr	r3, [r3, #0]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	58024400 	.word	0x58024400
 80062a4:	0800f654 	.word	0x0800f654
 80062a8:	24000004 	.word	0x24000004
 80062ac:	24000000 	.word	0x24000000

080062b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80062b4:	f7ff ffcc 	bl	8006250 <HAL_RCC_GetHCLKFreq>
 80062b8:	4602      	mov	r2, r0
 80062ba:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	091b      	lsrs	r3, r3, #4
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	4904      	ldr	r1, [pc, #16]	; (80062d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062c6:	5ccb      	ldrb	r3, [r1, r3]
 80062c8:	f003 031f 	and.w	r3, r3, #31
 80062cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	58024400 	.word	0x58024400
 80062d8:	0800f654 	.word	0x0800f654

080062dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80062e0:	f7ff ffb6 	bl	8006250 <HAL_RCC_GetHCLKFreq>
 80062e4:	4602      	mov	r2, r0
 80062e6:	4b06      	ldr	r3, [pc, #24]	; (8006300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	0a1b      	lsrs	r3, r3, #8
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	4904      	ldr	r1, [pc, #16]	; (8006304 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062f2:	5ccb      	ldrb	r3, [r1, r3]
 80062f4:	f003 031f 	and.w	r3, r3, #31
 80062f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	58024400 	.word	0x58024400
 8006304:	0800f654 	.word	0x0800f654

08006308 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006310:	2300      	movs	r3, #0
 8006312:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006314:	2300      	movs	r3, #0
 8006316:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d03f      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006328:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800632c:	d02a      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800632e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006332:	d824      	bhi.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006334:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006338:	d018      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800633a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800633e:	d81e      	bhi.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006348:	d007      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800634a:	e018      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800634c:	4ba3      	ldr	r3, [pc, #652]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	4aa2      	ldr	r2, [pc, #648]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006356:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006358:	e015      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3304      	adds	r3, #4
 800635e:	2102      	movs	r1, #2
 8006360:	4618      	mov	r0, r3
 8006362:	f001 f9d5 	bl	8007710 <RCCEx_PLL2_Config>
 8006366:	4603      	mov	r3, r0
 8006368:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800636a:	e00c      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3324      	adds	r3, #36	; 0x24
 8006370:	2102      	movs	r1, #2
 8006372:	4618      	mov	r0, r3
 8006374:	f001 fa7e 	bl	8007874 <RCCEx_PLL3_Config>
 8006378:	4603      	mov	r3, r0
 800637a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800637c:	e003      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	75fb      	strb	r3, [r7, #23]
      break;
 8006382:	e000      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006386:	7dfb      	ldrb	r3, [r7, #23]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d109      	bne.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800638c:	4b93      	ldr	r3, [pc, #588]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800638e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006390:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006398:	4990      	ldr	r1, [pc, #576]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800639a:	4313      	orrs	r3, r2
 800639c:	650b      	str	r3, [r1, #80]	; 0x50
 800639e:	e001      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
 80063a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d03d      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d826      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80063b8:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80063ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063be:	bf00      	nop
 80063c0:	080063d5 	.word	0x080063d5
 80063c4:	080063e3 	.word	0x080063e3
 80063c8:	080063f5 	.word	0x080063f5
 80063cc:	0800640d 	.word	0x0800640d
 80063d0:	0800640d 	.word	0x0800640d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063d4:	4b81      	ldr	r3, [pc, #516]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	4a80      	ldr	r2, [pc, #512]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063e0:	e015      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3304      	adds	r3, #4
 80063e6:	2100      	movs	r1, #0
 80063e8:	4618      	mov	r0, r3
 80063ea:	f001 f991 	bl	8007710 <RCCEx_PLL2_Config>
 80063ee:	4603      	mov	r3, r0
 80063f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063f2:	e00c      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3324      	adds	r3, #36	; 0x24
 80063f8:	2100      	movs	r1, #0
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 fa3a 	bl	8007874 <RCCEx_PLL3_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006404:	e003      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	75fb      	strb	r3, [r7, #23]
      break;
 800640a:	e000      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800640c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800640e:	7dfb      	ldrb	r3, [r7, #23]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d109      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006414:	4b71      	ldr	r3, [pc, #452]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006418:	f023 0207 	bic.w	r2, r3, #7
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006420:	496e      	ldr	r1, [pc, #440]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006422:	4313      	orrs	r3, r2
 8006424:	650b      	str	r3, [r1, #80]	; 0x50
 8006426:	e001      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006428:	7dfb      	ldrb	r3, [r7, #23]
 800642a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006434:	2b00      	cmp	r3, #0
 8006436:	d042      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800643c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006440:	d02b      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006446:	d825      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006448:	2bc0      	cmp	r3, #192	; 0xc0
 800644a:	d028      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800644c:	2bc0      	cmp	r3, #192	; 0xc0
 800644e:	d821      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006450:	2b80      	cmp	r3, #128	; 0x80
 8006452:	d016      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006454:	2b80      	cmp	r3, #128	; 0x80
 8006456:	d81d      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800645c:	2b40      	cmp	r3, #64	; 0x40
 800645e:	d007      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006460:	e018      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006462:	4b5e      	ldr	r3, [pc, #376]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	4a5d      	ldr	r2, [pc, #372]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800646c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800646e:	e017      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3304      	adds	r3, #4
 8006474:	2100      	movs	r1, #0
 8006476:	4618      	mov	r0, r3
 8006478:	f001 f94a 	bl	8007710 <RCCEx_PLL2_Config>
 800647c:	4603      	mov	r3, r0
 800647e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006480:	e00e      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3324      	adds	r3, #36	; 0x24
 8006486:	2100      	movs	r1, #0
 8006488:	4618      	mov	r0, r3
 800648a:	f001 f9f3 	bl	8007874 <RCCEx_PLL3_Config>
 800648e:	4603      	mov	r3, r0
 8006490:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006492:	e005      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	75fb      	strb	r3, [r7, #23]
      break;
 8006498:	e002      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800649a:	bf00      	nop
 800649c:	e000      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800649e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d109      	bne.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80064a6:	4b4d      	ldr	r3, [pc, #308]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80064a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b2:	494a      	ldr	r1, [pc, #296]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	650b      	str	r3, [r1, #80]	; 0x50
 80064b8:	e001      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
 80064bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d049      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064d4:	d030      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80064d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064da:	d82a      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064e0:	d02c      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80064e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064e6:	d824      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064ec:	d018      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80064ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064f2:	d81e      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80064f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064fc:	d007      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80064fe:	e018      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006500:	4b36      	ldr	r3, [pc, #216]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	4a35      	ldr	r2, [pc, #212]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800650a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800650c:	e017      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3304      	adds	r3, #4
 8006512:	2100      	movs	r1, #0
 8006514:	4618      	mov	r0, r3
 8006516:	f001 f8fb 	bl	8007710 <RCCEx_PLL2_Config>
 800651a:	4603      	mov	r3, r0
 800651c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800651e:	e00e      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3324      	adds	r3, #36	; 0x24
 8006524:	2100      	movs	r1, #0
 8006526:	4618      	mov	r0, r3
 8006528:	f001 f9a4 	bl	8007874 <RCCEx_PLL3_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006530:	e005      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	75fb      	strb	r3, [r7, #23]
      break;
 8006536:	e002      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006538:	bf00      	nop
 800653a:	e000      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800653c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800653e:	7dfb      	ldrb	r3, [r7, #23]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10a      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006544:	4b25      	ldr	r3, [pc, #148]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006548:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006552:	4922      	ldr	r1, [pc, #136]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006554:	4313      	orrs	r3, r2
 8006556:	658b      	str	r3, [r1, #88]	; 0x58
 8006558:	e001      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006566:	2b00      	cmp	r3, #0
 8006568:	d04b      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006570:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006574:	d030      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006576:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800657a:	d82a      	bhi.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800657c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006580:	d02e      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006582:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006586:	d824      	bhi.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800658c:	d018      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800658e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006592:	d81e      	bhi.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800659c:	d007      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800659e:	e018      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a0:	4b0e      	ldr	r3, [pc, #56]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	4a0d      	ldr	r2, [pc, #52]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80065a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065ac:	e019      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3304      	adds	r3, #4
 80065b2:	2100      	movs	r1, #0
 80065b4:	4618      	mov	r0, r3
 80065b6:	f001 f8ab 	bl	8007710 <RCCEx_PLL2_Config>
 80065ba:	4603      	mov	r3, r0
 80065bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80065be:	e010      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3324      	adds	r3, #36	; 0x24
 80065c4:	2100      	movs	r1, #0
 80065c6:	4618      	mov	r0, r3
 80065c8:	f001 f954 	bl	8007874 <RCCEx_PLL3_Config>
 80065cc:	4603      	mov	r3, r0
 80065ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065d0:	e007      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	75fb      	strb	r3, [r7, #23]
      break;
 80065d6:	e004      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80065d8:	bf00      	nop
 80065da:	e002      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80065dc:	58024400 	.word	0x58024400
      break;
 80065e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065e2:	7dfb      	ldrb	r3, [r7, #23]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10a      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80065e8:	4b99      	ldr	r3, [pc, #612]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80065ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065f6:	4996      	ldr	r1, [pc, #600]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	658b      	str	r3, [r1, #88]	; 0x58
 80065fc:	e001      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
 8006600:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d032      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006612:	2b30      	cmp	r3, #48	; 0x30
 8006614:	d01c      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006616:	2b30      	cmp	r3, #48	; 0x30
 8006618:	d817      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800661a:	2b20      	cmp	r3, #32
 800661c:	d00c      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800661e:	2b20      	cmp	r3, #32
 8006620:	d813      	bhi.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006622:	2b00      	cmp	r3, #0
 8006624:	d016      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006626:	2b10      	cmp	r3, #16
 8006628:	d10f      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800662a:	4b89      	ldr	r3, [pc, #548]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800662c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662e:	4a88      	ldr	r2, [pc, #544]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006634:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006636:	e00e      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3304      	adds	r3, #4
 800663c:	2102      	movs	r1, #2
 800663e:	4618      	mov	r0, r3
 8006640:	f001 f866 	bl	8007710 <RCCEx_PLL2_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006648:	e005      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	75fb      	strb	r3, [r7, #23]
      break;
 800664e:	e002      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006650:	bf00      	nop
 8006652:	e000      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006656:	7dfb      	ldrb	r3, [r7, #23]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d109      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800665c:	4b7c      	ldr	r3, [pc, #496]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800665e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006660:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006668:	4979      	ldr	r1, [pc, #484]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800666a:	4313      	orrs	r3, r2
 800666c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800666e:	e001      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006670:	7dfb      	ldrb	r3, [r7, #23]
 8006672:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d047      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006688:	d030      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800668a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800668e:	d82a      	bhi.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006690:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006694:	d02c      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006696:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800669a:	d824      	bhi.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800669c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a0:	d018      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80066a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a6:	d81e      	bhi.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80066ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b0:	d007      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80066b2:	e018      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066b4:	4b66      	ldr	r3, [pc, #408]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	4a65      	ldr	r2, [pc, #404]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80066ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066c0:	e017      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3304      	adds	r3, #4
 80066c6:	2100      	movs	r1, #0
 80066c8:	4618      	mov	r0, r3
 80066ca:	f001 f821 	bl	8007710 <RCCEx_PLL2_Config>
 80066ce:	4603      	mov	r3, r0
 80066d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066d2:	e00e      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3324      	adds	r3, #36	; 0x24
 80066d8:	2100      	movs	r1, #0
 80066da:	4618      	mov	r0, r3
 80066dc:	f001 f8ca 	bl	8007874 <RCCEx_PLL3_Config>
 80066e0:	4603      	mov	r3, r0
 80066e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066e4:	e005      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	75fb      	strb	r3, [r7, #23]
      break;
 80066ea:	e002      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80066ec:	bf00      	nop
 80066ee:	e000      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80066f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d109      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066f8:	4b55      	ldr	r3, [pc, #340]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80066fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006704:	4952      	ldr	r1, [pc, #328]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006706:	4313      	orrs	r3, r2
 8006708:	650b      	str	r3, [r1, #80]	; 0x50
 800670a:	e001      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670c:	7dfb      	ldrb	r3, [r7, #23]
 800670e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d049      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006724:	d02e      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006726:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800672a:	d828      	bhi.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800672c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006730:	d02a      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006732:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006736:	d822      	bhi.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006738:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800673c:	d026      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800673e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006742:	d81c      	bhi.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006744:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006748:	d010      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800674a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800674e:	d816      	bhi.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01d      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006758:	d111      	bne.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3304      	adds	r3, #4
 800675e:	2101      	movs	r1, #1
 8006760:	4618      	mov	r0, r3
 8006762:	f000 ffd5 	bl	8007710 <RCCEx_PLL2_Config>
 8006766:	4603      	mov	r3, r0
 8006768:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800676a:	e012      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3324      	adds	r3, #36	; 0x24
 8006770:	2101      	movs	r1, #1
 8006772:	4618      	mov	r0, r3
 8006774:	f001 f87e 	bl	8007874 <RCCEx_PLL3_Config>
 8006778:	4603      	mov	r3, r0
 800677a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800677c:	e009      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	75fb      	strb	r3, [r7, #23]
      break;
 8006782:	e006      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006784:	bf00      	nop
 8006786:	e004      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006788:	bf00      	nop
 800678a:	e002      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800678c:	bf00      	nop
 800678e:	e000      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006790:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d109      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006798:	4b2d      	ldr	r3, [pc, #180]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800679a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067a4:	492a      	ldr	r1, [pc, #168]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	650b      	str	r3, [r1, #80]	; 0x50
 80067aa:	e001      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d04d      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067c6:	d02e      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80067c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067cc:	d828      	bhi.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80067ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d2:	d02a      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80067d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d8:	d822      	bhi.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80067da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067de:	d026      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80067e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067e4:	d81c      	bhi.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80067e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ea:	d010      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80067ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f0:	d816      	bhi.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d01d      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80067f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067fa:	d111      	bne.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	3304      	adds	r3, #4
 8006800:	2101      	movs	r1, #1
 8006802:	4618      	mov	r0, r3
 8006804:	f000 ff84 	bl	8007710 <RCCEx_PLL2_Config>
 8006808:	4603      	mov	r3, r0
 800680a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800680c:	e012      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	3324      	adds	r3, #36	; 0x24
 8006812:	2101      	movs	r1, #1
 8006814:	4618      	mov	r0, r3
 8006816:	f001 f82d 	bl	8007874 <RCCEx_PLL3_Config>
 800681a:	4603      	mov	r3, r0
 800681c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800681e:	e009      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	75fb      	strb	r3, [r7, #23]
      break;
 8006824:	e006      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006826:	bf00      	nop
 8006828:	e004      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800682a:	bf00      	nop
 800682c:	e002      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800682e:	bf00      	nop
 8006830:	e000      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006834:	7dfb      	ldrb	r3, [r7, #23]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10c      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800683a:	4b05      	ldr	r3, [pc, #20]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800683c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800683e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006848:	4901      	ldr	r1, [pc, #4]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800684a:	4313      	orrs	r3, r2
 800684c:	658b      	str	r3, [r1, #88]	; 0x58
 800684e:	e003      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006850:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006854:	7dfb      	ldrb	r3, [r7, #23]
 8006856:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d02f      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800686c:	d00e      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800686e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006872:	d814      	bhi.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006874:	2b00      	cmp	r3, #0
 8006876:	d015      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006878:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800687c:	d10f      	bne.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800687e:	4baf      	ldr	r3, [pc, #700]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006882:	4aae      	ldr	r2, [pc, #696]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006888:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800688a:	e00c      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3304      	adds	r3, #4
 8006890:	2101      	movs	r1, #1
 8006892:	4618      	mov	r0, r3
 8006894:	f000 ff3c 	bl	8007710 <RCCEx_PLL2_Config>
 8006898:	4603      	mov	r3, r0
 800689a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800689c:	e003      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	75fb      	strb	r3, [r7, #23]
      break;
 80068a2:	e000      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80068a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d109      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80068ac:	4ba3      	ldr	r3, [pc, #652]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80068ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068b8:	49a0      	ldr	r1, [pc, #640]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	650b      	str	r3, [r1, #80]	; 0x50
 80068be:	e001      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
 80068c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d032      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d4:	2b03      	cmp	r3, #3
 80068d6:	d81b      	bhi.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80068d8:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80068da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068de:	bf00      	nop
 80068e0:	08006917 	.word	0x08006917
 80068e4:	080068f1 	.word	0x080068f1
 80068e8:	080068ff 	.word	0x080068ff
 80068ec:	08006917 	.word	0x08006917
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068f0:	4b92      	ldr	r3, [pc, #584]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	4a91      	ldr	r2, [pc, #580]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80068f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068fc:	e00c      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	3304      	adds	r3, #4
 8006902:	2102      	movs	r1, #2
 8006904:	4618      	mov	r0, r3
 8006906:	f000 ff03 	bl	8007710 <RCCEx_PLL2_Config>
 800690a:	4603      	mov	r3, r0
 800690c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800690e:	e003      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	75fb      	strb	r3, [r7, #23]
      break;
 8006914:	e000      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006918:	7dfb      	ldrb	r3, [r7, #23]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d109      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800691e:	4b87      	ldr	r3, [pc, #540]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006922:	f023 0203 	bic.w	r2, r3, #3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692a:	4984      	ldr	r1, [pc, #528]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800692c:	4313      	orrs	r3, r2
 800692e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006930:	e001      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 8086 	beq.w	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006944:	4b7e      	ldr	r3, [pc, #504]	; (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a7d      	ldr	r2, [pc, #500]	; (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800694a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800694e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006950:	f7fc f8e6 	bl	8002b20 <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006956:	e009      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006958:	f7fc f8e2 	bl	8002b20 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b64      	cmp	r3, #100	; 0x64
 8006964:	d902      	bls.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	75fb      	strb	r3, [r7, #23]
        break;
 800696a:	e005      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800696c:	4b74      	ldr	r3, [pc, #464]	; (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0ef      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006978:	7dfb      	ldrb	r3, [r7, #23]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d166      	bne.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800697e:	4b6f      	ldr	r3, [pc, #444]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006980:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006988:	4053      	eors	r3, r2
 800698a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800698e:	2b00      	cmp	r3, #0
 8006990:	d013      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006992:	4b6a      	ldr	r3, [pc, #424]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800699a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800699c:	4b67      	ldr	r3, [pc, #412]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800699e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a0:	4a66      	ldr	r2, [pc, #408]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069a8:	4b64      	ldr	r3, [pc, #400]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ac:	4a63      	ldr	r2, [pc, #396]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069b2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80069b4:	4a61      	ldr	r2, [pc, #388]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069c4:	d115      	bne.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c6:	f7fc f8ab 	bl	8002b20 <HAL_GetTick>
 80069ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069cc:	e00b      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ce:	f7fc f8a7 	bl	8002b20 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069dc:	4293      	cmp	r3, r2
 80069de:	d902      	bls.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	75fb      	strb	r3, [r7, #23]
            break;
 80069e4:	e005      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069e6:	4b55      	ldr	r3, [pc, #340]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0ed      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d126      	bne.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a06:	d10d      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006a08:	4b4c      	ldr	r3, [pc, #304]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a16:	0919      	lsrs	r1, r3, #4
 8006a18:	4b4a      	ldr	r3, [pc, #296]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006a1a:	400b      	ands	r3, r1
 8006a1c:	4947      	ldr	r1, [pc, #284]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	610b      	str	r3, [r1, #16]
 8006a22:	e005      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006a24:	4b45      	ldr	r3, [pc, #276]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	4a44      	ldr	r2, [pc, #272]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006a2e:	6113      	str	r3, [r2, #16]
 8006a30:	4b42      	ldr	r3, [pc, #264]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a3e:	493f      	ldr	r1, [pc, #252]	; (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	670b      	str	r3, [r1, #112]	; 0x70
 8006a44:	e004      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
 8006a48:	75bb      	strb	r3, [r7, #22]
 8006a4a:	e001      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
 8006a4e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 8085 	beq.w	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a62:	2b28      	cmp	r3, #40	; 0x28
 8006a64:	d866      	bhi.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006a66:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6c:	08006b49 	.word	0x08006b49
 8006a70:	08006b35 	.word	0x08006b35
 8006a74:	08006b35 	.word	0x08006b35
 8006a78:	08006b35 	.word	0x08006b35
 8006a7c:	08006b35 	.word	0x08006b35
 8006a80:	08006b35 	.word	0x08006b35
 8006a84:	08006b35 	.word	0x08006b35
 8006a88:	08006b35 	.word	0x08006b35
 8006a8c:	08006b11 	.word	0x08006b11
 8006a90:	08006b35 	.word	0x08006b35
 8006a94:	08006b35 	.word	0x08006b35
 8006a98:	08006b35 	.word	0x08006b35
 8006a9c:	08006b35 	.word	0x08006b35
 8006aa0:	08006b35 	.word	0x08006b35
 8006aa4:	08006b35 	.word	0x08006b35
 8006aa8:	08006b35 	.word	0x08006b35
 8006aac:	08006b23 	.word	0x08006b23
 8006ab0:	08006b35 	.word	0x08006b35
 8006ab4:	08006b35 	.word	0x08006b35
 8006ab8:	08006b35 	.word	0x08006b35
 8006abc:	08006b35 	.word	0x08006b35
 8006ac0:	08006b35 	.word	0x08006b35
 8006ac4:	08006b35 	.word	0x08006b35
 8006ac8:	08006b35 	.word	0x08006b35
 8006acc:	08006b49 	.word	0x08006b49
 8006ad0:	08006b35 	.word	0x08006b35
 8006ad4:	08006b35 	.word	0x08006b35
 8006ad8:	08006b35 	.word	0x08006b35
 8006adc:	08006b35 	.word	0x08006b35
 8006ae0:	08006b35 	.word	0x08006b35
 8006ae4:	08006b35 	.word	0x08006b35
 8006ae8:	08006b35 	.word	0x08006b35
 8006aec:	08006b49 	.word	0x08006b49
 8006af0:	08006b35 	.word	0x08006b35
 8006af4:	08006b35 	.word	0x08006b35
 8006af8:	08006b35 	.word	0x08006b35
 8006afc:	08006b35 	.word	0x08006b35
 8006b00:	08006b35 	.word	0x08006b35
 8006b04:	08006b35 	.word	0x08006b35
 8006b08:	08006b35 	.word	0x08006b35
 8006b0c:	08006b49 	.word	0x08006b49
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3304      	adds	r3, #4
 8006b14:	2101      	movs	r1, #1
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 fdfa 	bl	8007710 <RCCEx_PLL2_Config>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006b20:	e013      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	3324      	adds	r3, #36	; 0x24
 8006b26:	2101      	movs	r1, #1
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fea3 	bl	8007874 <RCCEx_PLL3_Config>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006b32:	e00a      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	75fb      	strb	r3, [r7, #23]
      break;
 8006b38:	e007      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006b3a:	bf00      	nop
 8006b3c:	58024400 	.word	0x58024400
 8006b40:	58024800 	.word	0x58024800
 8006b44:	00ffffcf 	.word	0x00ffffcf
      break;
 8006b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b50:	4b96      	ldr	r3, [pc, #600]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b54:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b5c:	4993      	ldr	r1, [pc, #588]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	654b      	str	r3, [r1, #84]	; 0x54
 8006b62:	e001      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b64:	7dfb      	ldrb	r3, [r7, #23]
 8006b66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d038      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b78:	2b05      	cmp	r3, #5
 8006b7a:	d821      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006b7c:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b82:	bf00      	nop
 8006b84:	08006bc7 	.word	0x08006bc7
 8006b88:	08006b9d 	.word	0x08006b9d
 8006b8c:	08006baf 	.word	0x08006baf
 8006b90:	08006bc7 	.word	0x08006bc7
 8006b94:	08006bc7 	.word	0x08006bc7
 8006b98:	08006bc7 	.word	0x08006bc7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fdb4 	bl	8007710 <RCCEx_PLL2_Config>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006bac:	e00c      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3324      	adds	r3, #36	; 0x24
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 fe5d 	bl	8007874 <RCCEx_PLL3_Config>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006bbe:	e003      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc4:	e000      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006bc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d109      	bne.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006bce:	4b77      	ldr	r3, [pc, #476]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd2:	f023 0207 	bic.w	r2, r3, #7
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bda:	4974      	ldr	r1, [pc, #464]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	654b      	str	r3, [r1, #84]	; 0x54
 8006be0:	e001      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be2:	7dfb      	ldrb	r3, [r7, #23]
 8006be4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0304 	and.w	r3, r3, #4
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d03a      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf8:	2b05      	cmp	r3, #5
 8006bfa:	d821      	bhi.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006bfc:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c02:	bf00      	nop
 8006c04:	08006c47 	.word	0x08006c47
 8006c08:	08006c1d 	.word	0x08006c1d
 8006c0c:	08006c2f 	.word	0x08006c2f
 8006c10:	08006c47 	.word	0x08006c47
 8006c14:	08006c47 	.word	0x08006c47
 8006c18:	08006c47 	.word	0x08006c47
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3304      	adds	r3, #4
 8006c20:	2101      	movs	r1, #1
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fd74 	bl	8007710 <RCCEx_PLL2_Config>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006c2c:	e00c      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3324      	adds	r3, #36	; 0x24
 8006c32:	2101      	movs	r1, #1
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 fe1d 	bl	8007874 <RCCEx_PLL3_Config>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006c3e:	e003      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	75fb      	strb	r3, [r7, #23]
      break;
 8006c44:	e000      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c4e:	4b57      	ldr	r3, [pc, #348]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c52:	f023 0207 	bic.w	r2, r3, #7
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5c:	4953      	ldr	r1, [pc, #332]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	658b      	str	r3, [r1, #88]	; 0x58
 8006c62:	e001      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0320 	and.w	r3, r3, #32
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d04b      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c7e:	d02e      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c84:	d828      	bhi.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c8a:	d02a      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c90:	d822      	bhi.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006c92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c96:	d026      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006c98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c9c:	d81c      	bhi.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ca2:	d010      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ca8:	d816      	bhi.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d01d      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cb2:	d111      	bne.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	2100      	movs	r1, #0
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fd28 	bl	8007710 <RCCEx_PLL2_Config>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006cc4:	e012      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3324      	adds	r3, #36	; 0x24
 8006cca:	2102      	movs	r1, #2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fdd1 	bl	8007874 <RCCEx_PLL3_Config>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006cd6:	e009      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	75fb      	strb	r3, [r7, #23]
      break;
 8006cdc:	e006      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006cde:	bf00      	nop
 8006ce0:	e004      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006ce2:	bf00      	nop
 8006ce4:	e002      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006ce6:	bf00      	nop
 8006ce8:	e000      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10a      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cf2:	4b2e      	ldr	r3, [pc, #184]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d00:	492a      	ldr	r1, [pc, #168]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	654b      	str	r3, [r1, #84]	; 0x54
 8006d06:	e001      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
 8006d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d04d      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d22:	d02e      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006d24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d28:	d828      	bhi.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d2e:	d02a      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d34:	d822      	bhi.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006d36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d3a:	d026      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006d3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d40:	d81c      	bhi.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d46:	d010      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d4c:	d816      	bhi.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d01d      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8006d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d56:	d111      	bne.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 fcd6 	bl	8007710 <RCCEx_PLL2_Config>
 8006d64:	4603      	mov	r3, r0
 8006d66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d68:	e012      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3324      	adds	r3, #36	; 0x24
 8006d6e:	2102      	movs	r1, #2
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fd7f 	bl	8007874 <RCCEx_PLL3_Config>
 8006d76:	4603      	mov	r3, r0
 8006d78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d7a:	e009      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d80:	e006      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d82:	bf00      	nop
 8006d84:	e004      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d86:	bf00      	nop
 8006d88:	e002      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d8a:	bf00      	nop
 8006d8c:	e000      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10c      	bne.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d96:	4b05      	ldr	r3, [pc, #20]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006da4:	4901      	ldr	r1, [pc, #4]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	658b      	str	r3, [r1, #88]	; 0x58
 8006daa:	e003      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006dac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
 8006db2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d04b      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dc6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006dca:	d02e      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006dcc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006dd0:	d828      	bhi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd6:	d02a      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ddc:	d822      	bhi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006dde:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006de2:	d026      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006de4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006de8:	d81c      	bhi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006dea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dee:	d010      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006df4:	d816      	bhi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d01d      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dfe:	d111      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3304      	adds	r3, #4
 8006e04:	2100      	movs	r1, #0
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 fc82 	bl	8007710 <RCCEx_PLL2_Config>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006e10:	e012      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3324      	adds	r3, #36	; 0x24
 8006e16:	2102      	movs	r1, #2
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 fd2b 	bl	8007874 <RCCEx_PLL3_Config>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006e22:	e009      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	75fb      	strb	r3, [r7, #23]
      break;
 8006e28:	e006      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006e2a:	bf00      	nop
 8006e2c:	e004      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006e2e:	bf00      	nop
 8006e30:	e002      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006e32:	bf00      	nop
 8006e34:	e000      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006e36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e38:	7dfb      	ldrb	r3, [r7, #23]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006e3e:	4b9d      	ldr	r3, [pc, #628]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e4c:	4999      	ldr	r1, [pc, #612]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	658b      	str	r3, [r1, #88]	; 0x58
 8006e52:	e001      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e54:	7dfb      	ldrb	r3, [r7, #23]
 8006e56:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0308 	and.w	r3, r3, #8
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01a      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e6e:	d10a      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3324      	adds	r3, #36	; 0x24
 8006e74:	2102      	movs	r1, #2
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fcfc 	bl	8007874 <RCCEx_PLL3_Config>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e86:	4b8b      	ldr	r3, [pc, #556]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e94:	4987      	ldr	r1, [pc, #540]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0310 	and.w	r3, r3, #16
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d01a      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eb0:	d10a      	bne.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3324      	adds	r3, #36	; 0x24
 8006eb6:	2102      	movs	r1, #2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fcdb 	bl	8007874 <RCCEx_PLL3_Config>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ec8:	4b7a      	ldr	r3, [pc, #488]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ed6:	4977      	ldr	r1, [pc, #476]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d034      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ef2:	d01d      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006ef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ef8:	d817      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f02:	d009      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006f04:	e011      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3304      	adds	r3, #4
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 fbff 	bl	8007710 <RCCEx_PLL2_Config>
 8006f12:	4603      	mov	r3, r0
 8006f14:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006f16:	e00c      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3324      	adds	r3, #36	; 0x24
 8006f1c:	2102      	movs	r1, #2
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 fca8 	bl	8007874 <RCCEx_PLL3_Config>
 8006f24:	4603      	mov	r3, r0
 8006f26:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006f28:	e003      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f2e:	e000      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f32:	7dfb      	ldrb	r3, [r7, #23]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f38:	4b5e      	ldr	r3, [pc, #376]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f46:	495b      	ldr	r1, [pc, #364]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	658b      	str	r3, [r1, #88]	; 0x58
 8006f4c:	e001      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d033      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f68:	d01c      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006f6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f6e:	d816      	bhi.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f74:	d003      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006f76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f7a:	d007      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006f7c:	e00f      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f7e:	4b4d      	ldr	r3, [pc, #308]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f82:	4a4c      	ldr	r2, [pc, #304]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f8a:	e00c      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3324      	adds	r3, #36	; 0x24
 8006f90:	2101      	movs	r1, #1
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 fc6e 	bl	8007874 <RCCEx_PLL3_Config>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f9c:	e003      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa2:	e000      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fac:	4b41      	ldr	r3, [pc, #260]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fba:	493e      	ldr	r1, [pc, #248]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	654b      	str	r3, [r1, #84]	; 0x54
 8006fc0:	e001      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d029      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fde:	d007      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006fe0:	e00f      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fe2:	4b34      	ldr	r3, [pc, #208]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe6:	4a33      	ldr	r2, [pc, #204]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006fee:	e00b      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	2102      	movs	r1, #2
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fb8a 	bl	8007710 <RCCEx_PLL2_Config>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007000:	e002      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	75fb      	strb	r3, [r7, #23]
      break;
 8007006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007008:	7dfb      	ldrb	r3, [r7, #23]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800700e:	4b29      	ldr	r3, [pc, #164]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007012:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800701a:	4926      	ldr	r1, [pc, #152]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800701c:	4313      	orrs	r3, r2
 800701e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007020:	e001      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007022:	7dfb      	ldrb	r3, [r7, #23]
 8007024:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3324      	adds	r3, #36	; 0x24
 8007036:	2102      	movs	r1, #2
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fc1b 	bl	8007874 <RCCEx_PLL3_Config>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d033      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800705c:	d017      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800705e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007062:	d811      	bhi.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007068:	d013      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800706a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800706e:	d80b      	bhi.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007070:	2b00      	cmp	r3, #0
 8007072:	d010      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007078:	d106      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800707a:	4b0e      	ldr	r3, [pc, #56]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	4a0d      	ldr	r2, [pc, #52]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007084:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007086:	e007      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	75fb      	strb	r3, [r7, #23]
      break;
 800708c:	e004      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800708e:	bf00      	nop
 8007090:	e002      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007092:	bf00      	nop
 8007094:	e000      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007096:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007098:	7dfb      	ldrb	r3, [r7, #23]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10c      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800709e:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80070a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070aa:	4902      	ldr	r1, [pc, #8]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	654b      	str	r3, [r1, #84]	; 0x54
 80070b0:	e004      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80070b2:	bf00      	nop
 80070b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
 80070ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80070c8:	4b31      	ldr	r3, [pc, #196]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d4:	492e      	ldr	r1, [pc, #184]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d009      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80070e6:	4b2a      	ldr	r3, [pc, #168]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070f4:	4926      	ldr	r1, [pc, #152]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d008      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007106:	4b22      	ldr	r3, [pc, #136]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800710a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007112:	491f      	ldr	r1, [pc, #124]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007114:	4313      	orrs	r3, r2
 8007116:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00d      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007124:	4b1a      	ldr	r3, [pc, #104]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	4a19      	ldr	r2, [pc, #100]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800712a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800712e:	6113      	str	r3, [r2, #16]
 8007130:	4b17      	ldr	r3, [pc, #92]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007132:	691a      	ldr	r2, [r3, #16]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800713a:	4915      	ldr	r1, [pc, #84]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800713c:	4313      	orrs	r3, r2
 800713e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	da08      	bge.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007148:	4b11      	ldr	r3, [pc, #68]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800714a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007154:	490e      	ldr	r1, [pc, #56]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007156:	4313      	orrs	r3, r2
 8007158:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d009      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007166:	4b0a      	ldr	r3, [pc, #40]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007174:	4906      	ldr	r1, [pc, #24]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007176:	4313      	orrs	r3, r2
 8007178:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800717a:	7dbb      	ldrb	r3, [r7, #22]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	e000      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	58024400 	.word	0x58024400

08007194 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007198:	f7ff f85a 	bl	8006250 <HAL_RCC_GetHCLKFreq>
 800719c:	4602      	mov	r2, r0
 800719e:	4b06      	ldr	r3, [pc, #24]	; (80071b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	091b      	lsrs	r3, r3, #4
 80071a4:	f003 0307 	and.w	r3, r3, #7
 80071a8:	4904      	ldr	r1, [pc, #16]	; (80071bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80071aa:	5ccb      	ldrb	r3, [r1, r3]
 80071ac:	f003 031f 	and.w	r3, r3, #31
 80071b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	58024400 	.word	0x58024400
 80071bc:	0800f654 	.word	0x0800f654

080071c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b089      	sub	sp, #36	; 0x24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071c8:	4ba1      	ldr	r3, [pc, #644]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071cc:	f003 0303 	and.w	r3, r3, #3
 80071d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80071d2:	4b9f      	ldr	r3, [pc, #636]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d6:	0b1b      	lsrs	r3, r3, #12
 80071d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80071de:	4b9c      	ldr	r3, [pc, #624]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e2:	091b      	lsrs	r3, r3, #4
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80071ea:	4b99      	ldr	r3, [pc, #612]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ee:	08db      	lsrs	r3, r3, #3
 80071f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	fb02 f303 	mul.w	r3, r2, r3
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 8111 	beq.w	8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	2b02      	cmp	r3, #2
 8007212:	f000 8083 	beq.w	800731c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	2b02      	cmp	r3, #2
 800721a:	f200 80a1 	bhi.w	8007360 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d056      	beq.n	80072d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800722a:	e099      	b.n	8007360 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800722c:	4b88      	ldr	r3, [pc, #544]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0320 	and.w	r3, r3, #32
 8007234:	2b00      	cmp	r3, #0
 8007236:	d02d      	beq.n	8007294 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007238:	4b85      	ldr	r3, [pc, #532]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	08db      	lsrs	r3, r3, #3
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	4a84      	ldr	r2, [pc, #528]	; (8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007244:	fa22 f303 	lsr.w	r3, r2, r3
 8007248:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	ee07 3a90 	vmov	s15, r3
 8007250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007262:	4b7b      	ldr	r3, [pc, #492]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007272:	ed97 6a03 	vldr	s12, [r7, #12]
 8007276:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800727a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800727e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007292:	e087      	b.n	80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800745c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80072a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a6:	4b6a      	ldr	r3, [pc, #424]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072d6:	e065      	b.n	80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007460 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ea:	4b59      	ldr	r3, [pc, #356]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80072fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800730e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007316:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800731a:	e043      	b.n	80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007326:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800732a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800732e:	4b48      	ldr	r3, [pc, #288]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800733e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007342:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800734a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800734e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800735e:	e021      	b.n	80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007460 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800736e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007372:	4b37      	ldr	r3, [pc, #220]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007382:	ed97 6a03 	vldr	s12, [r7, #12]
 8007386:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800738a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800738e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800739a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80073a4:	4b2a      	ldr	r3, [pc, #168]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a8:	0a5b      	lsrs	r3, r3, #9
 80073aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073be:	edd7 6a07 	vldr	s13, [r7, #28]
 80073c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ca:	ee17 2a90 	vmov	r2, s15
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80073d2:	4b1f      	ldr	r3, [pc, #124]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d6:	0c1b      	lsrs	r3, r3, #16
 80073d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073dc:	ee07 3a90 	vmov	s15, r3
 80073e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80073f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073f8:	ee17 2a90 	vmov	r2, s15
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007400:	4b13      	ldr	r3, [pc, #76]	; (8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007404:	0e1b      	lsrs	r3, r3, #24
 8007406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007412:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007416:	ee37 7a87 	vadd.f32	s14, s15, s14
 800741a:	edd7 6a07 	vldr	s13, [r7, #28]
 800741e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007426:	ee17 2a90 	vmov	r2, s15
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800742e:	e008      	b.n	8007442 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	609a      	str	r2, [r3, #8]
}
 8007442:	bf00      	nop
 8007444:	3724      	adds	r7, #36	; 0x24
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	58024400 	.word	0x58024400
 8007454:	03d09000 	.word	0x03d09000
 8007458:	46000000 	.word	0x46000000
 800745c:	4c742400 	.word	0x4c742400
 8007460:	4a742400 	.word	0x4a742400
 8007464:	4af42400 	.word	0x4af42400

08007468 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007468:	b480      	push	{r7}
 800746a:	b089      	sub	sp, #36	; 0x24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007470:	4ba1      	ldr	r3, [pc, #644]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007474:	f003 0303 	and.w	r3, r3, #3
 8007478:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800747a:	4b9f      	ldr	r3, [pc, #636]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800747c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747e:	0d1b      	lsrs	r3, r3, #20
 8007480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007484:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007486:	4b9c      	ldr	r3, [pc, #624]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748a:	0a1b      	lsrs	r3, r3, #8
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007492:	4b99      	ldr	r3, [pc, #612]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007496:	08db      	lsrs	r3, r3, #3
 8007498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	fb02 f303 	mul.w	r3, r2, r3
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 8111 	beq.w	80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	f000 8083 	beq.w	80075c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	f200 80a1 	bhi.w	8007608 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d056      	beq.n	8007580 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80074d2:	e099      	b.n	8007608 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074d4:	4b88      	ldr	r3, [pc, #544]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0320 	and.w	r3, r3, #32
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d02d      	beq.n	800753c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074e0:	4b85      	ldr	r3, [pc, #532]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	08db      	lsrs	r3, r3, #3
 80074e6:	f003 0303 	and.w	r3, r3, #3
 80074ea:	4a84      	ldr	r2, [pc, #528]	; (80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80074ec:	fa22 f303 	lsr.w	r3, r2, r3
 80074f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	ee07 3a90 	vmov	s15, r3
 80074f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750a:	4b7b      	ldr	r3, [pc, #492]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751a:	ed97 6a03 	vldr	s12, [r7, #12]
 800751e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800752e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007536:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800753a:	e087      	b.n	800764c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	ee07 3a90 	vmov	s15, r3
 8007542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007546:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007704 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800754a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800754e:	4b6a      	ldr	r3, [pc, #424]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800755e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007562:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800756e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800757e:	e065      	b.n	800764c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007708 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800758e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007592:	4b59      	ldr	r3, [pc, #356]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075c2:	e043      	b.n	800764c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800770c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80075d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075d6:	4b48      	ldr	r3, [pc, #288]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075de:	ee07 3a90 	vmov	s15, r3
 80075e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007602:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007606:	e021      	b.n	800764c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007612:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007708 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800761a:	4b37      	ldr	r3, [pc, #220]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007622:	ee07 3a90 	vmov	s15, r3
 8007626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762a:	ed97 6a03 	vldr	s12, [r7, #12]
 800762e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800763a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800763e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007646:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800764a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800764c:	4b2a      	ldr	r3, [pc, #168]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800764e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007650:	0a5b      	lsrs	r3, r3, #9
 8007652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007662:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007666:	edd7 6a07 	vldr	s13, [r7, #28]
 800766a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800766e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007672:	ee17 2a90 	vmov	r2, s15
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800767a:	4b1f      	ldr	r3, [pc, #124]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	0c1b      	lsrs	r3, r3, #16
 8007680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007684:	ee07 3a90 	vmov	s15, r3
 8007688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007690:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007694:	edd7 6a07 	vldr	s13, [r7, #28]
 8007698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800769c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076a0:	ee17 2a90 	vmov	r2, s15
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80076a8:	4b13      	ldr	r3, [pc, #76]	; (80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ac:	0e1b      	lsrs	r3, r3, #24
 80076ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80076c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076ce:	ee17 2a90 	vmov	r2, s15
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80076d6:	e008      	b.n	80076ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	609a      	str	r2, [r3, #8]
}
 80076ea:	bf00      	nop
 80076ec:	3724      	adds	r7, #36	; 0x24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	58024400 	.word	0x58024400
 80076fc:	03d09000 	.word	0x03d09000
 8007700:	46000000 	.word	0x46000000
 8007704:	4c742400 	.word	0x4c742400
 8007708:	4a742400 	.word	0x4a742400
 800770c:	4af42400 	.word	0x4af42400

08007710 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800771e:	4b53      	ldr	r3, [pc, #332]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007722:	f003 0303 	and.w	r3, r3, #3
 8007726:	2b03      	cmp	r3, #3
 8007728:	d101      	bne.n	800772e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e099      	b.n	8007862 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800772e:	4b4f      	ldr	r3, [pc, #316]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a4e      	ldr	r2, [pc, #312]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007734:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800773a:	f7fb f9f1 	bl	8002b20 <HAL_GetTick>
 800773e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007740:	e008      	b.n	8007754 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007742:	f7fb f9ed 	bl	8002b20 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d901      	bls.n	8007754 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e086      	b.n	8007862 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007754:	4b45      	ldr	r3, [pc, #276]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1f0      	bne.n	8007742 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007760:	4b42      	ldr	r3, [pc, #264]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007764:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	031b      	lsls	r3, r3, #12
 800776e:	493f      	ldr	r1, [pc, #252]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007770:	4313      	orrs	r3, r2
 8007772:	628b      	str	r3, [r1, #40]	; 0x28
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	3b01      	subs	r3, #1
 800777a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	3b01      	subs	r3, #1
 8007784:	025b      	lsls	r3, r3, #9
 8007786:	b29b      	uxth	r3, r3
 8007788:	431a      	orrs	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	3b01      	subs	r3, #1
 8007790:	041b      	lsls	r3, r3, #16
 8007792:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007796:	431a      	orrs	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	3b01      	subs	r3, #1
 800779e:	061b      	lsls	r3, r3, #24
 80077a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80077a4:	4931      	ldr	r1, [pc, #196]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80077aa:	4b30      	ldr	r3, [pc, #192]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	492d      	ldr	r1, [pc, #180]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80077bc:	4b2b      	ldr	r3, [pc, #172]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c0:	f023 0220 	bic.w	r2, r3, #32
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	4928      	ldr	r1, [pc, #160]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80077ce:	4b27      	ldr	r3, [pc, #156]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d2:	4a26      	ldr	r2, [pc, #152]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077d4:	f023 0310 	bic.w	r3, r3, #16
 80077d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077da:	4b24      	ldr	r3, [pc, #144]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077de:	4b24      	ldr	r3, [pc, #144]	; (8007870 <RCCEx_PLL2_Config+0x160>)
 80077e0:	4013      	ands	r3, r2
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	69d2      	ldr	r2, [r2, #28]
 80077e6:	00d2      	lsls	r2, r2, #3
 80077e8:	4920      	ldr	r1, [pc, #128]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80077ee:	4b1f      	ldr	r3, [pc, #124]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f2:	4a1e      	ldr	r2, [pc, #120]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 80077f4:	f043 0310 	orr.w	r3, r3, #16
 80077f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d106      	bne.n	800780e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007800:	4b1a      	ldr	r3, [pc, #104]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007804:	4a19      	ldr	r2, [pc, #100]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007806:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800780a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800780c:	e00f      	b.n	800782e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d106      	bne.n	8007822 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007814:	4b15      	ldr	r3, [pc, #84]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	4a14      	ldr	r2, [pc, #80]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 800781a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800781e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007820:	e005      	b.n	800782e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007822:	4b12      	ldr	r3, [pc, #72]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007826:	4a11      	ldr	r2, [pc, #68]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007828:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800782c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800782e:	4b0f      	ldr	r3, [pc, #60]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a0e      	ldr	r2, [pc, #56]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007834:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800783a:	f7fb f971 	bl	8002b20 <HAL_GetTick>
 800783e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007840:	e008      	b.n	8007854 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007842:	f7fb f96d 	bl	8002b20 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	2b02      	cmp	r3, #2
 800784e:	d901      	bls.n	8007854 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e006      	b.n	8007862 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007854:	4b05      	ldr	r3, [pc, #20]	; (800786c <RCCEx_PLL2_Config+0x15c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d0f0      	beq.n	8007842 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007860:	7bfb      	ldrb	r3, [r7, #15]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	58024400 	.word	0x58024400
 8007870:	ffff0007 	.word	0xffff0007

08007874 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007882:	4b53      	ldr	r3, [pc, #332]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007886:	f003 0303 	and.w	r3, r3, #3
 800788a:	2b03      	cmp	r3, #3
 800788c:	d101      	bne.n	8007892 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e099      	b.n	80079c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007892:	4b4f      	ldr	r3, [pc, #316]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a4e      	ldr	r2, [pc, #312]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800789c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800789e:	f7fb f93f 	bl	8002b20 <HAL_GetTick>
 80078a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078a4:	e008      	b.n	80078b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80078a6:	f7fb f93b 	bl	8002b20 <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d901      	bls.n	80078b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e086      	b.n	80079c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078b8:	4b45      	ldr	r3, [pc, #276]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1f0      	bne.n	80078a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80078c4:	4b42      	ldr	r3, [pc, #264]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 80078c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	051b      	lsls	r3, r3, #20
 80078d2:	493f      	ldr	r1, [pc, #252]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	628b      	str	r3, [r1, #40]	; 0x28
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	3b01      	subs	r3, #1
 80078de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	3b01      	subs	r3, #1
 80078e8:	025b      	lsls	r3, r3, #9
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	431a      	orrs	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	3b01      	subs	r3, #1
 80078f4:	041b      	lsls	r3, r3, #16
 80078f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80078fa:	431a      	orrs	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	3b01      	subs	r3, #1
 8007902:	061b      	lsls	r3, r3, #24
 8007904:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007908:	4931      	ldr	r1, [pc, #196]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 800790a:	4313      	orrs	r3, r2
 800790c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800790e:	4b30      	ldr	r3, [pc, #192]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007912:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	492d      	ldr	r1, [pc, #180]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 800791c:	4313      	orrs	r3, r2
 800791e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007920:	4b2b      	ldr	r3, [pc, #172]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007924:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	4928      	ldr	r1, [pc, #160]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 800792e:	4313      	orrs	r3, r2
 8007930:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007932:	4b27      	ldr	r3, [pc, #156]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	4a26      	ldr	r2, [pc, #152]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800793c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800793e:	4b24      	ldr	r3, [pc, #144]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007942:	4b24      	ldr	r3, [pc, #144]	; (80079d4 <RCCEx_PLL3_Config+0x160>)
 8007944:	4013      	ands	r3, r2
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	69d2      	ldr	r2, [r2, #28]
 800794a:	00d2      	lsls	r2, r2, #3
 800794c:	4920      	ldr	r1, [pc, #128]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 800794e:	4313      	orrs	r3, r2
 8007950:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007952:	4b1f      	ldr	r3, [pc, #124]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	4a1e      	ldr	r2, [pc, #120]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800795c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d106      	bne.n	8007972 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007964:	4b1a      	ldr	r3, [pc, #104]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	4a19      	ldr	r2, [pc, #100]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 800796a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800796e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007970:	e00f      	b.n	8007992 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d106      	bne.n	8007986 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007978:	4b15      	ldr	r3, [pc, #84]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 800797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797c:	4a14      	ldr	r2, [pc, #80]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 800797e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007982:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007984:	e005      	b.n	8007992 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007986:	4b12      	ldr	r3, [pc, #72]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	4a11      	ldr	r2, [pc, #68]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 800798c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007990:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007992:	4b0f      	ldr	r3, [pc, #60]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a0e      	ldr	r2, [pc, #56]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 8007998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800799c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800799e:	f7fb f8bf 	bl	8002b20 <HAL_GetTick>
 80079a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079a4:	e008      	b.n	80079b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80079a6:	f7fb f8bb 	bl	8002b20 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d901      	bls.n	80079b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e006      	b.n	80079c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079b8:	4b05      	ldr	r3, [pc, #20]	; (80079d0 <RCCEx_PLL3_Config+0x15c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d0f0      	beq.n	80079a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	58024400 	.word	0x58024400
 80079d4:	ffff0007 	.word	0xffff0007

080079d8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d067      	beq.n	8007aba <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d106      	bne.n	8007a04 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7fa fc1c 	bl	800223c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	22ca      	movs	r2, #202	; 0xca
 8007a12:	625a      	str	r2, [r3, #36]	; 0x24
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2253      	movs	r2, #83	; 0x53
 8007a1a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f879 	bl	8007b14 <RTC_EnterInitMode>
 8007a22:	4603      	mov	r3, r0
 8007a24:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d13b      	bne.n	8007aa4 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6899      	ldr	r1, [r3, #8]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	4b23      	ldr	r3, [pc, #140]	; (8007ac4 <HAL_RTC_Init+0xec>)
 8007a38:	400b      	ands	r3, r1
 8007a3a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6899      	ldr	r1, [r3, #8]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	431a      	orrs	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	0419      	lsls	r1, r3, #16
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	68da      	ldr	r2, [r3, #12]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f885 	bl	8007b7c <RTC_ExitInitMode>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d113      	bne.n	8007aa4 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0203 	bic.w	r2, r2, #3
 8007a8a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	69da      	ldr	r2, [r3, #28]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	22ff      	movs	r2, #255	; 0xff
 8007aaa:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d103      	bne.n	8007aba <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	ff8fffbf 	.word	0xff8fffbf

08007ac8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007ade:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8007ae0:	f7fb f81e 	bl	8002b20 <HAL_GetTick>
 8007ae4:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007ae6:	e009      	b.n	8007afc <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ae8:	f7fb f81a 	bl	8002b20 <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007af6:	d901      	bls.n	8007afc <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e007      	b.n	8007b0c <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f003 0320 	and.w	r3, r3, #32
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0ee      	beq.n	8007ae8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d120      	bne.n	8007b70 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f04f 32ff 	mov.w	r2, #4294967295
 8007b36:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007b38:	f7fa fff2 	bl	8002b20 <HAL_GetTick>
 8007b3c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007b3e:	e00d      	b.n	8007b5c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007b40:	f7fa ffee 	bl	8002b20 <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b4e:	d905      	bls.n	8007b5c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2203      	movs	r2, #3
 8007b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d102      	bne.n	8007b70 <RTC_EnterInitMode+0x5c>
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
 8007b6c:	2b03      	cmp	r3, #3
 8007b6e:	d1e7      	bne.n	8007b40 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8007b88:	4b1a      	ldr	r3, [pc, #104]	; (8007bf4 <RTC_ExitInitMode+0x78>)
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	4a19      	ldr	r2, [pc, #100]	; (8007bf4 <RTC_ExitInitMode+0x78>)
 8007b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b92:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007b94:	4b17      	ldr	r3, [pc, #92]	; (8007bf4 <RTC_ExitInitMode+0x78>)
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f003 0320 	and.w	r3, r3, #32
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10c      	bne.n	8007bba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7ff ff91 	bl	8007ac8 <HAL_RTC_WaitForSynchro>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d01e      	beq.n	8007bea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2203      	movs	r2, #3
 8007bb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	73fb      	strb	r3, [r7, #15]
 8007bb8:	e017      	b.n	8007bea <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007bba:	4b0e      	ldr	r3, [pc, #56]	; (8007bf4 <RTC_ExitInitMode+0x78>)
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	4a0d      	ldr	r2, [pc, #52]	; (8007bf4 <RTC_ExitInitMode+0x78>)
 8007bc0:	f023 0320 	bic.w	r3, r3, #32
 8007bc4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7ff ff7e 	bl	8007ac8 <HAL_RTC_WaitForSynchro>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d005      	beq.n	8007bde <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2203      	movs	r2, #3
 8007bd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007bde:	4b05      	ldr	r3, [pc, #20]	; (8007bf4 <RTC_ExitInitMode+0x78>)
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	4a04      	ldr	r2, [pc, #16]	; (8007bf4 <RTC_ExitInitMode+0x78>)
 8007be4:	f043 0320 	orr.w	r3, r3, #32
 8007be8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	58004000 	.word	0x58004000

08007bf8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d101      	bne.n	8007c12 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007c0e:	2302      	movs	r3, #2
 8007c10:	e07b      	b.n	8007d0a <HAL_RTCEx_SetWakeUpTimer_IT+0x112>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	22ca      	movs	r2, #202	; 0xca
 8007c28:	625a      	str	r2, [r3, #36]	; 0x24
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2253      	movs	r2, #83	; 0x53
 8007c30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8007c32:	4b38      	ldr	r3, [pc, #224]	; (8007d14 <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	4a37      	ldr	r2, [pc, #220]	; (8007d14 <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 8007c38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c3c:	6093      	str	r3, [r2, #8]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
  counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
  calendar initialization mode. */
#if defined(RTC_ISR_INITF)
  if (READ_BIT(RTC->ISR, RTC_ISR_INITF) == 0U)
 8007c3e:	4b35      	ldr	r3, [pc, #212]	; (8007d14 <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d120      	bne.n	8007c8c <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
#endif /* RTC_ISR_INITF */
#if defined(RTC_ICSR_INITF)
    if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
#endif /* RTC_ICSR_INITF */
    {
      tickstart = HAL_GetTick();
 8007c4a:	f7fa ff69 	bl	8002b20 <HAL_GetTick>
 8007c4e:	6178      	str	r0, [r7, #20]

#if defined(RTC_ICSR_WUTWF)
      while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_WUTWF) == 0U)
#endif /* RTC_ICSR_WUTWF */
#if defined(RTC_ISR_WUTWF)
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007c50:	e015      	b.n	8007c7e <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
#endif /* RTC_ISR_WUTWF */
        {
          if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c52:	f7fa ff65 	bl	8002b20 <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c60:	d90d      	bls.n	8007c7e <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
          {
            /* Enable the write protection for RTC registers */
            __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	22ff      	movs	r2, #255	; 0xff
 8007c68:	625a      	str	r2, [r3, #36]	; 0x24

            hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2203      	movs	r2, #3
 8007c6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

            /* Process Unlocked */
            __HAL_UNLOCK(hrtc);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e045      	b.n	8007d0a <HAL_RTCEx_SetWakeUpTimer_IT+0x112>
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d0e2      	beq.n	8007c52 <HAL_RTCEx_SetWakeUpTimer_IT+0x5a>
          }
        }
    }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits and configure the clock source in CR register */
  {
    uint32_t CR_tmp = hrtc->Instance->CR;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	613b      	str	r3, [r7, #16]
    CR_tmp &= (uint32_t)~RTC_CR_WUCKSEL;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f023 0307 	bic.w	r3, r3, #7
 8007ca2:	613b      	str	r3, [r7, #16]
    CR_tmp |= (uint32_t)WakeUpClock;
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	613b      	str	r3, [r7, #16]
    hrtc->Instance->CR = CR_tmp;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	609a      	str	r2, [r3, #8]
  else
  {
    __HAL_RTC_WAKEUPTIMER_EXTID2_ENABLE_IT();
  }
#else /* SINGLE_CORE */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007cb4:	4b18      	ldr	r3, [pc, #96]	; (8007d18 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a17      	ldr	r2, [pc, #92]	; (8007d18 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>)
 8007cba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cbe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cce:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689a      	ldr	r2, [r3, #8]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cde:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689a      	ldr	r2, [r3, #8]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cee:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	22ff      	movs	r2, #255	; 0xff
 8007cf6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3718      	adds	r7, #24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	58004000 	.word	0x58004000
 8007d18:	58000080 	.word	0x58000080

08007d1c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d101      	bne.n	8007d32 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8007d2e:	2302      	movs	r3, #2
 8007d30:	e04d      	b.n	8007dce <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	22ca      	movs	r2, #202	; 0xca
 8007d48:	625a      	str	r2, [r3, #36]	; 0x24
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2253      	movs	r2, #83	; 0x53
 8007d50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	689a      	ldr	r2, [r3, #8]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d60:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d70:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8007d72:	f7fa fed5 	bl	8002b20 <HAL_GetTick>
 8007d76:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  #if defined(RTC_ICSR_WUTWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_WUTWF) == 0U)
  #endif /* RTC_ICSR_WUTWF */
  #if defined(RTC_ISR_WUTWF)
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007d78:	e015      	b.n	8007da6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  #endif /* RTC_ISR_WUTWF */
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d7a:	f7fa fed1 	bl	8002b20 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d88:	d90d      	bls.n	8007da6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	22ff      	movs	r2, #255	; 0xff
 8007d90:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2203      	movs	r2, #3
 8007d96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e013      	b.n	8007dce <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f003 0304 	and.w	r3, r3, #4
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0e2      	beq.n	8007d7a <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	22ff      	movs	r2, #255	; 0xff
 8007dba:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  else
  {
    __HAL_RTC_WAKEUPTIMER_EXTID2_CLEAR_FLAG();
  }
#else /* SINGLE_CORE */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8007de0:	4b0f      	ldr	r3, [pc, #60]	; (8007e20 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8007de2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007de6:	609a      	str	r2, [r3, #8]
  #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }
#endif /* RTC_MISR_WUTMF */
#if defined(RTC_ISR_WUTF)
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00b      	beq.n	8007e0e <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007e06:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
  #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
  #else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7f9 fb7f 	bl	800150c <HAL_RTCEx_WakeUpTimerEventCallback>
  #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }
#endif /* RTC_ISR_WUTF */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8007e16:	bf00      	nop
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	58000080 	.word	0x58000080

08007e24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e042      	b.n	8007ebc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d106      	bne.n	8007e4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7fa fa2f 	bl	80022ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2224      	movs	r2, #36	; 0x24
 8007e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0201 	bic.w	r2, r2, #1
 8007e64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fcd6 	bl	8008818 <UART_SetConfig>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d101      	bne.n	8007e76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e022      	b.n	8007ebc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d002      	beq.n	8007e84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f001 fa32 	bl	80092e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	689a      	ldr	r2, [r3, #8]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ea2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f042 0201 	orr.w	r2, r2, #1
 8007eb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 fab9 	bl	800942c <UART_CheckIdleState>
 8007eba:	4603      	mov	r3, r0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08a      	sub	sp, #40	; 0x28
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eda:	2b20      	cmp	r3, #32
 8007edc:	f040 8083 	bne.w	8007fe6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <HAL_UART_Transmit+0x28>
 8007ee6:	88fb      	ldrh	r3, [r7, #6]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e07b      	b.n	8007fe8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d101      	bne.n	8007efe <HAL_UART_Transmit+0x3a>
 8007efa:	2302      	movs	r3, #2
 8007efc:	e074      	b.n	8007fe8 <HAL_UART_Transmit+0x124>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2221      	movs	r2, #33	; 0x21
 8007f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f16:	f7fa fe03 	bl	8002b20 <HAL_GetTick>
 8007f1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	88fa      	ldrh	r2, [r7, #6]
 8007f20:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	88fa      	ldrh	r2, [r7, #6]
 8007f28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f34:	d108      	bne.n	8007f48 <HAL_UART_Transmit+0x84>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d104      	bne.n	8007f48 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	61bb      	str	r3, [r7, #24]
 8007f46:	e003      	b.n	8007f50 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007f58:	e02c      	b.n	8007fb4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	2200      	movs	r2, #0
 8007f62:	2180      	movs	r1, #128	; 0x80
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f001 faac 	bl	80094c2 <UART_WaitOnFlagUntilTimeout>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e039      	b.n	8007fe8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10b      	bne.n	8007f92 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	3302      	adds	r3, #2
 8007f8e:	61bb      	str	r3, [r7, #24]
 8007f90:	e007      	b.n	8007fa2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	781a      	ldrb	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	3b01      	subs	r3, #1
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1cc      	bne.n	8007f5a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2140      	movs	r1, #64	; 0x40
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f001 fa79 	bl	80094c2 <UART_WaitOnFlagUntilTimeout>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e006      	b.n	8007fe8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e000      	b.n	8007fe8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007fe6:	2302      	movs	r3, #2
  }
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3720      	adds	r7, #32
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08a      	sub	sp, #40	; 0x28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008004:	2b20      	cmp	r3, #32
 8008006:	d142      	bne.n	800808e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <HAL_UART_Receive_IT+0x24>
 800800e:	88fb      	ldrh	r3, [r7, #6]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e03b      	b.n	8008090 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800801e:	2b01      	cmp	r3, #1
 8008020:	d101      	bne.n	8008026 <HAL_UART_Receive_IT+0x36>
 8008022:	2302      	movs	r3, #2
 8008024:	e034      	b.n	8008090 <HAL_UART_Receive_IT+0xa0>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a17      	ldr	r2, [pc, #92]	; (8008098 <HAL_UART_Receive_IT+0xa8>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d01f      	beq.n	800807e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d018      	beq.n	800807e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	e853 3f00 	ldrex	r3, [r3]
 8008058:	613b      	str	r3, [r7, #16]
   return(result);
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806a:	623b      	str	r3, [r7, #32]
 800806c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806e:	69f9      	ldr	r1, [r7, #28]
 8008070:	6a3a      	ldr	r2, [r7, #32]
 8008072:	e841 2300 	strex	r3, r2, [r1]
 8008076:	61bb      	str	r3, [r7, #24]
   return(result);
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1e6      	bne.n	800804c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800807e:	88fb      	ldrh	r3, [r7, #6]
 8008080:	461a      	mov	r2, r3
 8008082:	68b9      	ldr	r1, [r7, #8]
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f001 fae5 	bl	8009654 <UART_Start_Receive_IT>
 800808a:	4603      	mov	r3, r0
 800808c:	e000      	b.n	8008090 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800808e:	2302      	movs	r3, #2
  }
}
 8008090:	4618      	mov	r0, r3
 8008092:	3728      	adds	r7, #40	; 0x28
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	58000c00 	.word	0x58000c00

0800809c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b0ba      	sub	sp, #232	; 0xe8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80080c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80080ca:	4013      	ands	r3, r2
 80080cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80080d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d11b      	bne.n	8008110 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080dc:	f003 0320 	and.w	r3, r3, #32
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d015      	beq.n	8008110 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080e8:	f003 0320 	and.w	r3, r3, #32
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d105      	bne.n	80080fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d009      	beq.n	8008110 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 835a 	beq.w	80087ba <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	4798      	blx	r3
      }
      return;
 800810e:	e354      	b.n	80087ba <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008110:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 811f 	beq.w	8008358 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800811a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800811e:	4b8b      	ldr	r3, [pc, #556]	; (800834c <HAL_UART_IRQHandler+0x2b0>)
 8008120:	4013      	ands	r3, r2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d106      	bne.n	8008134 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008126:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800812a:	4b89      	ldr	r3, [pc, #548]	; (8008350 <HAL_UART_IRQHandler+0x2b4>)
 800812c:	4013      	ands	r3, r2
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 8112 	beq.w	8008358 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	2b00      	cmp	r3, #0
 800813e:	d011      	beq.n	8008164 <HAL_UART_IRQHandler+0xc8>
 8008140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00b      	beq.n	8008164 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2201      	movs	r2, #1
 8008152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800815a:	f043 0201 	orr.w	r2, r3, #1
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008168:	f003 0302 	and.w	r3, r3, #2
 800816c:	2b00      	cmp	r3, #0
 800816e:	d011      	beq.n	8008194 <HAL_UART_IRQHandler+0xf8>
 8008170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008174:	f003 0301 	and.w	r3, r3, #1
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00b      	beq.n	8008194 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2202      	movs	r2, #2
 8008182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800818a:	f043 0204 	orr.w	r2, r3, #4
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008198:	f003 0304 	and.w	r3, r3, #4
 800819c:	2b00      	cmp	r3, #0
 800819e:	d011      	beq.n	80081c4 <HAL_UART_IRQHandler+0x128>
 80081a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00b      	beq.n	80081c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2204      	movs	r2, #4
 80081b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081ba:	f043 0202 	orr.w	r2, r3, #2
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c8:	f003 0308 	and.w	r3, r3, #8
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d017      	beq.n	8008200 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081d4:	f003 0320 	and.w	r3, r3, #32
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d105      	bne.n	80081e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80081dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80081e0:	4b5a      	ldr	r3, [pc, #360]	; (800834c <HAL_UART_IRQHandler+0x2b0>)
 80081e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00b      	beq.n	8008200 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2208      	movs	r2, #8
 80081ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081f6:	f043 0208 	orr.w	r2, r3, #8
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008208:	2b00      	cmp	r3, #0
 800820a:	d012      	beq.n	8008232 <HAL_UART_IRQHandler+0x196>
 800820c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008210:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00c      	beq.n	8008232 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008220:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008228:	f043 0220 	orr.w	r2, r3, #32
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 82c0 	beq.w	80087be <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800823e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008242:	f003 0320 	and.w	r3, r3, #32
 8008246:	2b00      	cmp	r3, #0
 8008248:	d013      	beq.n	8008272 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800824a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b00      	cmp	r3, #0
 8008254:	d105      	bne.n	8008262 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800825a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d007      	beq.n	8008272 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008278:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008286:	2b40      	cmp	r3, #64	; 0x40
 8008288:	d005      	beq.n	8008296 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800828a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800828e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008292:	2b00      	cmp	r3, #0
 8008294:	d04f      	beq.n	8008336 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f001 fb06 	bl	80098a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a6:	2b40      	cmp	r3, #64	; 0x40
 80082a8:	d141      	bne.n	800832e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3308      	adds	r3, #8
 80082b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082b8:	e853 3f00 	ldrex	r3, [r3]
 80082bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3308      	adds	r3, #8
 80082d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80082e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082e6:	e841 2300 	strex	r3, r2, [r1]
 80082ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80082ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1d9      	bne.n	80082aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d013      	beq.n	8008326 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008302:	4a14      	ldr	r2, [pc, #80]	; (8008354 <HAL_UART_IRQHandler+0x2b8>)
 8008304:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800830a:	4618      	mov	r0, r3
 800830c:	f7fb f8a6 	bl	800345c <HAL_DMA_Abort_IT>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d017      	beq.n	8008346 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800831a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008320:	4610      	mov	r0, r2
 8008322:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008324:	e00f      	b.n	8008346 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fa60 	bl	80087ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800832c:	e00b      	b.n	8008346 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fa5c 	bl	80087ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008334:	e007      	b.n	8008346 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fa58 	bl	80087ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008344:	e23b      	b.n	80087be <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008346:	bf00      	nop
    return;
 8008348:	e239      	b.n	80087be <HAL_UART_IRQHandler+0x722>
 800834a:	bf00      	nop
 800834c:	10000001 	.word	0x10000001
 8008350:	04000120 	.word	0x04000120
 8008354:	08009975 	.word	0x08009975

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800835c:	2b01      	cmp	r3, #1
 800835e:	f040 81ce 	bne.w	80086fe <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008366:	f003 0310 	and.w	r3, r3, #16
 800836a:	2b00      	cmp	r3, #0
 800836c:	f000 81c7 	beq.w	80086fe <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008374:	f003 0310 	and.w	r3, r3, #16
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 81c0 	beq.w	80086fe <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2210      	movs	r2, #16
 8008384:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008390:	2b40      	cmp	r3, #64	; 0x40
 8008392:	f040 813b 	bne.w	800860c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a8b      	ldr	r2, [pc, #556]	; (80085cc <HAL_UART_IRQHandler+0x530>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d059      	beq.n	8008456 <HAL_UART_IRQHandler+0x3ba>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a89      	ldr	r2, [pc, #548]	; (80085d0 <HAL_UART_IRQHandler+0x534>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d053      	beq.n	8008456 <HAL_UART_IRQHandler+0x3ba>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a87      	ldr	r2, [pc, #540]	; (80085d4 <HAL_UART_IRQHandler+0x538>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d04d      	beq.n	8008456 <HAL_UART_IRQHandler+0x3ba>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a85      	ldr	r2, [pc, #532]	; (80085d8 <HAL_UART_IRQHandler+0x53c>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d047      	beq.n	8008456 <HAL_UART_IRQHandler+0x3ba>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a83      	ldr	r2, [pc, #524]	; (80085dc <HAL_UART_IRQHandler+0x540>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d041      	beq.n	8008456 <HAL_UART_IRQHandler+0x3ba>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a81      	ldr	r2, [pc, #516]	; (80085e0 <HAL_UART_IRQHandler+0x544>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d03b      	beq.n	8008456 <HAL_UART_IRQHandler+0x3ba>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a7f      	ldr	r2, [pc, #508]	; (80085e4 <HAL_UART_IRQHandler+0x548>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d035      	beq.n	8008456 <HAL_UART_IRQHandler+0x3ba>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a7d      	ldr	r2, [pc, #500]	; (80085e8 <HAL_UART_IRQHandler+0x54c>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d02f      	beq.n	8008456 <HAL_UART_IRQHandler+0x3ba>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a7b      	ldr	r2, [pc, #492]	; (80085ec <HAL_UART_IRQHandler+0x550>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d029      	beq.n	8008456 <HAL_UART_IRQHandler+0x3ba>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a79      	ldr	r2, [pc, #484]	; (80085f0 <HAL_UART_IRQHandler+0x554>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d023      	beq.n	8008456 <HAL_UART_IRQHandler+0x3ba>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a77      	ldr	r2, [pc, #476]	; (80085f4 <HAL_UART_IRQHandler+0x558>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d01d      	beq.n	8008456 <HAL_UART_IRQHandler+0x3ba>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a75      	ldr	r2, [pc, #468]	; (80085f8 <HAL_UART_IRQHandler+0x55c>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d017      	beq.n	8008456 <HAL_UART_IRQHandler+0x3ba>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a73      	ldr	r2, [pc, #460]	; (80085fc <HAL_UART_IRQHandler+0x560>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d011      	beq.n	8008456 <HAL_UART_IRQHandler+0x3ba>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a71      	ldr	r2, [pc, #452]	; (8008600 <HAL_UART_IRQHandler+0x564>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d00b      	beq.n	8008456 <HAL_UART_IRQHandler+0x3ba>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a6f      	ldr	r2, [pc, #444]	; (8008604 <HAL_UART_IRQHandler+0x568>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d005      	beq.n	8008456 <HAL_UART_IRQHandler+0x3ba>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a6d      	ldr	r2, [pc, #436]	; (8008608 <HAL_UART_IRQHandler+0x56c>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d105      	bne.n	8008462 <HAL_UART_IRQHandler+0x3c6>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	b29b      	uxth	r3, r3
 8008460:	e004      	b.n	800846c <HAL_UART_IRQHandler+0x3d0>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	b29b      	uxth	r3, r3
 800846c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008470:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 81a4 	beq.w	80087c2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008480:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008484:	429a      	cmp	r2, r3
 8008486:	f080 819c 	bcs.w	80087c2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008490:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008498:	69db      	ldr	r3, [r3, #28]
 800849a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800849e:	f000 8086 	beq.w	80085ae <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084ae:	e853 3f00 	ldrex	r3, [r3]
 80084b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80084b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	461a      	mov	r2, r3
 80084c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80084cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80084d0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1da      	bne.n	80084a2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3308      	adds	r3, #8
 80084f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084f6:	e853 3f00 	ldrex	r3, [r3]
 80084fa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084fe:	f023 0301 	bic.w	r3, r3, #1
 8008502:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3308      	adds	r3, #8
 800850c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008510:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008514:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008516:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008518:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800851c:	e841 2300 	strex	r3, r2, [r1]
 8008520:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008522:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e1      	bne.n	80084ec <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3308      	adds	r3, #8
 800852e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008530:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008532:	e853 3f00 	ldrex	r3, [r3]
 8008536:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800853a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800853e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3308      	adds	r3, #8
 8008548:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800854c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800854e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008550:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008552:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008554:	e841 2300 	strex	r3, r2, [r1]
 8008558:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800855a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1e3      	bne.n	8008528 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2220      	movs	r2, #32
 8008564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008576:	e853 3f00 	ldrex	r3, [r3]
 800857a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800857c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800857e:	f023 0310 	bic.w	r3, r3, #16
 8008582:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008590:	65bb      	str	r3, [r7, #88]	; 0x58
 8008592:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008594:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008596:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008598:	e841 2300 	strex	r3, r2, [r1]
 800859c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800859e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1e4      	bne.n	800856e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7fa fc39 	bl	8002e20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	b29b      	uxth	r3, r3
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f91c 	bl	8008800 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085c8:	e0fb      	b.n	80087c2 <HAL_UART_IRQHandler+0x726>
 80085ca:	bf00      	nop
 80085cc:	40020010 	.word	0x40020010
 80085d0:	40020028 	.word	0x40020028
 80085d4:	40020040 	.word	0x40020040
 80085d8:	40020058 	.word	0x40020058
 80085dc:	40020070 	.word	0x40020070
 80085e0:	40020088 	.word	0x40020088
 80085e4:	400200a0 	.word	0x400200a0
 80085e8:	400200b8 	.word	0x400200b8
 80085ec:	40020410 	.word	0x40020410
 80085f0:	40020428 	.word	0x40020428
 80085f4:	40020440 	.word	0x40020440
 80085f8:	40020458 	.word	0x40020458
 80085fc:	40020470 	.word	0x40020470
 8008600:	40020488 	.word	0x40020488
 8008604:	400204a0 	.word	0x400204a0
 8008608:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008618:	b29b      	uxth	r3, r3
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008626:	b29b      	uxth	r3, r3
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 80cc 	beq.w	80087c6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800862e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 80c7 	beq.w	80087c6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008640:	e853 3f00 	ldrex	r3, [r3]
 8008644:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008648:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800864c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	461a      	mov	r2, r3
 8008656:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800865a:	647b      	str	r3, [r7, #68]	; 0x44
 800865c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008660:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008662:	e841 2300 	strex	r3, r2, [r1]
 8008666:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1e4      	bne.n	8008638 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3308      	adds	r3, #8
 8008674:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	e853 3f00 	ldrex	r3, [r3]
 800867c:	623b      	str	r3, [r7, #32]
   return(result);
 800867e:	6a3a      	ldr	r2, [r7, #32]
 8008680:	4b54      	ldr	r3, [pc, #336]	; (80087d4 <HAL_UART_IRQHandler+0x738>)
 8008682:	4013      	ands	r3, r2
 8008684:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	3308      	adds	r3, #8
 800868e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008692:	633a      	str	r2, [r7, #48]	; 0x30
 8008694:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008696:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800869a:	e841 2300 	strex	r3, r2, [r1]
 800869e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1e3      	bne.n	800866e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2220      	movs	r2, #32
 80086aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	e853 3f00 	ldrex	r3, [r3]
 80086c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f023 0310 	bic.w	r3, r3, #16
 80086ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	461a      	mov	r2, r3
 80086d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80086dc:	61fb      	str	r3, [r7, #28]
 80086de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e0:	69b9      	ldr	r1, [r7, #24]
 80086e2:	69fa      	ldr	r2, [r7, #28]
 80086e4:	e841 2300 	strex	r3, r2, [r1]
 80086e8:	617b      	str	r3, [r7, #20]
   return(result);
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1e4      	bne.n	80086ba <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f882 	bl	8008800 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80086fc:	e063      	b.n	80087c6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80086fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00e      	beq.n	8008728 <HAL_UART_IRQHandler+0x68c>
 800870a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800870e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d008      	beq.n	8008728 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800871e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 fdc5 	bl	800a2b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008726:	e051      	b.n	80087cc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800872c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008730:	2b00      	cmp	r3, #0
 8008732:	d014      	beq.n	800875e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800873c:	2b00      	cmp	r3, #0
 800873e:	d105      	bne.n	800874c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008744:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d008      	beq.n	800875e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008750:	2b00      	cmp	r3, #0
 8008752:	d03a      	beq.n	80087ca <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	4798      	blx	r3
    }
    return;
 800875c:	e035      	b.n	80087ca <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800875e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008766:	2b00      	cmp	r3, #0
 8008768:	d009      	beq.n	800877e <HAL_UART_IRQHandler+0x6e2>
 800876a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800876e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f001 f912 	bl	80099a0 <UART_EndTransmit_IT>
    return;
 800877c:	e026      	b.n	80087cc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800877e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d009      	beq.n	800879e <HAL_UART_IRQHandler+0x702>
 800878a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800878e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d003      	beq.n	800879e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f001 fd9e 	bl	800a2d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800879c:	e016      	b.n	80087cc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800879e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d010      	beq.n	80087cc <HAL_UART_IRQHandler+0x730>
 80087aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	da0c      	bge.n	80087cc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f001 fd86 	bl	800a2c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087b8:	e008      	b.n	80087cc <HAL_UART_IRQHandler+0x730>
      return;
 80087ba:	bf00      	nop
 80087bc:	e006      	b.n	80087cc <HAL_UART_IRQHandler+0x730>
    return;
 80087be:	bf00      	nop
 80087c0:	e004      	b.n	80087cc <HAL_UART_IRQHandler+0x730>
      return;
 80087c2:	bf00      	nop
 80087c4:	e002      	b.n	80087cc <HAL_UART_IRQHandler+0x730>
      return;
 80087c6:	bf00      	nop
 80087c8:	e000      	b.n	80087cc <HAL_UART_IRQHandler+0x730>
    return;
 80087ca:	bf00      	nop
  }
}
 80087cc:	37e8      	adds	r7, #232	; 0xe8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	effffffe 	.word	0xeffffffe

080087d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800881c:	b092      	sub	sp, #72	; 0x48
 800881e:	af00      	add	r7, sp, #0
 8008820:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	431a      	orrs	r2, r3
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	431a      	orrs	r2, r3
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	4313      	orrs	r3, r2
 800883e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	4bbe      	ldr	r3, [pc, #760]	; (8008b40 <UART_SetConfig+0x328>)
 8008848:	4013      	ands	r3, r2
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	6812      	ldr	r2, [r2, #0]
 800884e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008850:	430b      	orrs	r3, r1
 8008852:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	68da      	ldr	r2, [r3, #12]
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4ab3      	ldr	r2, [pc, #716]	; (8008b44 <UART_SetConfig+0x32c>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d004      	beq.n	8008884 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008880:	4313      	orrs	r3, r2
 8008882:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689a      	ldr	r2, [r3, #8]
 800888a:	4baf      	ldr	r3, [pc, #700]	; (8008b48 <UART_SetConfig+0x330>)
 800888c:	4013      	ands	r3, r2
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	6812      	ldr	r2, [r2, #0]
 8008892:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008894:	430b      	orrs	r3, r1
 8008896:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889e:	f023 010f 	bic.w	r1, r3, #15
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4aa6      	ldr	r2, [pc, #664]	; (8008b4c <UART_SetConfig+0x334>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d177      	bne.n	80089a8 <UART_SetConfig+0x190>
 80088b8:	4ba5      	ldr	r3, [pc, #660]	; (8008b50 <UART_SetConfig+0x338>)
 80088ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088c0:	2b28      	cmp	r3, #40	; 0x28
 80088c2:	d86d      	bhi.n	80089a0 <UART_SetConfig+0x188>
 80088c4:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <UART_SetConfig+0xb4>)
 80088c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ca:	bf00      	nop
 80088cc:	08008971 	.word	0x08008971
 80088d0:	080089a1 	.word	0x080089a1
 80088d4:	080089a1 	.word	0x080089a1
 80088d8:	080089a1 	.word	0x080089a1
 80088dc:	080089a1 	.word	0x080089a1
 80088e0:	080089a1 	.word	0x080089a1
 80088e4:	080089a1 	.word	0x080089a1
 80088e8:	080089a1 	.word	0x080089a1
 80088ec:	08008979 	.word	0x08008979
 80088f0:	080089a1 	.word	0x080089a1
 80088f4:	080089a1 	.word	0x080089a1
 80088f8:	080089a1 	.word	0x080089a1
 80088fc:	080089a1 	.word	0x080089a1
 8008900:	080089a1 	.word	0x080089a1
 8008904:	080089a1 	.word	0x080089a1
 8008908:	080089a1 	.word	0x080089a1
 800890c:	08008981 	.word	0x08008981
 8008910:	080089a1 	.word	0x080089a1
 8008914:	080089a1 	.word	0x080089a1
 8008918:	080089a1 	.word	0x080089a1
 800891c:	080089a1 	.word	0x080089a1
 8008920:	080089a1 	.word	0x080089a1
 8008924:	080089a1 	.word	0x080089a1
 8008928:	080089a1 	.word	0x080089a1
 800892c:	08008989 	.word	0x08008989
 8008930:	080089a1 	.word	0x080089a1
 8008934:	080089a1 	.word	0x080089a1
 8008938:	080089a1 	.word	0x080089a1
 800893c:	080089a1 	.word	0x080089a1
 8008940:	080089a1 	.word	0x080089a1
 8008944:	080089a1 	.word	0x080089a1
 8008948:	080089a1 	.word	0x080089a1
 800894c:	08008991 	.word	0x08008991
 8008950:	080089a1 	.word	0x080089a1
 8008954:	080089a1 	.word	0x080089a1
 8008958:	080089a1 	.word	0x080089a1
 800895c:	080089a1 	.word	0x080089a1
 8008960:	080089a1 	.word	0x080089a1
 8008964:	080089a1 	.word	0x080089a1
 8008968:	080089a1 	.word	0x080089a1
 800896c:	08008999 	.word	0x08008999
 8008970:	2301      	movs	r3, #1
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008976:	e222      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008978:	2304      	movs	r3, #4
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897e:	e21e      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008980:	2308      	movs	r3, #8
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008986:	e21a      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008988:	2310      	movs	r3, #16
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898e:	e216      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008990:	2320      	movs	r3, #32
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008996:	e212      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008998:	2340      	movs	r3, #64	; 0x40
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800899e:	e20e      	b.n	8008dbe <UART_SetConfig+0x5a6>
 80089a0:	2380      	movs	r3, #128	; 0x80
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089a6:	e20a      	b.n	8008dbe <UART_SetConfig+0x5a6>
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a69      	ldr	r2, [pc, #420]	; (8008b54 <UART_SetConfig+0x33c>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d130      	bne.n	8008a14 <UART_SetConfig+0x1fc>
 80089b2:	4b67      	ldr	r3, [pc, #412]	; (8008b50 <UART_SetConfig+0x338>)
 80089b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b6:	f003 0307 	and.w	r3, r3, #7
 80089ba:	2b05      	cmp	r3, #5
 80089bc:	d826      	bhi.n	8008a0c <UART_SetConfig+0x1f4>
 80089be:	a201      	add	r2, pc, #4	; (adr r2, 80089c4 <UART_SetConfig+0x1ac>)
 80089c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c4:	080089dd 	.word	0x080089dd
 80089c8:	080089e5 	.word	0x080089e5
 80089cc:	080089ed 	.word	0x080089ed
 80089d0:	080089f5 	.word	0x080089f5
 80089d4:	080089fd 	.word	0x080089fd
 80089d8:	08008a05 	.word	0x08008a05
 80089dc:	2300      	movs	r3, #0
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089e2:	e1ec      	b.n	8008dbe <UART_SetConfig+0x5a6>
 80089e4:	2304      	movs	r3, #4
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ea:	e1e8      	b.n	8008dbe <UART_SetConfig+0x5a6>
 80089ec:	2308      	movs	r3, #8
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089f2:	e1e4      	b.n	8008dbe <UART_SetConfig+0x5a6>
 80089f4:	2310      	movs	r3, #16
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089fa:	e1e0      	b.n	8008dbe <UART_SetConfig+0x5a6>
 80089fc:	2320      	movs	r3, #32
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a02:	e1dc      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008a04:	2340      	movs	r3, #64	; 0x40
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a0a:	e1d8      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008a0c:	2380      	movs	r3, #128	; 0x80
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a12:	e1d4      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a4f      	ldr	r2, [pc, #316]	; (8008b58 <UART_SetConfig+0x340>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d130      	bne.n	8008a80 <UART_SetConfig+0x268>
 8008a1e:	4b4c      	ldr	r3, [pc, #304]	; (8008b50 <UART_SetConfig+0x338>)
 8008a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a22:	f003 0307 	and.w	r3, r3, #7
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	d826      	bhi.n	8008a78 <UART_SetConfig+0x260>
 8008a2a:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <UART_SetConfig+0x218>)
 8008a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a30:	08008a49 	.word	0x08008a49
 8008a34:	08008a51 	.word	0x08008a51
 8008a38:	08008a59 	.word	0x08008a59
 8008a3c:	08008a61 	.word	0x08008a61
 8008a40:	08008a69 	.word	0x08008a69
 8008a44:	08008a71 	.word	0x08008a71
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a4e:	e1b6      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008a50:	2304      	movs	r3, #4
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a56:	e1b2      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008a58:	2308      	movs	r3, #8
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5e:	e1ae      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008a60:	2310      	movs	r3, #16
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a66:	e1aa      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008a68:	2320      	movs	r3, #32
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a6e:	e1a6      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008a70:	2340      	movs	r3, #64	; 0x40
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a76:	e1a2      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008a78:	2380      	movs	r3, #128	; 0x80
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a7e:	e19e      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a35      	ldr	r2, [pc, #212]	; (8008b5c <UART_SetConfig+0x344>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d130      	bne.n	8008aec <UART_SetConfig+0x2d4>
 8008a8a:	4b31      	ldr	r3, [pc, #196]	; (8008b50 <UART_SetConfig+0x338>)
 8008a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	2b05      	cmp	r3, #5
 8008a94:	d826      	bhi.n	8008ae4 <UART_SetConfig+0x2cc>
 8008a96:	a201      	add	r2, pc, #4	; (adr r2, 8008a9c <UART_SetConfig+0x284>)
 8008a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9c:	08008ab5 	.word	0x08008ab5
 8008aa0:	08008abd 	.word	0x08008abd
 8008aa4:	08008ac5 	.word	0x08008ac5
 8008aa8:	08008acd 	.word	0x08008acd
 8008aac:	08008ad5 	.word	0x08008ad5
 8008ab0:	08008add 	.word	0x08008add
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aba:	e180      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008abc:	2304      	movs	r3, #4
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac2:	e17c      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008ac4:	2308      	movs	r3, #8
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aca:	e178      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008acc:	2310      	movs	r3, #16
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ad2:	e174      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008ad4:	2320      	movs	r3, #32
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ada:	e170      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008adc:	2340      	movs	r3, #64	; 0x40
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ae2:	e16c      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008ae4:	2380      	movs	r3, #128	; 0x80
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aea:	e168      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a1b      	ldr	r2, [pc, #108]	; (8008b60 <UART_SetConfig+0x348>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d142      	bne.n	8008b7c <UART_SetConfig+0x364>
 8008af6:	4b16      	ldr	r3, [pc, #88]	; (8008b50 <UART_SetConfig+0x338>)
 8008af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008afa:	f003 0307 	and.w	r3, r3, #7
 8008afe:	2b05      	cmp	r3, #5
 8008b00:	d838      	bhi.n	8008b74 <UART_SetConfig+0x35c>
 8008b02:	a201      	add	r2, pc, #4	; (adr r2, 8008b08 <UART_SetConfig+0x2f0>)
 8008b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b08:	08008b21 	.word	0x08008b21
 8008b0c:	08008b29 	.word	0x08008b29
 8008b10:	08008b31 	.word	0x08008b31
 8008b14:	08008b39 	.word	0x08008b39
 8008b18:	08008b65 	.word	0x08008b65
 8008b1c:	08008b6d 	.word	0x08008b6d
 8008b20:	2300      	movs	r3, #0
 8008b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b26:	e14a      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008b28:	2304      	movs	r3, #4
 8008b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b2e:	e146      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008b30:	2308      	movs	r3, #8
 8008b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b36:	e142      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008b38:	2310      	movs	r3, #16
 8008b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b3e:	e13e      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008b40:	cfff69f3 	.word	0xcfff69f3
 8008b44:	58000c00 	.word	0x58000c00
 8008b48:	11fff4ff 	.word	0x11fff4ff
 8008b4c:	40011000 	.word	0x40011000
 8008b50:	58024400 	.word	0x58024400
 8008b54:	40004400 	.word	0x40004400
 8008b58:	40004800 	.word	0x40004800
 8008b5c:	40004c00 	.word	0x40004c00
 8008b60:	40005000 	.word	0x40005000
 8008b64:	2320      	movs	r3, #32
 8008b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b6a:	e128      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008b6c:	2340      	movs	r3, #64	; 0x40
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b72:	e124      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008b74:	2380      	movs	r3, #128	; 0x80
 8008b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b7a:	e120      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4acb      	ldr	r2, [pc, #812]	; (8008eb0 <UART_SetConfig+0x698>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d176      	bne.n	8008c74 <UART_SetConfig+0x45c>
 8008b86:	4bcb      	ldr	r3, [pc, #812]	; (8008eb4 <UART_SetConfig+0x69c>)
 8008b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b8e:	2b28      	cmp	r3, #40	; 0x28
 8008b90:	d86c      	bhi.n	8008c6c <UART_SetConfig+0x454>
 8008b92:	a201      	add	r2, pc, #4	; (adr r2, 8008b98 <UART_SetConfig+0x380>)
 8008b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b98:	08008c3d 	.word	0x08008c3d
 8008b9c:	08008c6d 	.word	0x08008c6d
 8008ba0:	08008c6d 	.word	0x08008c6d
 8008ba4:	08008c6d 	.word	0x08008c6d
 8008ba8:	08008c6d 	.word	0x08008c6d
 8008bac:	08008c6d 	.word	0x08008c6d
 8008bb0:	08008c6d 	.word	0x08008c6d
 8008bb4:	08008c6d 	.word	0x08008c6d
 8008bb8:	08008c45 	.word	0x08008c45
 8008bbc:	08008c6d 	.word	0x08008c6d
 8008bc0:	08008c6d 	.word	0x08008c6d
 8008bc4:	08008c6d 	.word	0x08008c6d
 8008bc8:	08008c6d 	.word	0x08008c6d
 8008bcc:	08008c6d 	.word	0x08008c6d
 8008bd0:	08008c6d 	.word	0x08008c6d
 8008bd4:	08008c6d 	.word	0x08008c6d
 8008bd8:	08008c4d 	.word	0x08008c4d
 8008bdc:	08008c6d 	.word	0x08008c6d
 8008be0:	08008c6d 	.word	0x08008c6d
 8008be4:	08008c6d 	.word	0x08008c6d
 8008be8:	08008c6d 	.word	0x08008c6d
 8008bec:	08008c6d 	.word	0x08008c6d
 8008bf0:	08008c6d 	.word	0x08008c6d
 8008bf4:	08008c6d 	.word	0x08008c6d
 8008bf8:	08008c55 	.word	0x08008c55
 8008bfc:	08008c6d 	.word	0x08008c6d
 8008c00:	08008c6d 	.word	0x08008c6d
 8008c04:	08008c6d 	.word	0x08008c6d
 8008c08:	08008c6d 	.word	0x08008c6d
 8008c0c:	08008c6d 	.word	0x08008c6d
 8008c10:	08008c6d 	.word	0x08008c6d
 8008c14:	08008c6d 	.word	0x08008c6d
 8008c18:	08008c5d 	.word	0x08008c5d
 8008c1c:	08008c6d 	.word	0x08008c6d
 8008c20:	08008c6d 	.word	0x08008c6d
 8008c24:	08008c6d 	.word	0x08008c6d
 8008c28:	08008c6d 	.word	0x08008c6d
 8008c2c:	08008c6d 	.word	0x08008c6d
 8008c30:	08008c6d 	.word	0x08008c6d
 8008c34:	08008c6d 	.word	0x08008c6d
 8008c38:	08008c65 	.word	0x08008c65
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c42:	e0bc      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008c44:	2304      	movs	r3, #4
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c4a:	e0b8      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008c4c:	2308      	movs	r3, #8
 8008c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c52:	e0b4      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008c54:	2310      	movs	r3, #16
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c5a:	e0b0      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008c5c:	2320      	movs	r3, #32
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c62:	e0ac      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008c64:	2340      	movs	r3, #64	; 0x40
 8008c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c6a:	e0a8      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008c6c:	2380      	movs	r3, #128	; 0x80
 8008c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c72:	e0a4      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a8f      	ldr	r2, [pc, #572]	; (8008eb8 <UART_SetConfig+0x6a0>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d130      	bne.n	8008ce0 <UART_SetConfig+0x4c8>
 8008c7e:	4b8d      	ldr	r3, [pc, #564]	; (8008eb4 <UART_SetConfig+0x69c>)
 8008c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c82:	f003 0307 	and.w	r3, r3, #7
 8008c86:	2b05      	cmp	r3, #5
 8008c88:	d826      	bhi.n	8008cd8 <UART_SetConfig+0x4c0>
 8008c8a:	a201      	add	r2, pc, #4	; (adr r2, 8008c90 <UART_SetConfig+0x478>)
 8008c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c90:	08008ca9 	.word	0x08008ca9
 8008c94:	08008cb1 	.word	0x08008cb1
 8008c98:	08008cb9 	.word	0x08008cb9
 8008c9c:	08008cc1 	.word	0x08008cc1
 8008ca0:	08008cc9 	.word	0x08008cc9
 8008ca4:	08008cd1 	.word	0x08008cd1
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cae:	e086      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008cb0:	2304      	movs	r3, #4
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cb6:	e082      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008cb8:	2308      	movs	r3, #8
 8008cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cbe:	e07e      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008cc0:	2310      	movs	r3, #16
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cc6:	e07a      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008cc8:	2320      	movs	r3, #32
 8008cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cce:	e076      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008cd0:	2340      	movs	r3, #64	; 0x40
 8008cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cd6:	e072      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008cd8:	2380      	movs	r3, #128	; 0x80
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cde:	e06e      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a75      	ldr	r2, [pc, #468]	; (8008ebc <UART_SetConfig+0x6a4>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d130      	bne.n	8008d4c <UART_SetConfig+0x534>
 8008cea:	4b72      	ldr	r3, [pc, #456]	; (8008eb4 <UART_SetConfig+0x69c>)
 8008cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cee:	f003 0307 	and.w	r3, r3, #7
 8008cf2:	2b05      	cmp	r3, #5
 8008cf4:	d826      	bhi.n	8008d44 <UART_SetConfig+0x52c>
 8008cf6:	a201      	add	r2, pc, #4	; (adr r2, 8008cfc <UART_SetConfig+0x4e4>)
 8008cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfc:	08008d15 	.word	0x08008d15
 8008d00:	08008d1d 	.word	0x08008d1d
 8008d04:	08008d25 	.word	0x08008d25
 8008d08:	08008d2d 	.word	0x08008d2d
 8008d0c:	08008d35 	.word	0x08008d35
 8008d10:	08008d3d 	.word	0x08008d3d
 8008d14:	2300      	movs	r3, #0
 8008d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d1a:	e050      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008d1c:	2304      	movs	r3, #4
 8008d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d22:	e04c      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008d24:	2308      	movs	r3, #8
 8008d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d2a:	e048      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008d2c:	2310      	movs	r3, #16
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d32:	e044      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008d34:	2320      	movs	r3, #32
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d3a:	e040      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008d3c:	2340      	movs	r3, #64	; 0x40
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d42:	e03c      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008d44:	2380      	movs	r3, #128	; 0x80
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d4a:	e038      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a5b      	ldr	r2, [pc, #364]	; (8008ec0 <UART_SetConfig+0x6a8>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d130      	bne.n	8008db8 <UART_SetConfig+0x5a0>
 8008d56:	4b57      	ldr	r3, [pc, #348]	; (8008eb4 <UART_SetConfig+0x69c>)
 8008d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d5a:	f003 0307 	and.w	r3, r3, #7
 8008d5e:	2b05      	cmp	r3, #5
 8008d60:	d826      	bhi.n	8008db0 <UART_SetConfig+0x598>
 8008d62:	a201      	add	r2, pc, #4	; (adr r2, 8008d68 <UART_SetConfig+0x550>)
 8008d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d68:	08008d81 	.word	0x08008d81
 8008d6c:	08008d89 	.word	0x08008d89
 8008d70:	08008d91 	.word	0x08008d91
 8008d74:	08008d99 	.word	0x08008d99
 8008d78:	08008da1 	.word	0x08008da1
 8008d7c:	08008da9 	.word	0x08008da9
 8008d80:	2302      	movs	r3, #2
 8008d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d86:	e01a      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008d88:	2304      	movs	r3, #4
 8008d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d8e:	e016      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008d90:	2308      	movs	r3, #8
 8008d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d96:	e012      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008d98:	2310      	movs	r3, #16
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d9e:	e00e      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008da0:	2320      	movs	r3, #32
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da6:	e00a      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008da8:	2340      	movs	r3, #64	; 0x40
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dae:	e006      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008db0:	2380      	movs	r3, #128	; 0x80
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008db6:	e002      	b.n	8008dbe <UART_SetConfig+0x5a6>
 8008db8:	2380      	movs	r3, #128	; 0x80
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a3f      	ldr	r2, [pc, #252]	; (8008ec0 <UART_SetConfig+0x6a8>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	f040 80f8 	bne.w	8008fba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008dca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008dce:	2b20      	cmp	r3, #32
 8008dd0:	dc46      	bgt.n	8008e60 <UART_SetConfig+0x648>
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	f2c0 8082 	blt.w	8008edc <UART_SetConfig+0x6c4>
 8008dd8:	3b02      	subs	r3, #2
 8008dda:	2b1e      	cmp	r3, #30
 8008ddc:	d87e      	bhi.n	8008edc <UART_SetConfig+0x6c4>
 8008dde:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <UART_SetConfig+0x5cc>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008e67 	.word	0x08008e67
 8008de8:	08008edd 	.word	0x08008edd
 8008dec:	08008e6f 	.word	0x08008e6f
 8008df0:	08008edd 	.word	0x08008edd
 8008df4:	08008edd 	.word	0x08008edd
 8008df8:	08008edd 	.word	0x08008edd
 8008dfc:	08008e7f 	.word	0x08008e7f
 8008e00:	08008edd 	.word	0x08008edd
 8008e04:	08008edd 	.word	0x08008edd
 8008e08:	08008edd 	.word	0x08008edd
 8008e0c:	08008edd 	.word	0x08008edd
 8008e10:	08008edd 	.word	0x08008edd
 8008e14:	08008edd 	.word	0x08008edd
 8008e18:	08008edd 	.word	0x08008edd
 8008e1c:	08008e8f 	.word	0x08008e8f
 8008e20:	08008edd 	.word	0x08008edd
 8008e24:	08008edd 	.word	0x08008edd
 8008e28:	08008edd 	.word	0x08008edd
 8008e2c:	08008edd 	.word	0x08008edd
 8008e30:	08008edd 	.word	0x08008edd
 8008e34:	08008edd 	.word	0x08008edd
 8008e38:	08008edd 	.word	0x08008edd
 8008e3c:	08008edd 	.word	0x08008edd
 8008e40:	08008edd 	.word	0x08008edd
 8008e44:	08008edd 	.word	0x08008edd
 8008e48:	08008edd 	.word	0x08008edd
 8008e4c:	08008edd 	.word	0x08008edd
 8008e50:	08008edd 	.word	0x08008edd
 8008e54:	08008edd 	.word	0x08008edd
 8008e58:	08008edd 	.word	0x08008edd
 8008e5c:	08008ecf 	.word	0x08008ecf
 8008e60:	2b40      	cmp	r3, #64	; 0x40
 8008e62:	d037      	beq.n	8008ed4 <UART_SetConfig+0x6bc>
 8008e64:	e03a      	b.n	8008edc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008e66:	f7fe f995 	bl	8007194 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e6c:	e03c      	b.n	8008ee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fe f9a4 	bl	80071c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e7c:	e034      	b.n	8008ee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e7e:	f107 0318 	add.w	r3, r7, #24
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe faf0 	bl	8007468 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e8c:	e02c      	b.n	8008ee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e8e:	4b09      	ldr	r3, [pc, #36]	; (8008eb4 <UART_SetConfig+0x69c>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d016      	beq.n	8008ec8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e9a:	4b06      	ldr	r3, [pc, #24]	; (8008eb4 <UART_SetConfig+0x69c>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	08db      	lsrs	r3, r3, #3
 8008ea0:	f003 0303 	and.w	r3, r3, #3
 8008ea4:	4a07      	ldr	r2, [pc, #28]	; (8008ec4 <UART_SetConfig+0x6ac>)
 8008ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8008eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008eac:	e01c      	b.n	8008ee8 <UART_SetConfig+0x6d0>
 8008eae:	bf00      	nop
 8008eb0:	40011400 	.word	0x40011400
 8008eb4:	58024400 	.word	0x58024400
 8008eb8:	40007800 	.word	0x40007800
 8008ebc:	40007c00 	.word	0x40007c00
 8008ec0:	58000c00 	.word	0x58000c00
 8008ec4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008ec8:	4b9d      	ldr	r3, [pc, #628]	; (8009140 <UART_SetConfig+0x928>)
 8008eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ecc:	e00c      	b.n	8008ee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ece:	4b9d      	ldr	r3, [pc, #628]	; (8009144 <UART_SetConfig+0x92c>)
 8008ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ed2:	e009      	b.n	8008ee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ed4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eda:	e005      	b.n	8008ee8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008edc:	2300      	movs	r3, #0
 8008ede:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008ee6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f000 81de 	beq.w	80092ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef4:	4a94      	ldr	r2, [pc, #592]	; (8009148 <UART_SetConfig+0x930>)
 8008ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008efa:	461a      	mov	r2, r3
 8008efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008efe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f02:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	685a      	ldr	r2, [r3, #4]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	4413      	add	r3, r2
 8008f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d305      	bcc.n	8008f20 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d903      	bls.n	8008f28 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008f26:	e1c1      	b.n	80092ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	60bb      	str	r3, [r7, #8]
 8008f2e:	60fa      	str	r2, [r7, #12]
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f34:	4a84      	ldr	r2, [pc, #528]	; (8009148 <UART_SetConfig+0x930>)
 8008f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	603b      	str	r3, [r7, #0]
 8008f40:	607a      	str	r2, [r7, #4]
 8008f42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f4a:	f7f7 fbed 	bl	8000728 <__aeabi_uldivmod>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	4610      	mov	r0, r2
 8008f54:	4619      	mov	r1, r3
 8008f56:	f04f 0200 	mov.w	r2, #0
 8008f5a:	f04f 0300 	mov.w	r3, #0
 8008f5e:	020b      	lsls	r3, r1, #8
 8008f60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f64:	0202      	lsls	r2, r0, #8
 8008f66:	6979      	ldr	r1, [r7, #20]
 8008f68:	6849      	ldr	r1, [r1, #4]
 8008f6a:	0849      	lsrs	r1, r1, #1
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	460c      	mov	r4, r1
 8008f70:	4605      	mov	r5, r0
 8008f72:	eb12 0804 	adds.w	r8, r2, r4
 8008f76:	eb43 0905 	adc.w	r9, r3, r5
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	469a      	mov	sl, r3
 8008f82:	4693      	mov	fp, r2
 8008f84:	4652      	mov	r2, sl
 8008f86:	465b      	mov	r3, fp
 8008f88:	4640      	mov	r0, r8
 8008f8a:	4649      	mov	r1, r9
 8008f8c:	f7f7 fbcc 	bl	8000728 <__aeabi_uldivmod>
 8008f90:	4602      	mov	r2, r0
 8008f92:	460b      	mov	r3, r1
 8008f94:	4613      	mov	r3, r2
 8008f96:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f9e:	d308      	bcc.n	8008fb2 <UART_SetConfig+0x79a>
 8008fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fa6:	d204      	bcs.n	8008fb2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fae:	60da      	str	r2, [r3, #12]
 8008fb0:	e17c      	b.n	80092ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008fb8:	e178      	b.n	80092ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	69db      	ldr	r3, [r3, #28]
 8008fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fc2:	f040 80c5 	bne.w	8009150 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008fc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008fca:	2b20      	cmp	r3, #32
 8008fcc:	dc48      	bgt.n	8009060 <UART_SetConfig+0x848>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	db7b      	blt.n	80090ca <UART_SetConfig+0x8b2>
 8008fd2:	2b20      	cmp	r3, #32
 8008fd4:	d879      	bhi.n	80090ca <UART_SetConfig+0x8b2>
 8008fd6:	a201      	add	r2, pc, #4	; (adr r2, 8008fdc <UART_SetConfig+0x7c4>)
 8008fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fdc:	08009067 	.word	0x08009067
 8008fe0:	0800906f 	.word	0x0800906f
 8008fe4:	080090cb 	.word	0x080090cb
 8008fe8:	080090cb 	.word	0x080090cb
 8008fec:	08009077 	.word	0x08009077
 8008ff0:	080090cb 	.word	0x080090cb
 8008ff4:	080090cb 	.word	0x080090cb
 8008ff8:	080090cb 	.word	0x080090cb
 8008ffc:	08009087 	.word	0x08009087
 8009000:	080090cb 	.word	0x080090cb
 8009004:	080090cb 	.word	0x080090cb
 8009008:	080090cb 	.word	0x080090cb
 800900c:	080090cb 	.word	0x080090cb
 8009010:	080090cb 	.word	0x080090cb
 8009014:	080090cb 	.word	0x080090cb
 8009018:	080090cb 	.word	0x080090cb
 800901c:	08009097 	.word	0x08009097
 8009020:	080090cb 	.word	0x080090cb
 8009024:	080090cb 	.word	0x080090cb
 8009028:	080090cb 	.word	0x080090cb
 800902c:	080090cb 	.word	0x080090cb
 8009030:	080090cb 	.word	0x080090cb
 8009034:	080090cb 	.word	0x080090cb
 8009038:	080090cb 	.word	0x080090cb
 800903c:	080090cb 	.word	0x080090cb
 8009040:	080090cb 	.word	0x080090cb
 8009044:	080090cb 	.word	0x080090cb
 8009048:	080090cb 	.word	0x080090cb
 800904c:	080090cb 	.word	0x080090cb
 8009050:	080090cb 	.word	0x080090cb
 8009054:	080090cb 	.word	0x080090cb
 8009058:	080090cb 	.word	0x080090cb
 800905c:	080090bd 	.word	0x080090bd
 8009060:	2b40      	cmp	r3, #64	; 0x40
 8009062:	d02e      	beq.n	80090c2 <UART_SetConfig+0x8aa>
 8009064:	e031      	b.n	80090ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009066:	f7fd f923 	bl	80062b0 <HAL_RCC_GetPCLK1Freq>
 800906a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800906c:	e033      	b.n	80090d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800906e:	f7fd f935 	bl	80062dc <HAL_RCC_GetPCLK2Freq>
 8009072:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009074:	e02f      	b.n	80090d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800907a:	4618      	mov	r0, r3
 800907c:	f7fe f8a0 	bl	80071c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009084:	e027      	b.n	80090d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009086:	f107 0318 	add.w	r3, r7, #24
 800908a:	4618      	mov	r0, r3
 800908c:	f7fe f9ec 	bl	8007468 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009094:	e01f      	b.n	80090d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009096:	4b2d      	ldr	r3, [pc, #180]	; (800914c <UART_SetConfig+0x934>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 0320 	and.w	r3, r3, #32
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d009      	beq.n	80090b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80090a2:	4b2a      	ldr	r3, [pc, #168]	; (800914c <UART_SetConfig+0x934>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	08db      	lsrs	r3, r3, #3
 80090a8:	f003 0303 	and.w	r3, r3, #3
 80090ac:	4a24      	ldr	r2, [pc, #144]	; (8009140 <UART_SetConfig+0x928>)
 80090ae:	fa22 f303 	lsr.w	r3, r2, r3
 80090b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090b4:	e00f      	b.n	80090d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80090b6:	4b22      	ldr	r3, [pc, #136]	; (8009140 <UART_SetConfig+0x928>)
 80090b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090ba:	e00c      	b.n	80090d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090bc:	4b21      	ldr	r3, [pc, #132]	; (8009144 <UART_SetConfig+0x92c>)
 80090be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090c0:	e009      	b.n	80090d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090c8:	e005      	b.n	80090d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80090ca:	2300      	movs	r3, #0
 80090cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80090d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 80e7 	beq.w	80092ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e2:	4a19      	ldr	r2, [pc, #100]	; (8009148 <UART_SetConfig+0x930>)
 80090e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090e8:	461a      	mov	r2, r3
 80090ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80090f0:	005a      	lsls	r2, r3, #1
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	085b      	lsrs	r3, r3, #1
 80090f8:	441a      	add	r2, r3
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009102:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009106:	2b0f      	cmp	r3, #15
 8009108:	d916      	bls.n	8009138 <UART_SetConfig+0x920>
 800910a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009110:	d212      	bcs.n	8009138 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009114:	b29b      	uxth	r3, r3
 8009116:	f023 030f 	bic.w	r3, r3, #15
 800911a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800911c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911e:	085b      	lsrs	r3, r3, #1
 8009120:	b29b      	uxth	r3, r3
 8009122:	f003 0307 	and.w	r3, r3, #7
 8009126:	b29a      	uxth	r2, r3
 8009128:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800912a:	4313      	orrs	r3, r2
 800912c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009134:	60da      	str	r2, [r3, #12]
 8009136:	e0b9      	b.n	80092ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800913e:	e0b5      	b.n	80092ac <UART_SetConfig+0xa94>
 8009140:	03d09000 	.word	0x03d09000
 8009144:	003d0900 	.word	0x003d0900
 8009148:	0800f664 	.word	0x0800f664
 800914c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009150:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009154:	2b20      	cmp	r3, #32
 8009156:	dc49      	bgt.n	80091ec <UART_SetConfig+0x9d4>
 8009158:	2b00      	cmp	r3, #0
 800915a:	db7c      	blt.n	8009256 <UART_SetConfig+0xa3e>
 800915c:	2b20      	cmp	r3, #32
 800915e:	d87a      	bhi.n	8009256 <UART_SetConfig+0xa3e>
 8009160:	a201      	add	r2, pc, #4	; (adr r2, 8009168 <UART_SetConfig+0x950>)
 8009162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009166:	bf00      	nop
 8009168:	080091f3 	.word	0x080091f3
 800916c:	080091fb 	.word	0x080091fb
 8009170:	08009257 	.word	0x08009257
 8009174:	08009257 	.word	0x08009257
 8009178:	08009203 	.word	0x08009203
 800917c:	08009257 	.word	0x08009257
 8009180:	08009257 	.word	0x08009257
 8009184:	08009257 	.word	0x08009257
 8009188:	08009213 	.word	0x08009213
 800918c:	08009257 	.word	0x08009257
 8009190:	08009257 	.word	0x08009257
 8009194:	08009257 	.word	0x08009257
 8009198:	08009257 	.word	0x08009257
 800919c:	08009257 	.word	0x08009257
 80091a0:	08009257 	.word	0x08009257
 80091a4:	08009257 	.word	0x08009257
 80091a8:	08009223 	.word	0x08009223
 80091ac:	08009257 	.word	0x08009257
 80091b0:	08009257 	.word	0x08009257
 80091b4:	08009257 	.word	0x08009257
 80091b8:	08009257 	.word	0x08009257
 80091bc:	08009257 	.word	0x08009257
 80091c0:	08009257 	.word	0x08009257
 80091c4:	08009257 	.word	0x08009257
 80091c8:	08009257 	.word	0x08009257
 80091cc:	08009257 	.word	0x08009257
 80091d0:	08009257 	.word	0x08009257
 80091d4:	08009257 	.word	0x08009257
 80091d8:	08009257 	.word	0x08009257
 80091dc:	08009257 	.word	0x08009257
 80091e0:	08009257 	.word	0x08009257
 80091e4:	08009257 	.word	0x08009257
 80091e8:	08009249 	.word	0x08009249
 80091ec:	2b40      	cmp	r3, #64	; 0x40
 80091ee:	d02e      	beq.n	800924e <UART_SetConfig+0xa36>
 80091f0:	e031      	b.n	8009256 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091f2:	f7fd f85d 	bl	80062b0 <HAL_RCC_GetPCLK1Freq>
 80091f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091f8:	e033      	b.n	8009262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091fa:	f7fd f86f 	bl	80062dc <HAL_RCC_GetPCLK2Freq>
 80091fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009200:	e02f      	b.n	8009262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009206:	4618      	mov	r0, r3
 8009208:	f7fd ffda 	bl	80071c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009210:	e027      	b.n	8009262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009212:	f107 0318 	add.w	r3, r7, #24
 8009216:	4618      	mov	r0, r3
 8009218:	f7fe f926 	bl	8007468 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009220:	e01f      	b.n	8009262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009222:	4b2d      	ldr	r3, [pc, #180]	; (80092d8 <UART_SetConfig+0xac0>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0320 	and.w	r3, r3, #32
 800922a:	2b00      	cmp	r3, #0
 800922c:	d009      	beq.n	8009242 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800922e:	4b2a      	ldr	r3, [pc, #168]	; (80092d8 <UART_SetConfig+0xac0>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	08db      	lsrs	r3, r3, #3
 8009234:	f003 0303 	and.w	r3, r3, #3
 8009238:	4a28      	ldr	r2, [pc, #160]	; (80092dc <UART_SetConfig+0xac4>)
 800923a:	fa22 f303 	lsr.w	r3, r2, r3
 800923e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009240:	e00f      	b.n	8009262 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009242:	4b26      	ldr	r3, [pc, #152]	; (80092dc <UART_SetConfig+0xac4>)
 8009244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009246:	e00c      	b.n	8009262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009248:	4b25      	ldr	r3, [pc, #148]	; (80092e0 <UART_SetConfig+0xac8>)
 800924a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800924c:	e009      	b.n	8009262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800924e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009254:	e005      	b.n	8009262 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009256:	2300      	movs	r3, #0
 8009258:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009260:	bf00      	nop
    }

    if (pclk != 0U)
 8009262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009264:	2b00      	cmp	r3, #0
 8009266:	d021      	beq.n	80092ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926c:	4a1d      	ldr	r2, [pc, #116]	; (80092e4 <UART_SetConfig+0xacc>)
 800926e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009272:	461a      	mov	r2, r3
 8009274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009276:	fbb3 f2f2 	udiv	r2, r3, r2
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	085b      	lsrs	r3, r3, #1
 8009280:	441a      	add	r2, r3
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	fbb2 f3f3 	udiv	r3, r2, r3
 800928a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800928c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928e:	2b0f      	cmp	r3, #15
 8009290:	d909      	bls.n	80092a6 <UART_SetConfig+0xa8e>
 8009292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009298:	d205      	bcs.n	80092a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800929a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929c:	b29a      	uxth	r2, r3
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	60da      	str	r2, [r3, #12]
 80092a4:	e002      	b.n	80092ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	2200      	movs	r2, #0
 80092c0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	2200      	movs	r2, #0
 80092c6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80092c8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3748      	adds	r7, #72	; 0x48
 80092d0:	46bd      	mov	sp, r7
 80092d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092d6:	bf00      	nop
 80092d8:	58024400 	.word	0x58024400
 80092dc:	03d09000 	.word	0x03d09000
 80092e0:	003d0900 	.word	0x003d0900
 80092e4:	0800f664 	.word	0x0800f664

080092e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00a      	beq.n	8009312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	430a      	orrs	r2, r1
 8009310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00a      	beq.n	8009334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	430a      	orrs	r2, r1
 8009332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009338:	f003 0304 	and.w	r3, r3, #4
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00a      	beq.n	8009356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	430a      	orrs	r2, r1
 8009354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935a:	f003 0308 	and.w	r3, r3, #8
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00a      	beq.n	8009378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	430a      	orrs	r2, r1
 8009376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937c:	f003 0310 	and.w	r3, r3, #16
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00a      	beq.n	800939a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	430a      	orrs	r2, r1
 8009398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939e:	f003 0320 	and.w	r3, r3, #32
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00a      	beq.n	80093bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	430a      	orrs	r2, r1
 80093ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d01a      	beq.n	80093fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093e6:	d10a      	bne.n	80093fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	430a      	orrs	r2, r1
 800941e:	605a      	str	r2, [r3, #4]
  }
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af02      	add	r7, sp, #8
 8009432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800943c:	f7f9 fb70 	bl	8002b20 <HAL_GetTick>
 8009440:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0308 	and.w	r3, r3, #8
 800944c:	2b08      	cmp	r3, #8
 800944e:	d10e      	bne.n	800946e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009450:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f82f 	bl	80094c2 <UART_WaitOnFlagUntilTimeout>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	e025      	b.n	80094ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 0304 	and.w	r3, r3, #4
 8009478:	2b04      	cmp	r3, #4
 800947a:	d10e      	bne.n	800949a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800947c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f819 	bl	80094c2 <UART_WaitOnFlagUntilTimeout>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009496:	2303      	movs	r3, #3
 8009498:	e00f      	b.n	80094ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2220      	movs	r2, #32
 800949e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2220      	movs	r2, #32
 80094a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b09c      	sub	sp, #112	; 0x70
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	60f8      	str	r0, [r7, #12]
 80094ca:	60b9      	str	r1, [r7, #8]
 80094cc:	603b      	str	r3, [r7, #0]
 80094ce:	4613      	mov	r3, r2
 80094d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094d2:	e0a9      	b.n	8009628 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094da:	f000 80a5 	beq.w	8009628 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094de:	f7f9 fb1f 	bl	8002b20 <HAL_GetTick>
 80094e2:	4602      	mov	r2, r0
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d302      	bcc.n	80094f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80094ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d140      	bne.n	8009576 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094fc:	e853 3f00 	ldrex	r3, [r3]
 8009500:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009504:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009508:	667b      	str	r3, [r7, #100]	; 0x64
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	461a      	mov	r2, r3
 8009510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009512:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009514:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009516:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009518:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800951a:	e841 2300 	strex	r3, r2, [r1]
 800951e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1e6      	bne.n	80094f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	3308      	adds	r3, #8
 800952c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009530:	e853 3f00 	ldrex	r3, [r3]
 8009534:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009538:	f023 0301 	bic.w	r3, r3, #1
 800953c:	663b      	str	r3, [r7, #96]	; 0x60
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	3308      	adds	r3, #8
 8009544:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009546:	64ba      	str	r2, [r7, #72]	; 0x48
 8009548:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800954c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800954e:	e841 2300 	strex	r3, r2, [r1]
 8009552:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1e5      	bne.n	8009526 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2220      	movs	r2, #32
 800955e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2220      	movs	r2, #32
 8009566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009572:	2303      	movs	r3, #3
 8009574:	e069      	b.n	800964a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 0304 	and.w	r3, r3, #4
 8009580:	2b00      	cmp	r3, #0
 8009582:	d051      	beq.n	8009628 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800958e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009592:	d149      	bne.n	8009628 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800959c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a6:	e853 3f00 	ldrex	r3, [r3]
 80095aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	461a      	mov	r2, r3
 80095ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095bc:	637b      	str	r3, [r7, #52]	; 0x34
 80095be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095c4:	e841 2300 	strex	r3, r2, [r1]
 80095c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d1e6      	bne.n	800959e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3308      	adds	r3, #8
 80095d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	e853 3f00 	ldrex	r3, [r3]
 80095de:	613b      	str	r3, [r7, #16]
   return(result);
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	f023 0301 	bic.w	r3, r3, #1
 80095e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3308      	adds	r3, #8
 80095ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095f0:	623a      	str	r2, [r7, #32]
 80095f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f4:	69f9      	ldr	r1, [r7, #28]
 80095f6:	6a3a      	ldr	r2, [r7, #32]
 80095f8:	e841 2300 	strex	r3, r2, [r1]
 80095fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1e5      	bne.n	80095d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2220      	movs	r2, #32
 8009608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2220      	movs	r2, #32
 8009610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2220      	movs	r2, #32
 8009618:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009624:	2303      	movs	r3, #3
 8009626:	e010      	b.n	800964a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	69da      	ldr	r2, [r3, #28]
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	4013      	ands	r3, r2
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	429a      	cmp	r2, r3
 8009636:	bf0c      	ite	eq
 8009638:	2301      	moveq	r3, #1
 800963a:	2300      	movne	r3, #0
 800963c:	b2db      	uxtb	r3, r3
 800963e:	461a      	mov	r2, r3
 8009640:	79fb      	ldrb	r3, [r7, #7]
 8009642:	429a      	cmp	r2, r3
 8009644:	f43f af46 	beq.w	80094d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3770      	adds	r7, #112	; 0x70
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
	...

08009654 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009654:	b480      	push	{r7}
 8009656:	b0a3      	sub	sp, #140	; 0x8c
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	4613      	mov	r3, r2
 8009660:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	88fa      	ldrh	r2, [r7, #6]
 800966c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	88fa      	ldrh	r2, [r7, #6]
 8009674:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009686:	d10e      	bne.n	80096a6 <UART_Start_Receive_IT+0x52>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d105      	bne.n	800969c <UART_Start_Receive_IT+0x48>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009696:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800969a:	e02d      	b.n	80096f8 <UART_Start_Receive_IT+0xa4>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	22ff      	movs	r2, #255	; 0xff
 80096a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096a4:	e028      	b.n	80096f8 <UART_Start_Receive_IT+0xa4>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10d      	bne.n	80096ca <UART_Start_Receive_IT+0x76>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d104      	bne.n	80096c0 <UART_Start_Receive_IT+0x6c>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	22ff      	movs	r2, #255	; 0xff
 80096ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096be:	e01b      	b.n	80096f8 <UART_Start_Receive_IT+0xa4>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	227f      	movs	r2, #127	; 0x7f
 80096c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096c8:	e016      	b.n	80096f8 <UART_Start_Receive_IT+0xa4>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096d2:	d10d      	bne.n	80096f0 <UART_Start_Receive_IT+0x9c>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d104      	bne.n	80096e6 <UART_Start_Receive_IT+0x92>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	227f      	movs	r2, #127	; 0x7f
 80096e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096e4:	e008      	b.n	80096f8 <UART_Start_Receive_IT+0xa4>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	223f      	movs	r2, #63	; 0x3f
 80096ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096ee:	e003      	b.n	80096f8 <UART_Start_Receive_IT+0xa4>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2222      	movs	r2, #34	; 0x22
 8009704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	3308      	adds	r3, #8
 800970e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009712:	e853 3f00 	ldrex	r3, [r3]
 8009716:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009718:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800971a:	f043 0301 	orr.w	r3, r3, #1
 800971e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3308      	adds	r3, #8
 8009728:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800972c:	673a      	str	r2, [r7, #112]	; 0x70
 800972e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009730:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009732:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009734:	e841 2300 	strex	r3, r2, [r1]
 8009738:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800973a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1e3      	bne.n	8009708 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009748:	d153      	bne.n	80097f2 <UART_Start_Receive_IT+0x19e>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009750:	88fa      	ldrh	r2, [r7, #6]
 8009752:	429a      	cmp	r2, r3
 8009754:	d34d      	bcc.n	80097f2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800975e:	d107      	bne.n	8009770 <UART_Start_Receive_IT+0x11c>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d103      	bne.n	8009770 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	4a4b      	ldr	r2, [pc, #300]	; (8009898 <UART_Start_Receive_IT+0x244>)
 800976c:	671a      	str	r2, [r3, #112]	; 0x70
 800976e:	e002      	b.n	8009776 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	4a4a      	ldr	r2, [pc, #296]	; (800989c <UART_Start_Receive_IT+0x248>)
 8009774:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d01a      	beq.n	80097bc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800978e:	e853 3f00 	ldrex	r3, [r3]
 8009792:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800979a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	461a      	mov	r2, r3
 80097a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80097a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097aa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80097b0:	e841 2300 	strex	r3, r2, [r1]
 80097b4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80097b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1e4      	bne.n	8009786 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	3308      	adds	r3, #8
 80097c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097c6:	e853 3f00 	ldrex	r3, [r3]
 80097ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	3308      	adds	r3, #8
 80097da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80097dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80097de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097e4:	e841 2300 	strex	r3, r2, [r1]
 80097e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80097ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1e5      	bne.n	80097bc <UART_Start_Receive_IT+0x168>
 80097f0:	e04a      	b.n	8009888 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097fa:	d107      	bne.n	800980c <UART_Start_Receive_IT+0x1b8>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d103      	bne.n	800980c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4a26      	ldr	r2, [pc, #152]	; (80098a0 <UART_Start_Receive_IT+0x24c>)
 8009808:	671a      	str	r2, [r3, #112]	; 0x70
 800980a:	e002      	b.n	8009812 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4a25      	ldr	r2, [pc, #148]	; (80098a4 <UART_Start_Receive_IT+0x250>)
 8009810:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d019      	beq.n	8009856 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982a:	e853 3f00 	ldrex	r3, [r3]
 800982e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009836:	677b      	str	r3, [r7, #116]	; 0x74
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	461a      	mov	r2, r3
 800983e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009840:	637b      	str	r3, [r7, #52]	; 0x34
 8009842:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009844:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009848:	e841 2300 	strex	r3, r2, [r1]
 800984c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800984e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1e6      	bne.n	8009822 <UART_Start_Receive_IT+0x1ce>
 8009854:	e018      	b.n	8009888 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	e853 3f00 	ldrex	r3, [r3]
 8009862:	613b      	str	r3, [r7, #16]
   return(result);
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	f043 0320 	orr.w	r3, r3, #32
 800986a:	67bb      	str	r3, [r7, #120]	; 0x78
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	461a      	mov	r2, r3
 8009872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009874:	623b      	str	r3, [r7, #32]
 8009876:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009878:	69f9      	ldr	r1, [r7, #28]
 800987a:	6a3a      	ldr	r2, [r7, #32]
 800987c:	e841 2300 	strex	r3, r2, [r1]
 8009880:	61bb      	str	r3, [r7, #24]
   return(result);
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1e6      	bne.n	8009856 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	378c      	adds	r7, #140	; 0x8c
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	08009fb1 	.word	0x08009fb1
 800989c:	08009cb9 	.word	0x08009cb9
 80098a0:	08009b57 	.word	0x08009b57
 80098a4:	080099f7 	.word	0x080099f7

080098a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b095      	sub	sp, #84	; 0x54
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b8:	e853 3f00 	ldrex	r3, [r3]
 80098bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	461a      	mov	r2, r3
 80098cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098ce:	643b      	str	r3, [r7, #64]	; 0x40
 80098d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e6      	bne.n	80098b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3308      	adds	r3, #8
 80098e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ea:	6a3b      	ldr	r3, [r7, #32]
 80098ec:	e853 3f00 	ldrex	r3, [r3]
 80098f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80098f2:	69fa      	ldr	r2, [r7, #28]
 80098f4:	4b1e      	ldr	r3, [pc, #120]	; (8009970 <UART_EndRxTransfer+0xc8>)
 80098f6:	4013      	ands	r3, r2
 80098f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3308      	adds	r3, #8
 8009900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009902:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009904:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800990a:	e841 2300 	strex	r3, r2, [r1]
 800990e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1e5      	bne.n	80098e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800991a:	2b01      	cmp	r3, #1
 800991c:	d118      	bne.n	8009950 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	e853 3f00 	ldrex	r3, [r3]
 800992a:	60bb      	str	r3, [r7, #8]
   return(result);
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	f023 0310 	bic.w	r3, r3, #16
 8009932:	647b      	str	r3, [r7, #68]	; 0x44
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	461a      	mov	r2, r3
 800993a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800993c:	61bb      	str	r3, [r7, #24]
 800993e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009940:	6979      	ldr	r1, [r7, #20]
 8009942:	69ba      	ldr	r2, [r7, #24]
 8009944:	e841 2300 	strex	r3, r2, [r1]
 8009948:	613b      	str	r3, [r7, #16]
   return(result);
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1e6      	bne.n	800991e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2220      	movs	r2, #32
 8009954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009964:	bf00      	nop
 8009966:	3754      	adds	r7, #84	; 0x54
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr
 8009970:	effffffe 	.word	0xeffffffe

08009974 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009980:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f7fe ff2a 	bl	80087ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009998:	bf00      	nop
 800999a:	3710      	adds	r7, #16
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b088      	sub	sp, #32
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	e853 3f00 	ldrex	r3, [r3]
 80099b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099bc:	61fb      	str	r3, [r7, #28]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	461a      	mov	r2, r3
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	61bb      	str	r3, [r7, #24]
 80099c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ca:	6979      	ldr	r1, [r7, #20]
 80099cc:	69ba      	ldr	r2, [r7, #24]
 80099ce:	e841 2300 	strex	r3, r2, [r1]
 80099d2:	613b      	str	r3, [r7, #16]
   return(result);
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1e6      	bne.n	80099a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2220      	movs	r2, #32
 80099de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7fe fef5 	bl	80087d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099ee:	bf00      	nop
 80099f0:	3720      	adds	r7, #32
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b096      	sub	sp, #88	; 0x58
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a04:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a0e:	2b22      	cmp	r3, #34	; 0x22
 8009a10:	f040 8095 	bne.w	8009b3e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a1e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009a22:	b2d9      	uxtb	r1, r3
 8009a24:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009a28:	b2da      	uxtb	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a2e:	400a      	ands	r2, r1
 8009a30:	b2d2      	uxtb	r2, r2
 8009a32:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a38:	1c5a      	adds	r2, r3, #1
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	3b01      	subs	r3, #1
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d178      	bne.n	8009b4e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a64:	e853 3f00 	ldrex	r3, [r3]
 8009a68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a70:	653b      	str	r3, [r7, #80]	; 0x50
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8009a7c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a82:	e841 2300 	strex	r3, r2, [r1]
 8009a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d1e6      	bne.n	8009a5c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	3308      	adds	r3, #8
 8009a94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a98:	e853 3f00 	ldrex	r3, [r3]
 8009a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	f023 0301 	bic.w	r3, r3, #1
 8009aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	3308      	adds	r3, #8
 8009aac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009aae:	633a      	str	r2, [r7, #48]	; 0x30
 8009ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ab6:	e841 2300 	strex	r3, r2, [r1]
 8009aba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1e5      	bne.n	8009a8e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2220      	movs	r2, #32
 8009ac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d12e      	bne.n	8009b36 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	e853 3f00 	ldrex	r3, [r3]
 8009aea:	60fb      	str	r3, [r7, #12]
   return(result);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f023 0310 	bic.w	r3, r3, #16
 8009af2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	461a      	mov	r2, r3
 8009afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009afc:	61fb      	str	r3, [r7, #28]
 8009afe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b00:	69b9      	ldr	r1, [r7, #24]
 8009b02:	69fa      	ldr	r2, [r7, #28]
 8009b04:	e841 2300 	strex	r3, r2, [r1]
 8009b08:	617b      	str	r3, [r7, #20]
   return(result);
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1e6      	bne.n	8009ade <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	69db      	ldr	r3, [r3, #28]
 8009b16:	f003 0310 	and.w	r3, r3, #16
 8009b1a:	2b10      	cmp	r3, #16
 8009b1c:	d103      	bne.n	8009b26 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2210      	movs	r2, #16
 8009b24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7fe fe66 	bl	8008800 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b34:	e00b      	b.n	8009b4e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7f7 fd0e 	bl	8001558 <HAL_UART_RxCpltCallback>
}
 8009b3c:	e007      	b.n	8009b4e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	699a      	ldr	r2, [r3, #24]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f042 0208 	orr.w	r2, r2, #8
 8009b4c:	619a      	str	r2, [r3, #24]
}
 8009b4e:	bf00      	nop
 8009b50:	3758      	adds	r7, #88	; 0x58
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b096      	sub	sp, #88	; 0x58
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b6e:	2b22      	cmp	r3, #34	; 0x22
 8009b70:	f040 8095 	bne.w	8009c9e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b82:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009b84:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009b88:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b92:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b98:	1c9a      	adds	r2, r3, #2
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d178      	bne.n	8009cae <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc4:	e853 3f00 	ldrex	r3, [r3]
 8009bc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bda:	643b      	str	r3, [r7, #64]	; 0x40
 8009bdc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009be0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009be2:	e841 2300 	strex	r3, r2, [r1]
 8009be6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1e6      	bne.n	8009bbc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3308      	adds	r3, #8
 8009bf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	e853 3f00 	ldrex	r3, [r3]
 8009bfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	f023 0301 	bic.w	r3, r3, #1
 8009c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3308      	adds	r3, #8
 8009c0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c16:	e841 2300 	strex	r3, r2, [r1]
 8009c1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1e5      	bne.n	8009bee <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2220      	movs	r2, #32
 8009c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d12e      	bne.n	8009c96 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	e853 3f00 	ldrex	r3, [r3]
 8009c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	f023 0310 	bic.w	r3, r3, #16
 8009c52:	647b      	str	r3, [r7, #68]	; 0x44
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	461a      	mov	r2, r3
 8009c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c5c:	61bb      	str	r3, [r7, #24]
 8009c5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c60:	6979      	ldr	r1, [r7, #20]
 8009c62:	69ba      	ldr	r2, [r7, #24]
 8009c64:	e841 2300 	strex	r3, r2, [r1]
 8009c68:	613b      	str	r3, [r7, #16]
   return(result);
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1e6      	bne.n	8009c3e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	69db      	ldr	r3, [r3, #28]
 8009c76:	f003 0310 	and.w	r3, r3, #16
 8009c7a:	2b10      	cmp	r3, #16
 8009c7c:	d103      	bne.n	8009c86 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2210      	movs	r2, #16
 8009c84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7fe fdb6 	bl	8008800 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c94:	e00b      	b.n	8009cae <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7f7 fc5e 	bl	8001558 <HAL_UART_RxCpltCallback>
}
 8009c9c:	e007      	b.n	8009cae <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	699a      	ldr	r2, [r3, #24]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f042 0208 	orr.w	r2, r2, #8
 8009cac:	619a      	str	r2, [r3, #24]
}
 8009cae:	bf00      	nop
 8009cb0:	3758      	adds	r7, #88	; 0x58
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
	...

08009cb8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b0a6      	sub	sp, #152	; 0x98
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009cc6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cee:	2b22      	cmp	r3, #34	; 0x22
 8009cf0:	f040 814d 	bne.w	8009f8e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009cfa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009cfe:	e0f4      	b.n	8009eea <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d06:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d0a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009d0e:	b2d9      	uxtb	r1, r3
 8009d10:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009d14:	b2da      	uxtb	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d1a:	400a      	ands	r2, r1
 8009d1c:	b2d2      	uxtb	r2, r2
 8009d1e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d24:	1c5a      	adds	r2, r3, #1
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	3b01      	subs	r3, #1
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	69db      	ldr	r3, [r3, #28]
 8009d42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009d46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009d4a:	f003 0307 	and.w	r3, r3, #7
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d053      	beq.n	8009dfa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d011      	beq.n	8009d82 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00b      	beq.n	8009d82 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d78:	f043 0201 	orr.w	r2, r3, #1
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009d86:	f003 0302 	and.w	r3, r3, #2
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d011      	beq.n	8009db2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009d8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d92:	f003 0301 	and.w	r3, r3, #1
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00b      	beq.n	8009db2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2202      	movs	r2, #2
 8009da0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009da8:	f043 0204 	orr.w	r2, r3, #4
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009db2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009db6:	f003 0304 	and.w	r3, r3, #4
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d011      	beq.n	8009de2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009dbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00b      	beq.n	8009de2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2204      	movs	r2, #4
 8009dd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dd8:	f043 0202 	orr.w	r2, r3, #2
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d006      	beq.n	8009dfa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7fe fcfd 	bl	80087ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d171      	bne.n	8009eea <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e0e:	e853 3f00 	ldrex	r3, [r3]
 8009e12:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009e14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009e28:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e2a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009e2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e30:	e841 2300 	strex	r3, r2, [r1]
 8009e34:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1e4      	bne.n	8009e06 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	3308      	adds	r3, #8
 8009e42:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e46:	e853 3f00 	ldrex	r3, [r3]
 8009e4a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009e4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e4e:	4b56      	ldr	r3, [pc, #344]	; (8009fa8 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8009e50:	4013      	ands	r3, r2
 8009e52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3308      	adds	r3, #8
 8009e5a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009e5c:	657a      	str	r2, [r7, #84]	; 0x54
 8009e5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e64:	e841 2300 	strex	r3, r2, [r1]
 8009e68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1e5      	bne.n	8009e3c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2220      	movs	r2, #32
 8009e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d12e      	bne.n	8009ee4 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e94:	e853 3f00 	ldrex	r3, [r3]
 8009e98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9c:	f023 0310 	bic.w	r3, r3, #16
 8009ea0:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009eaa:	643b      	str	r3, [r7, #64]	; 0x40
 8009eac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009eb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009eb2:	e841 2300 	strex	r3, r2, [r1]
 8009eb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1e6      	bne.n	8009e8c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	69db      	ldr	r3, [r3, #28]
 8009ec4:	f003 0310 	and.w	r3, r3, #16
 8009ec8:	2b10      	cmp	r3, #16
 8009eca:	d103      	bne.n	8009ed4 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2210      	movs	r2, #16
 8009ed2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009eda:	4619      	mov	r1, r3
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f7fe fc8f 	bl	8008800 <HAL_UARTEx_RxEventCallback>
 8009ee2:	e002      	b.n	8009eea <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7f7 fb37 	bl	8001558 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009eea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d006      	beq.n	8009f00 <UART_RxISR_8BIT_FIFOEN+0x248>
 8009ef2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ef6:	f003 0320 	and.w	r3, r3, #32
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f47f af00 	bne.w	8009d00 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009f0a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d045      	beq.n	8009f9e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d23e      	bcs.n	8009f9e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3308      	adds	r3, #8
 8009f26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f28:	6a3b      	ldr	r3, [r7, #32]
 8009f2a:	e853 3f00 	ldrex	r3, [r3]
 8009f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f36:	673b      	str	r3, [r7, #112]	; 0x70
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3308      	adds	r3, #8
 8009f3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009f40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f48:	e841 2300 	strex	r3, r2, [r1]
 8009f4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1e5      	bne.n	8009f20 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a15      	ldr	r2, [pc, #84]	; (8009fac <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009f58:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	e853 3f00 	ldrex	r3, [r3]
 8009f66:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	f043 0320 	orr.w	r3, r3, #32
 8009f6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	461a      	mov	r2, r3
 8009f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f78:	61bb      	str	r3, [r7, #24]
 8009f7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7c:	6979      	ldr	r1, [r7, #20]
 8009f7e:	69ba      	ldr	r2, [r7, #24]
 8009f80:	e841 2300 	strex	r3, r2, [r1]
 8009f84:	613b      	str	r3, [r7, #16]
   return(result);
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1e6      	bne.n	8009f5a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f8c:	e007      	b.n	8009f9e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	699a      	ldr	r2, [r3, #24]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f042 0208 	orr.w	r2, r2, #8
 8009f9c:	619a      	str	r2, [r3, #24]
}
 8009f9e:	bf00      	nop
 8009fa0:	3798      	adds	r7, #152	; 0x98
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	effffffe 	.word	0xeffffffe
 8009fac:	080099f7 	.word	0x080099f7

08009fb0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b0a8      	sub	sp, #160	; 0xa0
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009fbe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	69db      	ldr	r3, [r3, #28]
 8009fc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe6:	2b22      	cmp	r3, #34	; 0x22
 8009fe8:	f040 8151 	bne.w	800a28e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ff2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ff6:	e0f8      	b.n	800a1ea <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a006:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800a00a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800a00e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a012:	4013      	ands	r3, r2
 800a014:	b29a      	uxth	r2, r3
 800a016:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a01a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a020:	1c9a      	adds	r2, r3, #2
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	3b01      	subs	r3, #1
 800a030:	b29a      	uxth	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	69db      	ldr	r3, [r3, #28]
 800a03e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a042:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a046:	f003 0307 	and.w	r3, r3, #7
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d053      	beq.n	800a0f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a04e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a052:	f003 0301 	and.w	r3, r3, #1
 800a056:	2b00      	cmp	r3, #0
 800a058:	d011      	beq.n	800a07e <UART_RxISR_16BIT_FIFOEN+0xce>
 800a05a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a05e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00b      	beq.n	800a07e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2201      	movs	r2, #1
 800a06c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a074:	f043 0201 	orr.w	r2, r3, #1
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a07e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a082:	f003 0302 	and.w	r3, r3, #2
 800a086:	2b00      	cmp	r3, #0
 800a088:	d011      	beq.n	800a0ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a08a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a08e:	f003 0301 	and.w	r3, r3, #1
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00b      	beq.n	800a0ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2202      	movs	r2, #2
 800a09c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0a4:	f043 0204 	orr.w	r2, r3, #4
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0b2:	f003 0304 	and.w	r3, r3, #4
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d011      	beq.n	800a0de <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a0ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0be:	f003 0301 	and.w	r3, r3, #1
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d00b      	beq.n	800a0de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2204      	movs	r2, #4
 800a0cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0d4:	f043 0202 	orr.w	r2, r3, #2
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d006      	beq.n	800a0f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7fe fb7f 	bl	80087ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d173      	bne.n	800a1ea <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a108:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a10a:	e853 3f00 	ldrex	r3, [r3]
 800a10e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a112:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a116:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	461a      	mov	r2, r3
 800a120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a124:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a126:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a128:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a12a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a12c:	e841 2300 	strex	r3, r2, [r1]
 800a130:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a132:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1e4      	bne.n	800a102 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	3308      	adds	r3, #8
 800a13e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a142:	e853 3f00 	ldrex	r3, [r3]
 800a146:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a148:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a14a:	4b57      	ldr	r3, [pc, #348]	; (800a2a8 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800a14c:	4013      	ands	r3, r2
 800a14e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3308      	adds	r3, #8
 800a158:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a15c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a15e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a160:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a162:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a164:	e841 2300 	strex	r3, r2, [r1]
 800a168:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a16a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1e3      	bne.n	800a138 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2220      	movs	r2, #32
 800a174:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a182:	2b01      	cmp	r3, #1
 800a184:	d12e      	bne.n	800a1e4 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a194:	e853 3f00 	ldrex	r3, [r3]
 800a198:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a19c:	f023 0310 	bic.w	r3, r3, #16
 800a1a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a1aa:	647b      	str	r3, [r7, #68]	; 0x44
 800a1ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1b2:	e841 2300 	strex	r3, r2, [r1]
 800a1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1e6      	bne.n	800a18c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	69db      	ldr	r3, [r3, #28]
 800a1c4:	f003 0310 	and.w	r3, r3, #16
 800a1c8:	2b10      	cmp	r3, #16
 800a1ca:	d103      	bne.n	800a1d4 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2210      	movs	r2, #16
 800a1d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a1da:	4619      	mov	r1, r3
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f7fe fb0f 	bl	8008800 <HAL_UARTEx_RxEventCallback>
 800a1e2:	e002      	b.n	800a1ea <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f7f7 f9b7 	bl	8001558 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a1ea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d006      	beq.n	800a200 <UART_RxISR_16BIT_FIFOEN+0x250>
 800a1f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a1f6:	f003 0320 	and.w	r3, r3, #32
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f47f aefc 	bne.w	8009ff8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a206:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a20a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d045      	beq.n	800a29e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a218:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d23e      	bcs.n	800a29e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3308      	adds	r3, #8
 800a226:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	e853 3f00 	ldrex	r3, [r3]
 800a22e:	623b      	str	r3, [r7, #32]
   return(result);
 800a230:	6a3b      	ldr	r3, [r7, #32]
 800a232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a236:	677b      	str	r3, [r7, #116]	; 0x74
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	3308      	adds	r3, #8
 800a23e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a240:	633a      	str	r2, [r7, #48]	; 0x30
 800a242:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a244:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a248:	e841 2300 	strex	r3, r2, [r1]
 800a24c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1e5      	bne.n	800a220 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a15      	ldr	r2, [pc, #84]	; (800a2ac <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a258:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	e853 3f00 	ldrex	r3, [r3]
 800a266:	60fb      	str	r3, [r7, #12]
   return(result);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f043 0320 	orr.w	r3, r3, #32
 800a26e:	673b      	str	r3, [r7, #112]	; 0x70
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	461a      	mov	r2, r3
 800a276:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a278:	61fb      	str	r3, [r7, #28]
 800a27a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27c:	69b9      	ldr	r1, [r7, #24]
 800a27e:	69fa      	ldr	r2, [r7, #28]
 800a280:	e841 2300 	strex	r3, r2, [r1]
 800a284:	617b      	str	r3, [r7, #20]
   return(result);
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1e6      	bne.n	800a25a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a28c:	e007      	b.n	800a29e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	699a      	ldr	r2, [r3, #24]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f042 0208 	orr.w	r2, r2, #8
 800a29c:	619a      	str	r2, [r3, #24]
}
 800a29e:	bf00      	nop
 800a2a0:	37a0      	adds	r7, #160	; 0xa0
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	effffffe 	.word	0xeffffffe
 800a2ac:	08009b57 	.word	0x08009b57

0800a2b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a2b8:	bf00      	nop
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d101      	bne.n	800a302 <HAL_UARTEx_DisableFifoMode+0x16>
 800a2fe:	2302      	movs	r3, #2
 800a300:	e027      	b.n	800a352 <HAL_UARTEx_DisableFifoMode+0x66>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2201      	movs	r2, #1
 800a306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2224      	movs	r2, #36	; 0x24
 800a30e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f022 0201 	bic.w	r2, r2, #1
 800a328:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a330:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2220      	movs	r2, #32
 800a344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3714      	adds	r7, #20
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr

0800a35e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b084      	sub	sp, #16
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
 800a366:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d101      	bne.n	800a376 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a372:	2302      	movs	r3, #2
 800a374:	e02d      	b.n	800a3d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2224      	movs	r2, #36	; 0x24
 800a382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f022 0201 	bic.w	r2, r2, #1
 800a39c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	683a      	ldr	r2, [r7, #0]
 800a3ae:	430a      	orrs	r2, r1
 800a3b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 f850 	bl	800a458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2220      	movs	r2, #32
 800a3c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3710      	adds	r7, #16
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b084      	sub	sp, #16
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d101      	bne.n	800a3f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	e02d      	b.n	800a44e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2224      	movs	r2, #36	; 0x24
 800a3fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f022 0201 	bic.w	r2, r2, #1
 800a418:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	683a      	ldr	r2, [r7, #0]
 800a42a:	430a      	orrs	r2, r1
 800a42c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 f812 	bl	800a458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2220      	movs	r2, #32
 800a440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
	...

0800a458 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a464:	2b00      	cmp	r3, #0
 800a466:	d108      	bne.n	800a47a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a478:	e031      	b.n	800a4de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a47a:	2310      	movs	r3, #16
 800a47c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a47e:	2310      	movs	r3, #16
 800a480:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	0e5b      	lsrs	r3, r3, #25
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	f003 0307 	and.w	r3, r3, #7
 800a490:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	0f5b      	lsrs	r3, r3, #29
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	f003 0307 	and.w	r3, r3, #7
 800a4a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4a2:	7bbb      	ldrb	r3, [r7, #14]
 800a4a4:	7b3a      	ldrb	r2, [r7, #12]
 800a4a6:	4911      	ldr	r1, [pc, #68]	; (800a4ec <UARTEx_SetNbDataToProcess+0x94>)
 800a4a8:	5c8a      	ldrb	r2, [r1, r2]
 800a4aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4ae:	7b3a      	ldrb	r2, [r7, #12]
 800a4b0:	490f      	ldr	r1, [pc, #60]	; (800a4f0 <UARTEx_SetNbDataToProcess+0x98>)
 800a4b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4b8:	b29a      	uxth	r2, r3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4c0:	7bfb      	ldrb	r3, [r7, #15]
 800a4c2:	7b7a      	ldrb	r2, [r7, #13]
 800a4c4:	4909      	ldr	r1, [pc, #36]	; (800a4ec <UARTEx_SetNbDataToProcess+0x94>)
 800a4c6:	5c8a      	ldrb	r2, [r1, r2]
 800a4c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a4cc:	7b7a      	ldrb	r2, [r7, #13]
 800a4ce:	4908      	ldr	r1, [pc, #32]	; (800a4f0 <UARTEx_SetNbDataToProcess+0x98>)
 800a4d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a4de:	bf00      	nop
 800a4e0:	3714      	adds	r7, #20
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	0800f67c 	.word	0x0800f67c
 800a4f0:	0800f684 	.word	0x0800f684

0800a4f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	f107 001c 	add.w	r0, r7, #28
 800a502:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d120      	bne.n	800a54e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a510:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	68da      	ldr	r2, [r3, #12]
 800a51c:	4b2a      	ldr	r3, [pc, #168]	; (800a5c8 <USB_CoreInit+0xd4>)
 800a51e:	4013      	ands	r3, r2
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a532:	2b01      	cmp	r3, #1
 800a534:	d105      	bne.n	800a542 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 faac 	bl	800aaa0 <USB_CoreReset>
 800a548:	4603      	mov	r3, r0
 800a54a:	73fb      	strb	r3, [r7, #15]
 800a54c:	e01a      	b.n	800a584 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 faa0 	bl	800aaa0 <USB_CoreReset>
 800a560:	4603      	mov	r3, r0
 800a562:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a566:	2b00      	cmp	r3, #0
 800a568:	d106      	bne.n	800a578 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	639a      	str	r2, [r3, #56]	; 0x38
 800a576:	e005      	b.n	800a584 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a586:	2b01      	cmp	r3, #1
 800a588:	d116      	bne.n	800a5b8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a58e:	b29a      	uxth	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a598:	4b0c      	ldr	r3, [pc, #48]	; (800a5cc <USB_CoreInit+0xd8>)
 800a59a:	4313      	orrs	r3, r2
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	f043 0206 	orr.w	r2, r3, #6
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	f043 0220 	orr.w	r2, r3, #32
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5c4:	b004      	add	sp, #16
 800a5c6:	4770      	bx	lr
 800a5c8:	ffbdffbf 	.word	0xffbdffbf
 800a5cc:	03ee0000 	.word	0x03ee0000

0800a5d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	f023 0201 	bic.w	r2, r3, #1
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	370c      	adds	r7, #12
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b084      	sub	sp, #16
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a5fe:	2300      	movs	r3, #0
 800a600:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a60e:	78fb      	ldrb	r3, [r7, #3]
 800a610:	2b01      	cmp	r3, #1
 800a612:	d115      	bne.n	800a640 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a620:	2001      	movs	r0, #1
 800a622:	f7f8 fa89 	bl	8002b38 <HAL_Delay>
      ms++;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	3301      	adds	r3, #1
 800a62a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 fa29 	bl	800aa84 <USB_GetMode>
 800a632:	4603      	mov	r3, r0
 800a634:	2b01      	cmp	r3, #1
 800a636:	d01e      	beq.n	800a676 <USB_SetCurrentMode+0x84>
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2b31      	cmp	r3, #49	; 0x31
 800a63c:	d9f0      	bls.n	800a620 <USB_SetCurrentMode+0x2e>
 800a63e:	e01a      	b.n	800a676 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a640:	78fb      	ldrb	r3, [r7, #3]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d115      	bne.n	800a672 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a652:	2001      	movs	r0, #1
 800a654:	f7f8 fa70 	bl	8002b38 <HAL_Delay>
      ms++;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	3301      	adds	r3, #1
 800a65c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fa10 	bl	800aa84 <USB_GetMode>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d005      	beq.n	800a676 <USB_SetCurrentMode+0x84>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2b31      	cmp	r3, #49	; 0x31
 800a66e:	d9f0      	bls.n	800a652 <USB_SetCurrentMode+0x60>
 800a670:	e001      	b.n	800a676 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	e005      	b.n	800a682 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2b32      	cmp	r3, #50	; 0x32
 800a67a:	d101      	bne.n	800a680 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	e000      	b.n	800a682 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
	...

0800a68c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a68c:	b084      	sub	sp, #16
 800a68e:	b580      	push	{r7, lr}
 800a690:	b086      	sub	sp, #24
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
 800a696:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a69a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	613b      	str	r3, [r7, #16]
 800a6aa:	e009      	b.n	800a6c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	3340      	adds	r3, #64	; 0x40
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	4413      	add	r3, r2
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	613b      	str	r3, [r7, #16]
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	2b0e      	cmp	r3, #14
 800a6c4:	d9f2      	bls.n	800a6ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a6c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d11c      	bne.n	800a706 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6da:	f043 0302 	orr.w	r3, r3, #2
 800a6de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	601a      	str	r2, [r3, #0]
 800a704:	e005      	b.n	800a712 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a718:	461a      	mov	r2, r3
 800a71a:	2300      	movs	r3, #0
 800a71c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a724:	4619      	mov	r1, r3
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a72c:	461a      	mov	r2, r3
 800a72e:	680b      	ldr	r3, [r1, #0]
 800a730:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a734:	2b01      	cmp	r3, #1
 800a736:	d10c      	bne.n	800a752 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d104      	bne.n	800a748 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a73e:	2100      	movs	r1, #0
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f965 	bl	800aa10 <USB_SetDevSpeed>
 800a746:	e008      	b.n	800a75a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a748:	2101      	movs	r1, #1
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 f960 	bl	800aa10 <USB_SetDevSpeed>
 800a750:	e003      	b.n	800a75a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a752:	2103      	movs	r1, #3
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f95b 	bl	800aa10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a75a:	2110      	movs	r1, #16
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 f8f3 	bl	800a948 <USB_FlushTxFifo>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d001      	beq.n	800a76c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 f91f 	bl	800a9b0 <USB_FlushRxFifo>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d001      	beq.n	800a77c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a782:	461a      	mov	r2, r3
 800a784:	2300      	movs	r3, #0
 800a786:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a78e:	461a      	mov	r2, r3
 800a790:	2300      	movs	r3, #0
 800a792:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a79a:	461a      	mov	r2, r3
 800a79c:	2300      	movs	r3, #0
 800a79e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	613b      	str	r3, [r7, #16]
 800a7a4:	e043      	b.n	800a82e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7bc:	d118      	bne.n	800a7f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d10a      	bne.n	800a7da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a7d6:	6013      	str	r3, [r2, #0]
 800a7d8:	e013      	b.n	800a802 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	015a      	lsls	r2, r3, #5
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a7ec:	6013      	str	r3, [r2, #0]
 800a7ee:	e008      	b.n	800a802 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	015a      	lsls	r2, r3, #5
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	2300      	movs	r3, #0
 800a800:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	015a      	lsls	r2, r3, #5
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	4413      	add	r3, r2
 800a80a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a80e:	461a      	mov	r2, r3
 800a810:	2300      	movs	r3, #0
 800a812:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	015a      	lsls	r2, r3, #5
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	4413      	add	r3, r2
 800a81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a820:	461a      	mov	r2, r3
 800a822:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a826:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	3301      	adds	r3, #1
 800a82c:	613b      	str	r3, [r7, #16]
 800a82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	429a      	cmp	r2, r3
 800a834:	d3b7      	bcc.n	800a7a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a836:	2300      	movs	r3, #0
 800a838:	613b      	str	r3, [r7, #16]
 800a83a:	e043      	b.n	800a8c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	4413      	add	r3, r2
 800a844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a84e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a852:	d118      	bne.n	800a886 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10a      	bne.n	800a870 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	015a      	lsls	r2, r3, #5
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	4413      	add	r3, r2
 800a862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a866:	461a      	mov	r2, r3
 800a868:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a86c:	6013      	str	r3, [r2, #0]
 800a86e:	e013      	b.n	800a898 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	015a      	lsls	r2, r3, #5
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	4413      	add	r3, r2
 800a878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a87c:	461a      	mov	r2, r3
 800a87e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a882:	6013      	str	r3, [r2, #0]
 800a884:	e008      	b.n	800a898 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	015a      	lsls	r2, r3, #5
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	4413      	add	r3, r2
 800a88e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a892:	461a      	mov	r2, r3
 800a894:	2300      	movs	r3, #0
 800a896:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	015a      	lsls	r2, r3, #5
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	015a      	lsls	r2, r3, #5
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a8bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	613b      	str	r3, [r7, #16]
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d3b7      	bcc.n	800a83c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a8ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d105      	bne.n	800a900 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	699b      	ldr	r3, [r3, #24]
 800a8f8:	f043 0210 	orr.w	r2, r3, #16
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	699a      	ldr	r2, [r3, #24]
 800a904:	4b0e      	ldr	r3, [pc, #56]	; (800a940 <USB_DevInit+0x2b4>)
 800a906:	4313      	orrs	r3, r2
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d005      	beq.n	800a91e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	f043 0208 	orr.w	r2, r3, #8
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a91e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a920:	2b01      	cmp	r3, #1
 800a922:	d105      	bne.n	800a930 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	699a      	ldr	r2, [r3, #24]
 800a928:	4b06      	ldr	r3, [pc, #24]	; (800a944 <USB_DevInit+0x2b8>)
 800a92a:	4313      	orrs	r3, r2
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a930:	7dfb      	ldrb	r3, [r7, #23]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a93c:	b004      	add	sp, #16
 800a93e:	4770      	bx	lr
 800a940:	803c3800 	.word	0x803c3800
 800a944:	40000004 	.word	0x40000004

0800a948 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a952:	2300      	movs	r3, #0
 800a954:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	3301      	adds	r3, #1
 800a95a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4a13      	ldr	r2, [pc, #76]	; (800a9ac <USB_FlushTxFifo+0x64>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d901      	bls.n	800a968 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a964:	2303      	movs	r3, #3
 800a966:	e01b      	b.n	800a9a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	daf2      	bge.n	800a956 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a970:	2300      	movs	r3, #0
 800a972:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	019b      	lsls	r3, r3, #6
 800a978:	f043 0220 	orr.w	r2, r3, #32
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	3301      	adds	r3, #1
 800a984:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4a08      	ldr	r2, [pc, #32]	; (800a9ac <USB_FlushTxFifo+0x64>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d901      	bls.n	800a992 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a98e:	2303      	movs	r3, #3
 800a990:	e006      	b.n	800a9a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	f003 0320 	and.w	r3, r3, #32
 800a99a:	2b20      	cmp	r3, #32
 800a99c:	d0f0      	beq.n	800a980 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	00030d40 	.word	0x00030d40

0800a9b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	4a11      	ldr	r2, [pc, #68]	; (800aa0c <USB_FlushRxFifo+0x5c>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d901      	bls.n	800a9ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e018      	b.n	800aa00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	daf2      	bge.n	800a9bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2210      	movs	r2, #16
 800a9de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	4a08      	ldr	r2, [pc, #32]	; (800aa0c <USB_FlushRxFifo+0x5c>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d901      	bls.n	800a9f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	e006      	b.n	800aa00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	f003 0310 	and.w	r3, r3, #16
 800a9fa:	2b10      	cmp	r3, #16
 800a9fc:	d0f0      	beq.n	800a9e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3714      	adds	r7, #20
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr
 800aa0c:	00030d40 	.word	0x00030d40

0800aa10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	78fb      	ldrb	r3, [r7, #3]
 800aa2a:	68f9      	ldr	r1, [r7, #12]
 800aa2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa30:	4313      	orrs	r3, r2
 800aa32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b085      	sub	sp, #20
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa5c:	f023 0303 	bic.w	r3, r3, #3
 800aa60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa70:	f043 0302 	orr.w	r3, r3, #2
 800aa74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa76:	2300      	movs	r3, #0
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3714      	adds	r7, #20
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	695b      	ldr	r3, [r3, #20]
 800aa90:	f003 0301 	and.w	r3, r3, #1
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	3301      	adds	r3, #1
 800aab0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	4a13      	ldr	r2, [pc, #76]	; (800ab04 <USB_CoreReset+0x64>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d901      	bls.n	800aabe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aaba:	2303      	movs	r3, #3
 800aabc:	e01b      	b.n	800aaf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	daf2      	bge.n	800aaac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aac6:	2300      	movs	r3, #0
 800aac8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	f043 0201 	orr.w	r2, r3, #1
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	3301      	adds	r3, #1
 800aada:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4a09      	ldr	r2, [pc, #36]	; (800ab04 <USB_CoreReset+0x64>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d901      	bls.n	800aae8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aae4:	2303      	movs	r3, #3
 800aae6:	e006      	b.n	800aaf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	f003 0301 	and.w	r3, r3, #1
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d0f0      	beq.n	800aad6 <USB_CoreReset+0x36>

  return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	00030d40 	.word	0x00030d40

0800ab08 <__errno>:
 800ab08:	4b01      	ldr	r3, [pc, #4]	; (800ab10 <__errno+0x8>)
 800ab0a:	6818      	ldr	r0, [r3, #0]
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	24000010 	.word	0x24000010

0800ab14 <__libc_init_array>:
 800ab14:	b570      	push	{r4, r5, r6, lr}
 800ab16:	4d0d      	ldr	r5, [pc, #52]	; (800ab4c <__libc_init_array+0x38>)
 800ab18:	4c0d      	ldr	r4, [pc, #52]	; (800ab50 <__libc_init_array+0x3c>)
 800ab1a:	1b64      	subs	r4, r4, r5
 800ab1c:	10a4      	asrs	r4, r4, #2
 800ab1e:	2600      	movs	r6, #0
 800ab20:	42a6      	cmp	r6, r4
 800ab22:	d109      	bne.n	800ab38 <__libc_init_array+0x24>
 800ab24:	4d0b      	ldr	r5, [pc, #44]	; (800ab54 <__libc_init_array+0x40>)
 800ab26:	4c0c      	ldr	r4, [pc, #48]	; (800ab58 <__libc_init_array+0x44>)
 800ab28:	f004 fb8a 	bl	800f240 <_init>
 800ab2c:	1b64      	subs	r4, r4, r5
 800ab2e:	10a4      	asrs	r4, r4, #2
 800ab30:	2600      	movs	r6, #0
 800ab32:	42a6      	cmp	r6, r4
 800ab34:	d105      	bne.n	800ab42 <__libc_init_array+0x2e>
 800ab36:	bd70      	pop	{r4, r5, r6, pc}
 800ab38:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab3c:	4798      	blx	r3
 800ab3e:	3601      	adds	r6, #1
 800ab40:	e7ee      	b.n	800ab20 <__libc_init_array+0xc>
 800ab42:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab46:	4798      	blx	r3
 800ab48:	3601      	adds	r6, #1
 800ab4a:	e7f2      	b.n	800ab32 <__libc_init_array+0x1e>
 800ab4c:	0800fb3c 	.word	0x0800fb3c
 800ab50:	0800fb3c 	.word	0x0800fb3c
 800ab54:	0800fb3c 	.word	0x0800fb3c
 800ab58:	0800fb40 	.word	0x0800fb40

0800ab5c <memset>:
 800ab5c:	4402      	add	r2, r0
 800ab5e:	4603      	mov	r3, r0
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d100      	bne.n	800ab66 <memset+0xa>
 800ab64:	4770      	bx	lr
 800ab66:	f803 1b01 	strb.w	r1, [r3], #1
 800ab6a:	e7f9      	b.n	800ab60 <memset+0x4>

0800ab6c <__cvt>:
 800ab6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab6e:	ed2d 8b02 	vpush	{d8}
 800ab72:	eeb0 8b40 	vmov.f64	d8, d0
 800ab76:	b085      	sub	sp, #20
 800ab78:	4617      	mov	r7, r2
 800ab7a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ab7c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ab7e:	ee18 2a90 	vmov	r2, s17
 800ab82:	f025 0520 	bic.w	r5, r5, #32
 800ab86:	2a00      	cmp	r2, #0
 800ab88:	bfb6      	itet	lt
 800ab8a:	222d      	movlt	r2, #45	; 0x2d
 800ab8c:	2200      	movge	r2, #0
 800ab8e:	eeb1 8b40 	vneglt.f64	d8, d0
 800ab92:	2d46      	cmp	r5, #70	; 0x46
 800ab94:	460c      	mov	r4, r1
 800ab96:	701a      	strb	r2, [r3, #0]
 800ab98:	d004      	beq.n	800aba4 <__cvt+0x38>
 800ab9a:	2d45      	cmp	r5, #69	; 0x45
 800ab9c:	d100      	bne.n	800aba0 <__cvt+0x34>
 800ab9e:	3401      	adds	r4, #1
 800aba0:	2102      	movs	r1, #2
 800aba2:	e000      	b.n	800aba6 <__cvt+0x3a>
 800aba4:	2103      	movs	r1, #3
 800aba6:	ab03      	add	r3, sp, #12
 800aba8:	9301      	str	r3, [sp, #4]
 800abaa:	ab02      	add	r3, sp, #8
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	4622      	mov	r2, r4
 800abb0:	4633      	mov	r3, r6
 800abb2:	eeb0 0b48 	vmov.f64	d0, d8
 800abb6:	f001 fd2f 	bl	800c618 <_dtoa_r>
 800abba:	2d47      	cmp	r5, #71	; 0x47
 800abbc:	d101      	bne.n	800abc2 <__cvt+0x56>
 800abbe:	07fb      	lsls	r3, r7, #31
 800abc0:	d51a      	bpl.n	800abf8 <__cvt+0x8c>
 800abc2:	2d46      	cmp	r5, #70	; 0x46
 800abc4:	eb00 0204 	add.w	r2, r0, r4
 800abc8:	d10c      	bne.n	800abe4 <__cvt+0x78>
 800abca:	7803      	ldrb	r3, [r0, #0]
 800abcc:	2b30      	cmp	r3, #48	; 0x30
 800abce:	d107      	bne.n	800abe0 <__cvt+0x74>
 800abd0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800abd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abd8:	bf1c      	itt	ne
 800abda:	f1c4 0401 	rsbne	r4, r4, #1
 800abde:	6034      	strne	r4, [r6, #0]
 800abe0:	6833      	ldr	r3, [r6, #0]
 800abe2:	441a      	add	r2, r3
 800abe4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800abe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abec:	bf08      	it	eq
 800abee:	9203      	streq	r2, [sp, #12]
 800abf0:	2130      	movs	r1, #48	; 0x30
 800abf2:	9b03      	ldr	r3, [sp, #12]
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d307      	bcc.n	800ac08 <__cvt+0x9c>
 800abf8:	9b03      	ldr	r3, [sp, #12]
 800abfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abfc:	1a1b      	subs	r3, r3, r0
 800abfe:	6013      	str	r3, [r2, #0]
 800ac00:	b005      	add	sp, #20
 800ac02:	ecbd 8b02 	vpop	{d8}
 800ac06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac08:	1c5c      	adds	r4, r3, #1
 800ac0a:	9403      	str	r4, [sp, #12]
 800ac0c:	7019      	strb	r1, [r3, #0]
 800ac0e:	e7f0      	b.n	800abf2 <__cvt+0x86>

0800ac10 <__exponent>:
 800ac10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac12:	4603      	mov	r3, r0
 800ac14:	2900      	cmp	r1, #0
 800ac16:	bfb8      	it	lt
 800ac18:	4249      	neglt	r1, r1
 800ac1a:	f803 2b02 	strb.w	r2, [r3], #2
 800ac1e:	bfb4      	ite	lt
 800ac20:	222d      	movlt	r2, #45	; 0x2d
 800ac22:	222b      	movge	r2, #43	; 0x2b
 800ac24:	2909      	cmp	r1, #9
 800ac26:	7042      	strb	r2, [r0, #1]
 800ac28:	dd2a      	ble.n	800ac80 <__exponent+0x70>
 800ac2a:	f10d 0407 	add.w	r4, sp, #7
 800ac2e:	46a4      	mov	ip, r4
 800ac30:	270a      	movs	r7, #10
 800ac32:	46a6      	mov	lr, r4
 800ac34:	460a      	mov	r2, r1
 800ac36:	fb91 f6f7 	sdiv	r6, r1, r7
 800ac3a:	fb07 1516 	mls	r5, r7, r6, r1
 800ac3e:	3530      	adds	r5, #48	; 0x30
 800ac40:	2a63      	cmp	r2, #99	; 0x63
 800ac42:	f104 34ff 	add.w	r4, r4, #4294967295
 800ac46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ac4a:	4631      	mov	r1, r6
 800ac4c:	dcf1      	bgt.n	800ac32 <__exponent+0x22>
 800ac4e:	3130      	adds	r1, #48	; 0x30
 800ac50:	f1ae 0502 	sub.w	r5, lr, #2
 800ac54:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ac58:	1c44      	adds	r4, r0, #1
 800ac5a:	4629      	mov	r1, r5
 800ac5c:	4561      	cmp	r1, ip
 800ac5e:	d30a      	bcc.n	800ac76 <__exponent+0x66>
 800ac60:	f10d 0209 	add.w	r2, sp, #9
 800ac64:	eba2 020e 	sub.w	r2, r2, lr
 800ac68:	4565      	cmp	r5, ip
 800ac6a:	bf88      	it	hi
 800ac6c:	2200      	movhi	r2, #0
 800ac6e:	4413      	add	r3, r2
 800ac70:	1a18      	subs	r0, r3, r0
 800ac72:	b003      	add	sp, #12
 800ac74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ac7e:	e7ed      	b.n	800ac5c <__exponent+0x4c>
 800ac80:	2330      	movs	r3, #48	; 0x30
 800ac82:	3130      	adds	r1, #48	; 0x30
 800ac84:	7083      	strb	r3, [r0, #2]
 800ac86:	70c1      	strb	r1, [r0, #3]
 800ac88:	1d03      	adds	r3, r0, #4
 800ac8a:	e7f1      	b.n	800ac70 <__exponent+0x60>
 800ac8c:	0000      	movs	r0, r0
	...

0800ac90 <_printf_float>:
 800ac90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac94:	b08b      	sub	sp, #44	; 0x2c
 800ac96:	460c      	mov	r4, r1
 800ac98:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ac9c:	4616      	mov	r6, r2
 800ac9e:	461f      	mov	r7, r3
 800aca0:	4605      	mov	r5, r0
 800aca2:	f002 fd97 	bl	800d7d4 <_localeconv_r>
 800aca6:	f8d0 b000 	ldr.w	fp, [r0]
 800acaa:	4658      	mov	r0, fp
 800acac:	f7f5 fb22 	bl	80002f4 <strlen>
 800acb0:	2300      	movs	r3, #0
 800acb2:	9308      	str	r3, [sp, #32]
 800acb4:	f8d8 3000 	ldr.w	r3, [r8]
 800acb8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800acbc:	6822      	ldr	r2, [r4, #0]
 800acbe:	3307      	adds	r3, #7
 800acc0:	f023 0307 	bic.w	r3, r3, #7
 800acc4:	f103 0108 	add.w	r1, r3, #8
 800acc8:	f8c8 1000 	str.w	r1, [r8]
 800accc:	4682      	mov	sl, r0
 800acce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800acd2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800acd6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800af38 <_printf_float+0x2a8>
 800acda:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800acde:	eeb0 6bc0 	vabs.f64	d6, d0
 800ace2:	eeb4 6b47 	vcmp.f64	d6, d7
 800ace6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acea:	dd24      	ble.n	800ad36 <_printf_float+0xa6>
 800acec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800acf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf4:	d502      	bpl.n	800acfc <_printf_float+0x6c>
 800acf6:	232d      	movs	r3, #45	; 0x2d
 800acf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acfc:	4b90      	ldr	r3, [pc, #576]	; (800af40 <_printf_float+0x2b0>)
 800acfe:	4891      	ldr	r0, [pc, #580]	; (800af44 <_printf_float+0x2b4>)
 800ad00:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ad04:	bf94      	ite	ls
 800ad06:	4698      	movls	r8, r3
 800ad08:	4680      	movhi	r8, r0
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	6123      	str	r3, [r4, #16]
 800ad0e:	f022 0204 	bic.w	r2, r2, #4
 800ad12:	2300      	movs	r3, #0
 800ad14:	6022      	str	r2, [r4, #0]
 800ad16:	9304      	str	r3, [sp, #16]
 800ad18:	9700      	str	r7, [sp, #0]
 800ad1a:	4633      	mov	r3, r6
 800ad1c:	aa09      	add	r2, sp, #36	; 0x24
 800ad1e:	4621      	mov	r1, r4
 800ad20:	4628      	mov	r0, r5
 800ad22:	f000 f9d3 	bl	800b0cc <_printf_common>
 800ad26:	3001      	adds	r0, #1
 800ad28:	f040 808a 	bne.w	800ae40 <_printf_float+0x1b0>
 800ad2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad30:	b00b      	add	sp, #44	; 0x2c
 800ad32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad36:	eeb4 0b40 	vcmp.f64	d0, d0
 800ad3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad3e:	d709      	bvc.n	800ad54 <_printf_float+0xc4>
 800ad40:	ee10 3a90 	vmov	r3, s1
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	bfbc      	itt	lt
 800ad48:	232d      	movlt	r3, #45	; 0x2d
 800ad4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad4e:	487e      	ldr	r0, [pc, #504]	; (800af48 <_printf_float+0x2b8>)
 800ad50:	4b7e      	ldr	r3, [pc, #504]	; (800af4c <_printf_float+0x2bc>)
 800ad52:	e7d5      	b.n	800ad00 <_printf_float+0x70>
 800ad54:	6863      	ldr	r3, [r4, #4]
 800ad56:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ad5a:	9104      	str	r1, [sp, #16]
 800ad5c:	1c59      	adds	r1, r3, #1
 800ad5e:	d13c      	bne.n	800adda <_printf_float+0x14a>
 800ad60:	2306      	movs	r3, #6
 800ad62:	6063      	str	r3, [r4, #4]
 800ad64:	2300      	movs	r3, #0
 800ad66:	9303      	str	r3, [sp, #12]
 800ad68:	ab08      	add	r3, sp, #32
 800ad6a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ad6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ad72:	ab07      	add	r3, sp, #28
 800ad74:	6861      	ldr	r1, [r4, #4]
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	6022      	str	r2, [r4, #0]
 800ad7a:	f10d 031b 	add.w	r3, sp, #27
 800ad7e:	4628      	mov	r0, r5
 800ad80:	f7ff fef4 	bl	800ab6c <__cvt>
 800ad84:	9b04      	ldr	r3, [sp, #16]
 800ad86:	9907      	ldr	r1, [sp, #28]
 800ad88:	2b47      	cmp	r3, #71	; 0x47
 800ad8a:	4680      	mov	r8, r0
 800ad8c:	d108      	bne.n	800ada0 <_printf_float+0x110>
 800ad8e:	1cc8      	adds	r0, r1, #3
 800ad90:	db02      	blt.n	800ad98 <_printf_float+0x108>
 800ad92:	6863      	ldr	r3, [r4, #4]
 800ad94:	4299      	cmp	r1, r3
 800ad96:	dd41      	ble.n	800ae1c <_printf_float+0x18c>
 800ad98:	f1a9 0902 	sub.w	r9, r9, #2
 800ad9c:	fa5f f989 	uxtb.w	r9, r9
 800ada0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ada4:	d820      	bhi.n	800ade8 <_printf_float+0x158>
 800ada6:	3901      	subs	r1, #1
 800ada8:	464a      	mov	r2, r9
 800adaa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800adae:	9107      	str	r1, [sp, #28]
 800adb0:	f7ff ff2e 	bl	800ac10 <__exponent>
 800adb4:	9a08      	ldr	r2, [sp, #32]
 800adb6:	9004      	str	r0, [sp, #16]
 800adb8:	1813      	adds	r3, r2, r0
 800adba:	2a01      	cmp	r2, #1
 800adbc:	6123      	str	r3, [r4, #16]
 800adbe:	dc02      	bgt.n	800adc6 <_printf_float+0x136>
 800adc0:	6822      	ldr	r2, [r4, #0]
 800adc2:	07d2      	lsls	r2, r2, #31
 800adc4:	d501      	bpl.n	800adca <_printf_float+0x13a>
 800adc6:	3301      	adds	r3, #1
 800adc8:	6123      	str	r3, [r4, #16]
 800adca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d0a2      	beq.n	800ad18 <_printf_float+0x88>
 800add2:	232d      	movs	r3, #45	; 0x2d
 800add4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800add8:	e79e      	b.n	800ad18 <_printf_float+0x88>
 800adda:	9904      	ldr	r1, [sp, #16]
 800addc:	2947      	cmp	r1, #71	; 0x47
 800adde:	d1c1      	bne.n	800ad64 <_printf_float+0xd4>
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1bf      	bne.n	800ad64 <_printf_float+0xd4>
 800ade4:	2301      	movs	r3, #1
 800ade6:	e7bc      	b.n	800ad62 <_printf_float+0xd2>
 800ade8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800adec:	d118      	bne.n	800ae20 <_printf_float+0x190>
 800adee:	2900      	cmp	r1, #0
 800adf0:	6863      	ldr	r3, [r4, #4]
 800adf2:	dd0b      	ble.n	800ae0c <_printf_float+0x17c>
 800adf4:	6121      	str	r1, [r4, #16]
 800adf6:	b913      	cbnz	r3, 800adfe <_printf_float+0x16e>
 800adf8:	6822      	ldr	r2, [r4, #0]
 800adfa:	07d0      	lsls	r0, r2, #31
 800adfc:	d502      	bpl.n	800ae04 <_printf_float+0x174>
 800adfe:	3301      	adds	r3, #1
 800ae00:	440b      	add	r3, r1
 800ae02:	6123      	str	r3, [r4, #16]
 800ae04:	2300      	movs	r3, #0
 800ae06:	65a1      	str	r1, [r4, #88]	; 0x58
 800ae08:	9304      	str	r3, [sp, #16]
 800ae0a:	e7de      	b.n	800adca <_printf_float+0x13a>
 800ae0c:	b913      	cbnz	r3, 800ae14 <_printf_float+0x184>
 800ae0e:	6822      	ldr	r2, [r4, #0]
 800ae10:	07d2      	lsls	r2, r2, #31
 800ae12:	d501      	bpl.n	800ae18 <_printf_float+0x188>
 800ae14:	3302      	adds	r3, #2
 800ae16:	e7f4      	b.n	800ae02 <_printf_float+0x172>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e7f2      	b.n	800ae02 <_printf_float+0x172>
 800ae1c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ae20:	9b08      	ldr	r3, [sp, #32]
 800ae22:	4299      	cmp	r1, r3
 800ae24:	db05      	blt.n	800ae32 <_printf_float+0x1a2>
 800ae26:	6823      	ldr	r3, [r4, #0]
 800ae28:	6121      	str	r1, [r4, #16]
 800ae2a:	07d8      	lsls	r0, r3, #31
 800ae2c:	d5ea      	bpl.n	800ae04 <_printf_float+0x174>
 800ae2e:	1c4b      	adds	r3, r1, #1
 800ae30:	e7e7      	b.n	800ae02 <_printf_float+0x172>
 800ae32:	2900      	cmp	r1, #0
 800ae34:	bfd4      	ite	le
 800ae36:	f1c1 0202 	rsble	r2, r1, #2
 800ae3a:	2201      	movgt	r2, #1
 800ae3c:	4413      	add	r3, r2
 800ae3e:	e7e0      	b.n	800ae02 <_printf_float+0x172>
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	055a      	lsls	r2, r3, #21
 800ae44:	d407      	bmi.n	800ae56 <_printf_float+0x1c6>
 800ae46:	6923      	ldr	r3, [r4, #16]
 800ae48:	4642      	mov	r2, r8
 800ae4a:	4631      	mov	r1, r6
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	47b8      	blx	r7
 800ae50:	3001      	adds	r0, #1
 800ae52:	d12a      	bne.n	800aeaa <_printf_float+0x21a>
 800ae54:	e76a      	b.n	800ad2c <_printf_float+0x9c>
 800ae56:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ae5a:	f240 80e2 	bls.w	800b022 <_printf_float+0x392>
 800ae5e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ae62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae6a:	d133      	bne.n	800aed4 <_printf_float+0x244>
 800ae6c:	4a38      	ldr	r2, [pc, #224]	; (800af50 <_printf_float+0x2c0>)
 800ae6e:	2301      	movs	r3, #1
 800ae70:	4631      	mov	r1, r6
 800ae72:	4628      	mov	r0, r5
 800ae74:	47b8      	blx	r7
 800ae76:	3001      	adds	r0, #1
 800ae78:	f43f af58 	beq.w	800ad2c <_printf_float+0x9c>
 800ae7c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	db02      	blt.n	800ae8a <_printf_float+0x1fa>
 800ae84:	6823      	ldr	r3, [r4, #0]
 800ae86:	07d8      	lsls	r0, r3, #31
 800ae88:	d50f      	bpl.n	800aeaa <_printf_float+0x21a>
 800ae8a:	4653      	mov	r3, sl
 800ae8c:	465a      	mov	r2, fp
 800ae8e:	4631      	mov	r1, r6
 800ae90:	4628      	mov	r0, r5
 800ae92:	47b8      	blx	r7
 800ae94:	3001      	adds	r0, #1
 800ae96:	f43f af49 	beq.w	800ad2c <_printf_float+0x9c>
 800ae9a:	f04f 0800 	mov.w	r8, #0
 800ae9e:	f104 091a 	add.w	r9, r4, #26
 800aea2:	9b08      	ldr	r3, [sp, #32]
 800aea4:	3b01      	subs	r3, #1
 800aea6:	4543      	cmp	r3, r8
 800aea8:	dc09      	bgt.n	800aebe <_printf_float+0x22e>
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	079b      	lsls	r3, r3, #30
 800aeae:	f100 8108 	bmi.w	800b0c2 <_printf_float+0x432>
 800aeb2:	68e0      	ldr	r0, [r4, #12]
 800aeb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb6:	4298      	cmp	r0, r3
 800aeb8:	bfb8      	it	lt
 800aeba:	4618      	movlt	r0, r3
 800aebc:	e738      	b.n	800ad30 <_printf_float+0xa0>
 800aebe:	2301      	movs	r3, #1
 800aec0:	464a      	mov	r2, r9
 800aec2:	4631      	mov	r1, r6
 800aec4:	4628      	mov	r0, r5
 800aec6:	47b8      	blx	r7
 800aec8:	3001      	adds	r0, #1
 800aeca:	f43f af2f 	beq.w	800ad2c <_printf_float+0x9c>
 800aece:	f108 0801 	add.w	r8, r8, #1
 800aed2:	e7e6      	b.n	800aea2 <_printf_float+0x212>
 800aed4:	9b07      	ldr	r3, [sp, #28]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	dc3c      	bgt.n	800af54 <_printf_float+0x2c4>
 800aeda:	4a1d      	ldr	r2, [pc, #116]	; (800af50 <_printf_float+0x2c0>)
 800aedc:	2301      	movs	r3, #1
 800aede:	4631      	mov	r1, r6
 800aee0:	4628      	mov	r0, r5
 800aee2:	47b8      	blx	r7
 800aee4:	3001      	adds	r0, #1
 800aee6:	f43f af21 	beq.w	800ad2c <_printf_float+0x9c>
 800aeea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	d102      	bne.n	800aef8 <_printf_float+0x268>
 800aef2:	6823      	ldr	r3, [r4, #0]
 800aef4:	07d9      	lsls	r1, r3, #31
 800aef6:	d5d8      	bpl.n	800aeaa <_printf_float+0x21a>
 800aef8:	4653      	mov	r3, sl
 800aefa:	465a      	mov	r2, fp
 800aefc:	4631      	mov	r1, r6
 800aefe:	4628      	mov	r0, r5
 800af00:	47b8      	blx	r7
 800af02:	3001      	adds	r0, #1
 800af04:	f43f af12 	beq.w	800ad2c <_printf_float+0x9c>
 800af08:	f04f 0900 	mov.w	r9, #0
 800af0c:	f104 0a1a 	add.w	sl, r4, #26
 800af10:	9b07      	ldr	r3, [sp, #28]
 800af12:	425b      	negs	r3, r3
 800af14:	454b      	cmp	r3, r9
 800af16:	dc01      	bgt.n	800af1c <_printf_float+0x28c>
 800af18:	9b08      	ldr	r3, [sp, #32]
 800af1a:	e795      	b.n	800ae48 <_printf_float+0x1b8>
 800af1c:	2301      	movs	r3, #1
 800af1e:	4652      	mov	r2, sl
 800af20:	4631      	mov	r1, r6
 800af22:	4628      	mov	r0, r5
 800af24:	47b8      	blx	r7
 800af26:	3001      	adds	r0, #1
 800af28:	f43f af00 	beq.w	800ad2c <_printf_float+0x9c>
 800af2c:	f109 0901 	add.w	r9, r9, #1
 800af30:	e7ee      	b.n	800af10 <_printf_float+0x280>
 800af32:	bf00      	nop
 800af34:	f3af 8000 	nop.w
 800af38:	ffffffff 	.word	0xffffffff
 800af3c:	7fefffff 	.word	0x7fefffff
 800af40:	0800f690 	.word	0x0800f690
 800af44:	0800f694 	.word	0x0800f694
 800af48:	0800f69c 	.word	0x0800f69c
 800af4c:	0800f698 	.word	0x0800f698
 800af50:	0800f6a0 	.word	0x0800f6a0
 800af54:	9a08      	ldr	r2, [sp, #32]
 800af56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af58:	429a      	cmp	r2, r3
 800af5a:	bfa8      	it	ge
 800af5c:	461a      	movge	r2, r3
 800af5e:	2a00      	cmp	r2, #0
 800af60:	4691      	mov	r9, r2
 800af62:	dc38      	bgt.n	800afd6 <_printf_float+0x346>
 800af64:	2300      	movs	r3, #0
 800af66:	9305      	str	r3, [sp, #20]
 800af68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af6c:	f104 021a 	add.w	r2, r4, #26
 800af70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af72:	9905      	ldr	r1, [sp, #20]
 800af74:	9304      	str	r3, [sp, #16]
 800af76:	eba3 0309 	sub.w	r3, r3, r9
 800af7a:	428b      	cmp	r3, r1
 800af7c:	dc33      	bgt.n	800afe6 <_printf_float+0x356>
 800af7e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800af82:	429a      	cmp	r2, r3
 800af84:	db3c      	blt.n	800b000 <_printf_float+0x370>
 800af86:	6823      	ldr	r3, [r4, #0]
 800af88:	07da      	lsls	r2, r3, #31
 800af8a:	d439      	bmi.n	800b000 <_printf_float+0x370>
 800af8c:	9b08      	ldr	r3, [sp, #32]
 800af8e:	9a04      	ldr	r2, [sp, #16]
 800af90:	9907      	ldr	r1, [sp, #28]
 800af92:	1a9a      	subs	r2, r3, r2
 800af94:	eba3 0901 	sub.w	r9, r3, r1
 800af98:	4591      	cmp	r9, r2
 800af9a:	bfa8      	it	ge
 800af9c:	4691      	movge	r9, r2
 800af9e:	f1b9 0f00 	cmp.w	r9, #0
 800afa2:	dc35      	bgt.n	800b010 <_printf_float+0x380>
 800afa4:	f04f 0800 	mov.w	r8, #0
 800afa8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afac:	f104 0a1a 	add.w	sl, r4, #26
 800afb0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800afb4:	1a9b      	subs	r3, r3, r2
 800afb6:	eba3 0309 	sub.w	r3, r3, r9
 800afba:	4543      	cmp	r3, r8
 800afbc:	f77f af75 	ble.w	800aeaa <_printf_float+0x21a>
 800afc0:	2301      	movs	r3, #1
 800afc2:	4652      	mov	r2, sl
 800afc4:	4631      	mov	r1, r6
 800afc6:	4628      	mov	r0, r5
 800afc8:	47b8      	blx	r7
 800afca:	3001      	adds	r0, #1
 800afcc:	f43f aeae 	beq.w	800ad2c <_printf_float+0x9c>
 800afd0:	f108 0801 	add.w	r8, r8, #1
 800afd4:	e7ec      	b.n	800afb0 <_printf_float+0x320>
 800afd6:	4613      	mov	r3, r2
 800afd8:	4631      	mov	r1, r6
 800afda:	4642      	mov	r2, r8
 800afdc:	4628      	mov	r0, r5
 800afde:	47b8      	blx	r7
 800afe0:	3001      	adds	r0, #1
 800afe2:	d1bf      	bne.n	800af64 <_printf_float+0x2d4>
 800afe4:	e6a2      	b.n	800ad2c <_printf_float+0x9c>
 800afe6:	2301      	movs	r3, #1
 800afe8:	4631      	mov	r1, r6
 800afea:	4628      	mov	r0, r5
 800afec:	9204      	str	r2, [sp, #16]
 800afee:	47b8      	blx	r7
 800aff0:	3001      	adds	r0, #1
 800aff2:	f43f ae9b 	beq.w	800ad2c <_printf_float+0x9c>
 800aff6:	9b05      	ldr	r3, [sp, #20]
 800aff8:	9a04      	ldr	r2, [sp, #16]
 800affa:	3301      	adds	r3, #1
 800affc:	9305      	str	r3, [sp, #20]
 800affe:	e7b7      	b.n	800af70 <_printf_float+0x2e0>
 800b000:	4653      	mov	r3, sl
 800b002:	465a      	mov	r2, fp
 800b004:	4631      	mov	r1, r6
 800b006:	4628      	mov	r0, r5
 800b008:	47b8      	blx	r7
 800b00a:	3001      	adds	r0, #1
 800b00c:	d1be      	bne.n	800af8c <_printf_float+0x2fc>
 800b00e:	e68d      	b.n	800ad2c <_printf_float+0x9c>
 800b010:	9a04      	ldr	r2, [sp, #16]
 800b012:	464b      	mov	r3, r9
 800b014:	4442      	add	r2, r8
 800b016:	4631      	mov	r1, r6
 800b018:	4628      	mov	r0, r5
 800b01a:	47b8      	blx	r7
 800b01c:	3001      	adds	r0, #1
 800b01e:	d1c1      	bne.n	800afa4 <_printf_float+0x314>
 800b020:	e684      	b.n	800ad2c <_printf_float+0x9c>
 800b022:	9a08      	ldr	r2, [sp, #32]
 800b024:	2a01      	cmp	r2, #1
 800b026:	dc01      	bgt.n	800b02c <_printf_float+0x39c>
 800b028:	07db      	lsls	r3, r3, #31
 800b02a:	d537      	bpl.n	800b09c <_printf_float+0x40c>
 800b02c:	2301      	movs	r3, #1
 800b02e:	4642      	mov	r2, r8
 800b030:	4631      	mov	r1, r6
 800b032:	4628      	mov	r0, r5
 800b034:	47b8      	blx	r7
 800b036:	3001      	adds	r0, #1
 800b038:	f43f ae78 	beq.w	800ad2c <_printf_float+0x9c>
 800b03c:	4653      	mov	r3, sl
 800b03e:	465a      	mov	r2, fp
 800b040:	4631      	mov	r1, r6
 800b042:	4628      	mov	r0, r5
 800b044:	47b8      	blx	r7
 800b046:	3001      	adds	r0, #1
 800b048:	f43f ae70 	beq.w	800ad2c <_printf_float+0x9c>
 800b04c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b050:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b058:	d01b      	beq.n	800b092 <_printf_float+0x402>
 800b05a:	9b08      	ldr	r3, [sp, #32]
 800b05c:	f108 0201 	add.w	r2, r8, #1
 800b060:	3b01      	subs	r3, #1
 800b062:	4631      	mov	r1, r6
 800b064:	4628      	mov	r0, r5
 800b066:	47b8      	blx	r7
 800b068:	3001      	adds	r0, #1
 800b06a:	d10e      	bne.n	800b08a <_printf_float+0x3fa>
 800b06c:	e65e      	b.n	800ad2c <_printf_float+0x9c>
 800b06e:	2301      	movs	r3, #1
 800b070:	464a      	mov	r2, r9
 800b072:	4631      	mov	r1, r6
 800b074:	4628      	mov	r0, r5
 800b076:	47b8      	blx	r7
 800b078:	3001      	adds	r0, #1
 800b07a:	f43f ae57 	beq.w	800ad2c <_printf_float+0x9c>
 800b07e:	f108 0801 	add.w	r8, r8, #1
 800b082:	9b08      	ldr	r3, [sp, #32]
 800b084:	3b01      	subs	r3, #1
 800b086:	4543      	cmp	r3, r8
 800b088:	dcf1      	bgt.n	800b06e <_printf_float+0x3de>
 800b08a:	9b04      	ldr	r3, [sp, #16]
 800b08c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b090:	e6db      	b.n	800ae4a <_printf_float+0x1ba>
 800b092:	f04f 0800 	mov.w	r8, #0
 800b096:	f104 091a 	add.w	r9, r4, #26
 800b09a:	e7f2      	b.n	800b082 <_printf_float+0x3f2>
 800b09c:	2301      	movs	r3, #1
 800b09e:	4642      	mov	r2, r8
 800b0a0:	e7df      	b.n	800b062 <_printf_float+0x3d2>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	464a      	mov	r2, r9
 800b0a6:	4631      	mov	r1, r6
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	47b8      	blx	r7
 800b0ac:	3001      	adds	r0, #1
 800b0ae:	f43f ae3d 	beq.w	800ad2c <_printf_float+0x9c>
 800b0b2:	f108 0801 	add.w	r8, r8, #1
 800b0b6:	68e3      	ldr	r3, [r4, #12]
 800b0b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0ba:	1a5b      	subs	r3, r3, r1
 800b0bc:	4543      	cmp	r3, r8
 800b0be:	dcf0      	bgt.n	800b0a2 <_printf_float+0x412>
 800b0c0:	e6f7      	b.n	800aeb2 <_printf_float+0x222>
 800b0c2:	f04f 0800 	mov.w	r8, #0
 800b0c6:	f104 0919 	add.w	r9, r4, #25
 800b0ca:	e7f4      	b.n	800b0b6 <_printf_float+0x426>

0800b0cc <_printf_common>:
 800b0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0d0:	4616      	mov	r6, r2
 800b0d2:	4699      	mov	r9, r3
 800b0d4:	688a      	ldr	r2, [r1, #8]
 800b0d6:	690b      	ldr	r3, [r1, #16]
 800b0d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	bfb8      	it	lt
 800b0e0:	4613      	movlt	r3, r2
 800b0e2:	6033      	str	r3, [r6, #0]
 800b0e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0e8:	4607      	mov	r7, r0
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	b10a      	cbz	r2, 800b0f2 <_printf_common+0x26>
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	6033      	str	r3, [r6, #0]
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	0699      	lsls	r1, r3, #26
 800b0f6:	bf42      	ittt	mi
 800b0f8:	6833      	ldrmi	r3, [r6, #0]
 800b0fa:	3302      	addmi	r3, #2
 800b0fc:	6033      	strmi	r3, [r6, #0]
 800b0fe:	6825      	ldr	r5, [r4, #0]
 800b100:	f015 0506 	ands.w	r5, r5, #6
 800b104:	d106      	bne.n	800b114 <_printf_common+0x48>
 800b106:	f104 0a19 	add.w	sl, r4, #25
 800b10a:	68e3      	ldr	r3, [r4, #12]
 800b10c:	6832      	ldr	r2, [r6, #0]
 800b10e:	1a9b      	subs	r3, r3, r2
 800b110:	42ab      	cmp	r3, r5
 800b112:	dc26      	bgt.n	800b162 <_printf_common+0x96>
 800b114:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b118:	1e13      	subs	r3, r2, #0
 800b11a:	6822      	ldr	r2, [r4, #0]
 800b11c:	bf18      	it	ne
 800b11e:	2301      	movne	r3, #1
 800b120:	0692      	lsls	r2, r2, #26
 800b122:	d42b      	bmi.n	800b17c <_printf_common+0xb0>
 800b124:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b128:	4649      	mov	r1, r9
 800b12a:	4638      	mov	r0, r7
 800b12c:	47c0      	blx	r8
 800b12e:	3001      	adds	r0, #1
 800b130:	d01e      	beq.n	800b170 <_printf_common+0xa4>
 800b132:	6823      	ldr	r3, [r4, #0]
 800b134:	68e5      	ldr	r5, [r4, #12]
 800b136:	6832      	ldr	r2, [r6, #0]
 800b138:	f003 0306 	and.w	r3, r3, #6
 800b13c:	2b04      	cmp	r3, #4
 800b13e:	bf08      	it	eq
 800b140:	1aad      	subeq	r5, r5, r2
 800b142:	68a3      	ldr	r3, [r4, #8]
 800b144:	6922      	ldr	r2, [r4, #16]
 800b146:	bf0c      	ite	eq
 800b148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b14c:	2500      	movne	r5, #0
 800b14e:	4293      	cmp	r3, r2
 800b150:	bfc4      	itt	gt
 800b152:	1a9b      	subgt	r3, r3, r2
 800b154:	18ed      	addgt	r5, r5, r3
 800b156:	2600      	movs	r6, #0
 800b158:	341a      	adds	r4, #26
 800b15a:	42b5      	cmp	r5, r6
 800b15c:	d11a      	bne.n	800b194 <_printf_common+0xc8>
 800b15e:	2000      	movs	r0, #0
 800b160:	e008      	b.n	800b174 <_printf_common+0xa8>
 800b162:	2301      	movs	r3, #1
 800b164:	4652      	mov	r2, sl
 800b166:	4649      	mov	r1, r9
 800b168:	4638      	mov	r0, r7
 800b16a:	47c0      	blx	r8
 800b16c:	3001      	adds	r0, #1
 800b16e:	d103      	bne.n	800b178 <_printf_common+0xac>
 800b170:	f04f 30ff 	mov.w	r0, #4294967295
 800b174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b178:	3501      	adds	r5, #1
 800b17a:	e7c6      	b.n	800b10a <_printf_common+0x3e>
 800b17c:	18e1      	adds	r1, r4, r3
 800b17e:	1c5a      	adds	r2, r3, #1
 800b180:	2030      	movs	r0, #48	; 0x30
 800b182:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b186:	4422      	add	r2, r4
 800b188:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b18c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b190:	3302      	adds	r3, #2
 800b192:	e7c7      	b.n	800b124 <_printf_common+0x58>
 800b194:	2301      	movs	r3, #1
 800b196:	4622      	mov	r2, r4
 800b198:	4649      	mov	r1, r9
 800b19a:	4638      	mov	r0, r7
 800b19c:	47c0      	blx	r8
 800b19e:	3001      	adds	r0, #1
 800b1a0:	d0e6      	beq.n	800b170 <_printf_common+0xa4>
 800b1a2:	3601      	adds	r6, #1
 800b1a4:	e7d9      	b.n	800b15a <_printf_common+0x8e>
	...

0800b1a8 <_printf_i>:
 800b1a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1ac:	7e0f      	ldrb	r7, [r1, #24]
 800b1ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b1b0:	2f78      	cmp	r7, #120	; 0x78
 800b1b2:	4691      	mov	r9, r2
 800b1b4:	4680      	mov	r8, r0
 800b1b6:	460c      	mov	r4, r1
 800b1b8:	469a      	mov	sl, r3
 800b1ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b1be:	d807      	bhi.n	800b1d0 <_printf_i+0x28>
 800b1c0:	2f62      	cmp	r7, #98	; 0x62
 800b1c2:	d80a      	bhi.n	800b1da <_printf_i+0x32>
 800b1c4:	2f00      	cmp	r7, #0
 800b1c6:	f000 80d8 	beq.w	800b37a <_printf_i+0x1d2>
 800b1ca:	2f58      	cmp	r7, #88	; 0x58
 800b1cc:	f000 80a3 	beq.w	800b316 <_printf_i+0x16e>
 800b1d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1d8:	e03a      	b.n	800b250 <_printf_i+0xa8>
 800b1da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1de:	2b15      	cmp	r3, #21
 800b1e0:	d8f6      	bhi.n	800b1d0 <_printf_i+0x28>
 800b1e2:	a101      	add	r1, pc, #4	; (adr r1, 800b1e8 <_printf_i+0x40>)
 800b1e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1e8:	0800b241 	.word	0x0800b241
 800b1ec:	0800b255 	.word	0x0800b255
 800b1f0:	0800b1d1 	.word	0x0800b1d1
 800b1f4:	0800b1d1 	.word	0x0800b1d1
 800b1f8:	0800b1d1 	.word	0x0800b1d1
 800b1fc:	0800b1d1 	.word	0x0800b1d1
 800b200:	0800b255 	.word	0x0800b255
 800b204:	0800b1d1 	.word	0x0800b1d1
 800b208:	0800b1d1 	.word	0x0800b1d1
 800b20c:	0800b1d1 	.word	0x0800b1d1
 800b210:	0800b1d1 	.word	0x0800b1d1
 800b214:	0800b361 	.word	0x0800b361
 800b218:	0800b285 	.word	0x0800b285
 800b21c:	0800b343 	.word	0x0800b343
 800b220:	0800b1d1 	.word	0x0800b1d1
 800b224:	0800b1d1 	.word	0x0800b1d1
 800b228:	0800b383 	.word	0x0800b383
 800b22c:	0800b1d1 	.word	0x0800b1d1
 800b230:	0800b285 	.word	0x0800b285
 800b234:	0800b1d1 	.word	0x0800b1d1
 800b238:	0800b1d1 	.word	0x0800b1d1
 800b23c:	0800b34b 	.word	0x0800b34b
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	1d1a      	adds	r2, r3, #4
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	602a      	str	r2, [r5, #0]
 800b248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b24c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b250:	2301      	movs	r3, #1
 800b252:	e0a3      	b.n	800b39c <_printf_i+0x1f4>
 800b254:	6820      	ldr	r0, [r4, #0]
 800b256:	6829      	ldr	r1, [r5, #0]
 800b258:	0606      	lsls	r6, r0, #24
 800b25a:	f101 0304 	add.w	r3, r1, #4
 800b25e:	d50a      	bpl.n	800b276 <_printf_i+0xce>
 800b260:	680e      	ldr	r6, [r1, #0]
 800b262:	602b      	str	r3, [r5, #0]
 800b264:	2e00      	cmp	r6, #0
 800b266:	da03      	bge.n	800b270 <_printf_i+0xc8>
 800b268:	232d      	movs	r3, #45	; 0x2d
 800b26a:	4276      	negs	r6, r6
 800b26c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b270:	485e      	ldr	r0, [pc, #376]	; (800b3ec <_printf_i+0x244>)
 800b272:	230a      	movs	r3, #10
 800b274:	e019      	b.n	800b2aa <_printf_i+0x102>
 800b276:	680e      	ldr	r6, [r1, #0]
 800b278:	602b      	str	r3, [r5, #0]
 800b27a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b27e:	bf18      	it	ne
 800b280:	b236      	sxthne	r6, r6
 800b282:	e7ef      	b.n	800b264 <_printf_i+0xbc>
 800b284:	682b      	ldr	r3, [r5, #0]
 800b286:	6820      	ldr	r0, [r4, #0]
 800b288:	1d19      	adds	r1, r3, #4
 800b28a:	6029      	str	r1, [r5, #0]
 800b28c:	0601      	lsls	r1, r0, #24
 800b28e:	d501      	bpl.n	800b294 <_printf_i+0xec>
 800b290:	681e      	ldr	r6, [r3, #0]
 800b292:	e002      	b.n	800b29a <_printf_i+0xf2>
 800b294:	0646      	lsls	r6, r0, #25
 800b296:	d5fb      	bpl.n	800b290 <_printf_i+0xe8>
 800b298:	881e      	ldrh	r6, [r3, #0]
 800b29a:	4854      	ldr	r0, [pc, #336]	; (800b3ec <_printf_i+0x244>)
 800b29c:	2f6f      	cmp	r7, #111	; 0x6f
 800b29e:	bf0c      	ite	eq
 800b2a0:	2308      	moveq	r3, #8
 800b2a2:	230a      	movne	r3, #10
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b2aa:	6865      	ldr	r5, [r4, #4]
 800b2ac:	60a5      	str	r5, [r4, #8]
 800b2ae:	2d00      	cmp	r5, #0
 800b2b0:	bfa2      	ittt	ge
 800b2b2:	6821      	ldrge	r1, [r4, #0]
 800b2b4:	f021 0104 	bicge.w	r1, r1, #4
 800b2b8:	6021      	strge	r1, [r4, #0]
 800b2ba:	b90e      	cbnz	r6, 800b2c0 <_printf_i+0x118>
 800b2bc:	2d00      	cmp	r5, #0
 800b2be:	d04d      	beq.n	800b35c <_printf_i+0x1b4>
 800b2c0:	4615      	mov	r5, r2
 800b2c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b2c6:	fb03 6711 	mls	r7, r3, r1, r6
 800b2ca:	5dc7      	ldrb	r7, [r0, r7]
 800b2cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2d0:	4637      	mov	r7, r6
 800b2d2:	42bb      	cmp	r3, r7
 800b2d4:	460e      	mov	r6, r1
 800b2d6:	d9f4      	bls.n	800b2c2 <_printf_i+0x11a>
 800b2d8:	2b08      	cmp	r3, #8
 800b2da:	d10b      	bne.n	800b2f4 <_printf_i+0x14c>
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	07de      	lsls	r6, r3, #31
 800b2e0:	d508      	bpl.n	800b2f4 <_printf_i+0x14c>
 800b2e2:	6923      	ldr	r3, [r4, #16]
 800b2e4:	6861      	ldr	r1, [r4, #4]
 800b2e6:	4299      	cmp	r1, r3
 800b2e8:	bfde      	ittt	le
 800b2ea:	2330      	movle	r3, #48	; 0x30
 800b2ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2f4:	1b52      	subs	r2, r2, r5
 800b2f6:	6122      	str	r2, [r4, #16]
 800b2f8:	f8cd a000 	str.w	sl, [sp]
 800b2fc:	464b      	mov	r3, r9
 800b2fe:	aa03      	add	r2, sp, #12
 800b300:	4621      	mov	r1, r4
 800b302:	4640      	mov	r0, r8
 800b304:	f7ff fee2 	bl	800b0cc <_printf_common>
 800b308:	3001      	adds	r0, #1
 800b30a:	d14c      	bne.n	800b3a6 <_printf_i+0x1fe>
 800b30c:	f04f 30ff 	mov.w	r0, #4294967295
 800b310:	b004      	add	sp, #16
 800b312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b316:	4835      	ldr	r0, [pc, #212]	; (800b3ec <_printf_i+0x244>)
 800b318:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b31c:	6829      	ldr	r1, [r5, #0]
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	f851 6b04 	ldr.w	r6, [r1], #4
 800b324:	6029      	str	r1, [r5, #0]
 800b326:	061d      	lsls	r5, r3, #24
 800b328:	d514      	bpl.n	800b354 <_printf_i+0x1ac>
 800b32a:	07df      	lsls	r7, r3, #31
 800b32c:	bf44      	itt	mi
 800b32e:	f043 0320 	orrmi.w	r3, r3, #32
 800b332:	6023      	strmi	r3, [r4, #0]
 800b334:	b91e      	cbnz	r6, 800b33e <_printf_i+0x196>
 800b336:	6823      	ldr	r3, [r4, #0]
 800b338:	f023 0320 	bic.w	r3, r3, #32
 800b33c:	6023      	str	r3, [r4, #0]
 800b33e:	2310      	movs	r3, #16
 800b340:	e7b0      	b.n	800b2a4 <_printf_i+0xfc>
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	f043 0320 	orr.w	r3, r3, #32
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	2378      	movs	r3, #120	; 0x78
 800b34c:	4828      	ldr	r0, [pc, #160]	; (800b3f0 <_printf_i+0x248>)
 800b34e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b352:	e7e3      	b.n	800b31c <_printf_i+0x174>
 800b354:	0659      	lsls	r1, r3, #25
 800b356:	bf48      	it	mi
 800b358:	b2b6      	uxthmi	r6, r6
 800b35a:	e7e6      	b.n	800b32a <_printf_i+0x182>
 800b35c:	4615      	mov	r5, r2
 800b35e:	e7bb      	b.n	800b2d8 <_printf_i+0x130>
 800b360:	682b      	ldr	r3, [r5, #0]
 800b362:	6826      	ldr	r6, [r4, #0]
 800b364:	6961      	ldr	r1, [r4, #20]
 800b366:	1d18      	adds	r0, r3, #4
 800b368:	6028      	str	r0, [r5, #0]
 800b36a:	0635      	lsls	r5, r6, #24
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	d501      	bpl.n	800b374 <_printf_i+0x1cc>
 800b370:	6019      	str	r1, [r3, #0]
 800b372:	e002      	b.n	800b37a <_printf_i+0x1d2>
 800b374:	0670      	lsls	r0, r6, #25
 800b376:	d5fb      	bpl.n	800b370 <_printf_i+0x1c8>
 800b378:	8019      	strh	r1, [r3, #0]
 800b37a:	2300      	movs	r3, #0
 800b37c:	6123      	str	r3, [r4, #16]
 800b37e:	4615      	mov	r5, r2
 800b380:	e7ba      	b.n	800b2f8 <_printf_i+0x150>
 800b382:	682b      	ldr	r3, [r5, #0]
 800b384:	1d1a      	adds	r2, r3, #4
 800b386:	602a      	str	r2, [r5, #0]
 800b388:	681d      	ldr	r5, [r3, #0]
 800b38a:	6862      	ldr	r2, [r4, #4]
 800b38c:	2100      	movs	r1, #0
 800b38e:	4628      	mov	r0, r5
 800b390:	f7f4 ffbe 	bl	8000310 <memchr>
 800b394:	b108      	cbz	r0, 800b39a <_printf_i+0x1f2>
 800b396:	1b40      	subs	r0, r0, r5
 800b398:	6060      	str	r0, [r4, #4]
 800b39a:	6863      	ldr	r3, [r4, #4]
 800b39c:	6123      	str	r3, [r4, #16]
 800b39e:	2300      	movs	r3, #0
 800b3a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3a4:	e7a8      	b.n	800b2f8 <_printf_i+0x150>
 800b3a6:	6923      	ldr	r3, [r4, #16]
 800b3a8:	462a      	mov	r2, r5
 800b3aa:	4649      	mov	r1, r9
 800b3ac:	4640      	mov	r0, r8
 800b3ae:	47d0      	blx	sl
 800b3b0:	3001      	adds	r0, #1
 800b3b2:	d0ab      	beq.n	800b30c <_printf_i+0x164>
 800b3b4:	6823      	ldr	r3, [r4, #0]
 800b3b6:	079b      	lsls	r3, r3, #30
 800b3b8:	d413      	bmi.n	800b3e2 <_printf_i+0x23a>
 800b3ba:	68e0      	ldr	r0, [r4, #12]
 800b3bc:	9b03      	ldr	r3, [sp, #12]
 800b3be:	4298      	cmp	r0, r3
 800b3c0:	bfb8      	it	lt
 800b3c2:	4618      	movlt	r0, r3
 800b3c4:	e7a4      	b.n	800b310 <_printf_i+0x168>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	4632      	mov	r2, r6
 800b3ca:	4649      	mov	r1, r9
 800b3cc:	4640      	mov	r0, r8
 800b3ce:	47d0      	blx	sl
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	d09b      	beq.n	800b30c <_printf_i+0x164>
 800b3d4:	3501      	adds	r5, #1
 800b3d6:	68e3      	ldr	r3, [r4, #12]
 800b3d8:	9903      	ldr	r1, [sp, #12]
 800b3da:	1a5b      	subs	r3, r3, r1
 800b3dc:	42ab      	cmp	r3, r5
 800b3de:	dcf2      	bgt.n	800b3c6 <_printf_i+0x21e>
 800b3e0:	e7eb      	b.n	800b3ba <_printf_i+0x212>
 800b3e2:	2500      	movs	r5, #0
 800b3e4:	f104 0619 	add.w	r6, r4, #25
 800b3e8:	e7f5      	b.n	800b3d6 <_printf_i+0x22e>
 800b3ea:	bf00      	nop
 800b3ec:	0800f6a2 	.word	0x0800f6a2
 800b3f0:	0800f6b3 	.word	0x0800f6b3

0800b3f4 <_scanf_float>:
 800b3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f8:	b087      	sub	sp, #28
 800b3fa:	4617      	mov	r7, r2
 800b3fc:	9303      	str	r3, [sp, #12]
 800b3fe:	688b      	ldr	r3, [r1, #8]
 800b400:	1e5a      	subs	r2, r3, #1
 800b402:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b406:	bf83      	ittte	hi
 800b408:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b40c:	195b      	addhi	r3, r3, r5
 800b40e:	9302      	strhi	r3, [sp, #8]
 800b410:	2300      	movls	r3, #0
 800b412:	bf86      	itte	hi
 800b414:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b418:	608b      	strhi	r3, [r1, #8]
 800b41a:	9302      	strls	r3, [sp, #8]
 800b41c:	680b      	ldr	r3, [r1, #0]
 800b41e:	468b      	mov	fp, r1
 800b420:	2500      	movs	r5, #0
 800b422:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b426:	f84b 3b1c 	str.w	r3, [fp], #28
 800b42a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b42e:	4680      	mov	r8, r0
 800b430:	460c      	mov	r4, r1
 800b432:	465e      	mov	r6, fp
 800b434:	46aa      	mov	sl, r5
 800b436:	46a9      	mov	r9, r5
 800b438:	9501      	str	r5, [sp, #4]
 800b43a:	68a2      	ldr	r2, [r4, #8]
 800b43c:	b152      	cbz	r2, 800b454 <_scanf_float+0x60>
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	2b4e      	cmp	r3, #78	; 0x4e
 800b444:	d864      	bhi.n	800b510 <_scanf_float+0x11c>
 800b446:	2b40      	cmp	r3, #64	; 0x40
 800b448:	d83c      	bhi.n	800b4c4 <_scanf_float+0xd0>
 800b44a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b44e:	b2c8      	uxtb	r0, r1
 800b450:	280e      	cmp	r0, #14
 800b452:	d93a      	bls.n	800b4ca <_scanf_float+0xd6>
 800b454:	f1b9 0f00 	cmp.w	r9, #0
 800b458:	d003      	beq.n	800b462 <_scanf_float+0x6e>
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b460:	6023      	str	r3, [r4, #0]
 800b462:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b466:	f1ba 0f01 	cmp.w	sl, #1
 800b46a:	f200 8113 	bhi.w	800b694 <_scanf_float+0x2a0>
 800b46e:	455e      	cmp	r6, fp
 800b470:	f200 8105 	bhi.w	800b67e <_scanf_float+0x28a>
 800b474:	2501      	movs	r5, #1
 800b476:	4628      	mov	r0, r5
 800b478:	b007      	add	sp, #28
 800b47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b47e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b482:	2a0d      	cmp	r2, #13
 800b484:	d8e6      	bhi.n	800b454 <_scanf_float+0x60>
 800b486:	a101      	add	r1, pc, #4	; (adr r1, 800b48c <_scanf_float+0x98>)
 800b488:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b48c:	0800b5cb 	.word	0x0800b5cb
 800b490:	0800b455 	.word	0x0800b455
 800b494:	0800b455 	.word	0x0800b455
 800b498:	0800b455 	.word	0x0800b455
 800b49c:	0800b62b 	.word	0x0800b62b
 800b4a0:	0800b603 	.word	0x0800b603
 800b4a4:	0800b455 	.word	0x0800b455
 800b4a8:	0800b455 	.word	0x0800b455
 800b4ac:	0800b5d9 	.word	0x0800b5d9
 800b4b0:	0800b455 	.word	0x0800b455
 800b4b4:	0800b455 	.word	0x0800b455
 800b4b8:	0800b455 	.word	0x0800b455
 800b4bc:	0800b455 	.word	0x0800b455
 800b4c0:	0800b591 	.word	0x0800b591
 800b4c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b4c8:	e7db      	b.n	800b482 <_scanf_float+0x8e>
 800b4ca:	290e      	cmp	r1, #14
 800b4cc:	d8c2      	bhi.n	800b454 <_scanf_float+0x60>
 800b4ce:	a001      	add	r0, pc, #4	; (adr r0, 800b4d4 <_scanf_float+0xe0>)
 800b4d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b4d4:	0800b583 	.word	0x0800b583
 800b4d8:	0800b455 	.word	0x0800b455
 800b4dc:	0800b583 	.word	0x0800b583
 800b4e0:	0800b617 	.word	0x0800b617
 800b4e4:	0800b455 	.word	0x0800b455
 800b4e8:	0800b531 	.word	0x0800b531
 800b4ec:	0800b56d 	.word	0x0800b56d
 800b4f0:	0800b56d 	.word	0x0800b56d
 800b4f4:	0800b56d 	.word	0x0800b56d
 800b4f8:	0800b56d 	.word	0x0800b56d
 800b4fc:	0800b56d 	.word	0x0800b56d
 800b500:	0800b56d 	.word	0x0800b56d
 800b504:	0800b56d 	.word	0x0800b56d
 800b508:	0800b56d 	.word	0x0800b56d
 800b50c:	0800b56d 	.word	0x0800b56d
 800b510:	2b6e      	cmp	r3, #110	; 0x6e
 800b512:	d809      	bhi.n	800b528 <_scanf_float+0x134>
 800b514:	2b60      	cmp	r3, #96	; 0x60
 800b516:	d8b2      	bhi.n	800b47e <_scanf_float+0x8a>
 800b518:	2b54      	cmp	r3, #84	; 0x54
 800b51a:	d077      	beq.n	800b60c <_scanf_float+0x218>
 800b51c:	2b59      	cmp	r3, #89	; 0x59
 800b51e:	d199      	bne.n	800b454 <_scanf_float+0x60>
 800b520:	2d07      	cmp	r5, #7
 800b522:	d197      	bne.n	800b454 <_scanf_float+0x60>
 800b524:	2508      	movs	r5, #8
 800b526:	e029      	b.n	800b57c <_scanf_float+0x188>
 800b528:	2b74      	cmp	r3, #116	; 0x74
 800b52a:	d06f      	beq.n	800b60c <_scanf_float+0x218>
 800b52c:	2b79      	cmp	r3, #121	; 0x79
 800b52e:	e7f6      	b.n	800b51e <_scanf_float+0x12a>
 800b530:	6821      	ldr	r1, [r4, #0]
 800b532:	05c8      	lsls	r0, r1, #23
 800b534:	d51a      	bpl.n	800b56c <_scanf_float+0x178>
 800b536:	9b02      	ldr	r3, [sp, #8]
 800b538:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b53c:	6021      	str	r1, [r4, #0]
 800b53e:	f109 0901 	add.w	r9, r9, #1
 800b542:	b11b      	cbz	r3, 800b54c <_scanf_float+0x158>
 800b544:	3b01      	subs	r3, #1
 800b546:	3201      	adds	r2, #1
 800b548:	9302      	str	r3, [sp, #8]
 800b54a:	60a2      	str	r2, [r4, #8]
 800b54c:	68a3      	ldr	r3, [r4, #8]
 800b54e:	3b01      	subs	r3, #1
 800b550:	60a3      	str	r3, [r4, #8]
 800b552:	6923      	ldr	r3, [r4, #16]
 800b554:	3301      	adds	r3, #1
 800b556:	6123      	str	r3, [r4, #16]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	3b01      	subs	r3, #1
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	607b      	str	r3, [r7, #4]
 800b560:	f340 8084 	ble.w	800b66c <_scanf_float+0x278>
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	3301      	adds	r3, #1
 800b568:	603b      	str	r3, [r7, #0]
 800b56a:	e766      	b.n	800b43a <_scanf_float+0x46>
 800b56c:	eb1a 0f05 	cmn.w	sl, r5
 800b570:	f47f af70 	bne.w	800b454 <_scanf_float+0x60>
 800b574:	6822      	ldr	r2, [r4, #0]
 800b576:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b57a:	6022      	str	r2, [r4, #0]
 800b57c:	f806 3b01 	strb.w	r3, [r6], #1
 800b580:	e7e4      	b.n	800b54c <_scanf_float+0x158>
 800b582:	6822      	ldr	r2, [r4, #0]
 800b584:	0610      	lsls	r0, r2, #24
 800b586:	f57f af65 	bpl.w	800b454 <_scanf_float+0x60>
 800b58a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b58e:	e7f4      	b.n	800b57a <_scanf_float+0x186>
 800b590:	f1ba 0f00 	cmp.w	sl, #0
 800b594:	d10e      	bne.n	800b5b4 <_scanf_float+0x1c0>
 800b596:	f1b9 0f00 	cmp.w	r9, #0
 800b59a:	d10e      	bne.n	800b5ba <_scanf_float+0x1c6>
 800b59c:	6822      	ldr	r2, [r4, #0]
 800b59e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b5a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b5a6:	d108      	bne.n	800b5ba <_scanf_float+0x1c6>
 800b5a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b5ac:	6022      	str	r2, [r4, #0]
 800b5ae:	f04f 0a01 	mov.w	sl, #1
 800b5b2:	e7e3      	b.n	800b57c <_scanf_float+0x188>
 800b5b4:	f1ba 0f02 	cmp.w	sl, #2
 800b5b8:	d055      	beq.n	800b666 <_scanf_float+0x272>
 800b5ba:	2d01      	cmp	r5, #1
 800b5bc:	d002      	beq.n	800b5c4 <_scanf_float+0x1d0>
 800b5be:	2d04      	cmp	r5, #4
 800b5c0:	f47f af48 	bne.w	800b454 <_scanf_float+0x60>
 800b5c4:	3501      	adds	r5, #1
 800b5c6:	b2ed      	uxtb	r5, r5
 800b5c8:	e7d8      	b.n	800b57c <_scanf_float+0x188>
 800b5ca:	f1ba 0f01 	cmp.w	sl, #1
 800b5ce:	f47f af41 	bne.w	800b454 <_scanf_float+0x60>
 800b5d2:	f04f 0a02 	mov.w	sl, #2
 800b5d6:	e7d1      	b.n	800b57c <_scanf_float+0x188>
 800b5d8:	b97d      	cbnz	r5, 800b5fa <_scanf_float+0x206>
 800b5da:	f1b9 0f00 	cmp.w	r9, #0
 800b5de:	f47f af3c 	bne.w	800b45a <_scanf_float+0x66>
 800b5e2:	6822      	ldr	r2, [r4, #0]
 800b5e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b5e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b5ec:	f47f af39 	bne.w	800b462 <_scanf_float+0x6e>
 800b5f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b5f4:	6022      	str	r2, [r4, #0]
 800b5f6:	2501      	movs	r5, #1
 800b5f8:	e7c0      	b.n	800b57c <_scanf_float+0x188>
 800b5fa:	2d03      	cmp	r5, #3
 800b5fc:	d0e2      	beq.n	800b5c4 <_scanf_float+0x1d0>
 800b5fe:	2d05      	cmp	r5, #5
 800b600:	e7de      	b.n	800b5c0 <_scanf_float+0x1cc>
 800b602:	2d02      	cmp	r5, #2
 800b604:	f47f af26 	bne.w	800b454 <_scanf_float+0x60>
 800b608:	2503      	movs	r5, #3
 800b60a:	e7b7      	b.n	800b57c <_scanf_float+0x188>
 800b60c:	2d06      	cmp	r5, #6
 800b60e:	f47f af21 	bne.w	800b454 <_scanf_float+0x60>
 800b612:	2507      	movs	r5, #7
 800b614:	e7b2      	b.n	800b57c <_scanf_float+0x188>
 800b616:	6822      	ldr	r2, [r4, #0]
 800b618:	0591      	lsls	r1, r2, #22
 800b61a:	f57f af1b 	bpl.w	800b454 <_scanf_float+0x60>
 800b61e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b622:	6022      	str	r2, [r4, #0]
 800b624:	f8cd 9004 	str.w	r9, [sp, #4]
 800b628:	e7a8      	b.n	800b57c <_scanf_float+0x188>
 800b62a:	6822      	ldr	r2, [r4, #0]
 800b62c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b630:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b634:	d006      	beq.n	800b644 <_scanf_float+0x250>
 800b636:	0550      	lsls	r0, r2, #21
 800b638:	f57f af0c 	bpl.w	800b454 <_scanf_float+0x60>
 800b63c:	f1b9 0f00 	cmp.w	r9, #0
 800b640:	f43f af0f 	beq.w	800b462 <_scanf_float+0x6e>
 800b644:	0591      	lsls	r1, r2, #22
 800b646:	bf58      	it	pl
 800b648:	9901      	ldrpl	r1, [sp, #4]
 800b64a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b64e:	bf58      	it	pl
 800b650:	eba9 0101 	subpl.w	r1, r9, r1
 800b654:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b658:	bf58      	it	pl
 800b65a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b65e:	6022      	str	r2, [r4, #0]
 800b660:	f04f 0900 	mov.w	r9, #0
 800b664:	e78a      	b.n	800b57c <_scanf_float+0x188>
 800b666:	f04f 0a03 	mov.w	sl, #3
 800b66a:	e787      	b.n	800b57c <_scanf_float+0x188>
 800b66c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b670:	4639      	mov	r1, r7
 800b672:	4640      	mov	r0, r8
 800b674:	4798      	blx	r3
 800b676:	2800      	cmp	r0, #0
 800b678:	f43f aedf 	beq.w	800b43a <_scanf_float+0x46>
 800b67c:	e6ea      	b.n	800b454 <_scanf_float+0x60>
 800b67e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b682:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b686:	463a      	mov	r2, r7
 800b688:	4640      	mov	r0, r8
 800b68a:	4798      	blx	r3
 800b68c:	6923      	ldr	r3, [r4, #16]
 800b68e:	3b01      	subs	r3, #1
 800b690:	6123      	str	r3, [r4, #16]
 800b692:	e6ec      	b.n	800b46e <_scanf_float+0x7a>
 800b694:	1e6b      	subs	r3, r5, #1
 800b696:	2b06      	cmp	r3, #6
 800b698:	d825      	bhi.n	800b6e6 <_scanf_float+0x2f2>
 800b69a:	2d02      	cmp	r5, #2
 800b69c:	d836      	bhi.n	800b70c <_scanf_float+0x318>
 800b69e:	455e      	cmp	r6, fp
 800b6a0:	f67f aee8 	bls.w	800b474 <_scanf_float+0x80>
 800b6a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b6a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b6ac:	463a      	mov	r2, r7
 800b6ae:	4640      	mov	r0, r8
 800b6b0:	4798      	blx	r3
 800b6b2:	6923      	ldr	r3, [r4, #16]
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	6123      	str	r3, [r4, #16]
 800b6b8:	e7f1      	b.n	800b69e <_scanf_float+0x2aa>
 800b6ba:	9802      	ldr	r0, [sp, #8]
 800b6bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b6c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b6c4:	9002      	str	r0, [sp, #8]
 800b6c6:	463a      	mov	r2, r7
 800b6c8:	4640      	mov	r0, r8
 800b6ca:	4798      	blx	r3
 800b6cc:	6923      	ldr	r3, [r4, #16]
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	6123      	str	r3, [r4, #16]
 800b6d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6d6:	fa5f fa8a 	uxtb.w	sl, sl
 800b6da:	f1ba 0f02 	cmp.w	sl, #2
 800b6de:	d1ec      	bne.n	800b6ba <_scanf_float+0x2c6>
 800b6e0:	3d03      	subs	r5, #3
 800b6e2:	b2ed      	uxtb	r5, r5
 800b6e4:	1b76      	subs	r6, r6, r5
 800b6e6:	6823      	ldr	r3, [r4, #0]
 800b6e8:	05da      	lsls	r2, r3, #23
 800b6ea:	d52f      	bpl.n	800b74c <_scanf_float+0x358>
 800b6ec:	055b      	lsls	r3, r3, #21
 800b6ee:	d510      	bpl.n	800b712 <_scanf_float+0x31e>
 800b6f0:	455e      	cmp	r6, fp
 800b6f2:	f67f aebf 	bls.w	800b474 <_scanf_float+0x80>
 800b6f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b6fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b6fe:	463a      	mov	r2, r7
 800b700:	4640      	mov	r0, r8
 800b702:	4798      	blx	r3
 800b704:	6923      	ldr	r3, [r4, #16]
 800b706:	3b01      	subs	r3, #1
 800b708:	6123      	str	r3, [r4, #16]
 800b70a:	e7f1      	b.n	800b6f0 <_scanf_float+0x2fc>
 800b70c:	46aa      	mov	sl, r5
 800b70e:	9602      	str	r6, [sp, #8]
 800b710:	e7df      	b.n	800b6d2 <_scanf_float+0x2de>
 800b712:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b716:	6923      	ldr	r3, [r4, #16]
 800b718:	2965      	cmp	r1, #101	; 0x65
 800b71a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b71e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b722:	6123      	str	r3, [r4, #16]
 800b724:	d00c      	beq.n	800b740 <_scanf_float+0x34c>
 800b726:	2945      	cmp	r1, #69	; 0x45
 800b728:	d00a      	beq.n	800b740 <_scanf_float+0x34c>
 800b72a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b72e:	463a      	mov	r2, r7
 800b730:	4640      	mov	r0, r8
 800b732:	4798      	blx	r3
 800b734:	6923      	ldr	r3, [r4, #16]
 800b736:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b73a:	3b01      	subs	r3, #1
 800b73c:	1eb5      	subs	r5, r6, #2
 800b73e:	6123      	str	r3, [r4, #16]
 800b740:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b744:	463a      	mov	r2, r7
 800b746:	4640      	mov	r0, r8
 800b748:	4798      	blx	r3
 800b74a:	462e      	mov	r6, r5
 800b74c:	6825      	ldr	r5, [r4, #0]
 800b74e:	f015 0510 	ands.w	r5, r5, #16
 800b752:	d14e      	bne.n	800b7f2 <_scanf_float+0x3fe>
 800b754:	7035      	strb	r5, [r6, #0]
 800b756:	6823      	ldr	r3, [r4, #0]
 800b758:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b75c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b760:	d119      	bne.n	800b796 <_scanf_float+0x3a2>
 800b762:	9b01      	ldr	r3, [sp, #4]
 800b764:	454b      	cmp	r3, r9
 800b766:	eba3 0209 	sub.w	r2, r3, r9
 800b76a:	d121      	bne.n	800b7b0 <_scanf_float+0x3bc>
 800b76c:	2200      	movs	r2, #0
 800b76e:	4659      	mov	r1, fp
 800b770:	4640      	mov	r0, r8
 800b772:	f000 fe3b 	bl	800c3ec <_strtod_r>
 800b776:	6822      	ldr	r2, [r4, #0]
 800b778:	9b03      	ldr	r3, [sp, #12]
 800b77a:	f012 0f02 	tst.w	r2, #2
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	d021      	beq.n	800b7c6 <_scanf_float+0x3d2>
 800b782:	9903      	ldr	r1, [sp, #12]
 800b784:	1d1a      	adds	r2, r3, #4
 800b786:	600a      	str	r2, [r1, #0]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	ed83 0b00 	vstr	d0, [r3]
 800b78e:	68e3      	ldr	r3, [r4, #12]
 800b790:	3301      	adds	r3, #1
 800b792:	60e3      	str	r3, [r4, #12]
 800b794:	e66f      	b.n	800b476 <_scanf_float+0x82>
 800b796:	9b04      	ldr	r3, [sp, #16]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d0e7      	beq.n	800b76c <_scanf_float+0x378>
 800b79c:	9905      	ldr	r1, [sp, #20]
 800b79e:	230a      	movs	r3, #10
 800b7a0:	462a      	mov	r2, r5
 800b7a2:	3101      	adds	r1, #1
 800b7a4:	4640      	mov	r0, r8
 800b7a6:	f000 fea9 	bl	800c4fc <_strtol_r>
 800b7aa:	9b04      	ldr	r3, [sp, #16]
 800b7ac:	9e05      	ldr	r6, [sp, #20]
 800b7ae:	1ac2      	subs	r2, r0, r3
 800b7b0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b7b4:	429e      	cmp	r6, r3
 800b7b6:	bf28      	it	cs
 800b7b8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b7bc:	490e      	ldr	r1, [pc, #56]	; (800b7f8 <_scanf_float+0x404>)
 800b7be:	4630      	mov	r0, r6
 800b7c0:	f000 f824 	bl	800b80c <siprintf>
 800b7c4:	e7d2      	b.n	800b76c <_scanf_float+0x378>
 800b7c6:	9903      	ldr	r1, [sp, #12]
 800b7c8:	f012 0f04 	tst.w	r2, #4
 800b7cc:	f103 0204 	add.w	r2, r3, #4
 800b7d0:	600a      	str	r2, [r1, #0]
 800b7d2:	d1d9      	bne.n	800b788 <_scanf_float+0x394>
 800b7d4:	eeb4 0b40 	vcmp.f64	d0, d0
 800b7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7dc:	681e      	ldr	r6, [r3, #0]
 800b7de:	d705      	bvc.n	800b7ec <_scanf_float+0x3f8>
 800b7e0:	4806      	ldr	r0, [pc, #24]	; (800b7fc <_scanf_float+0x408>)
 800b7e2:	f000 f80d 	bl	800b800 <nanf>
 800b7e6:	ed86 0a00 	vstr	s0, [r6]
 800b7ea:	e7d0      	b.n	800b78e <_scanf_float+0x39a>
 800b7ec:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b7f0:	e7f9      	b.n	800b7e6 <_scanf_float+0x3f2>
 800b7f2:	2500      	movs	r5, #0
 800b7f4:	e63f      	b.n	800b476 <_scanf_float+0x82>
 800b7f6:	bf00      	nop
 800b7f8:	0800f6c4 	.word	0x0800f6c4
 800b7fc:	0800fad0 	.word	0x0800fad0

0800b800 <nanf>:
 800b800:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b808 <nanf+0x8>
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	7fc00000 	.word	0x7fc00000

0800b80c <siprintf>:
 800b80c:	b40e      	push	{r1, r2, r3}
 800b80e:	b500      	push	{lr}
 800b810:	b09c      	sub	sp, #112	; 0x70
 800b812:	ab1d      	add	r3, sp, #116	; 0x74
 800b814:	9002      	str	r0, [sp, #8]
 800b816:	9006      	str	r0, [sp, #24]
 800b818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b81c:	4809      	ldr	r0, [pc, #36]	; (800b844 <siprintf+0x38>)
 800b81e:	9107      	str	r1, [sp, #28]
 800b820:	9104      	str	r1, [sp, #16]
 800b822:	4909      	ldr	r1, [pc, #36]	; (800b848 <siprintf+0x3c>)
 800b824:	f853 2b04 	ldr.w	r2, [r3], #4
 800b828:	9105      	str	r1, [sp, #20]
 800b82a:	6800      	ldr	r0, [r0, #0]
 800b82c:	9301      	str	r3, [sp, #4]
 800b82e:	a902      	add	r1, sp, #8
 800b830:	f002 fe0c 	bl	800e44c <_svfiprintf_r>
 800b834:	9b02      	ldr	r3, [sp, #8]
 800b836:	2200      	movs	r2, #0
 800b838:	701a      	strb	r2, [r3, #0]
 800b83a:	b01c      	add	sp, #112	; 0x70
 800b83c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b840:	b003      	add	sp, #12
 800b842:	4770      	bx	lr
 800b844:	24000010 	.word	0x24000010
 800b848:	ffff0208 	.word	0xffff0208

0800b84c <sulp>:
 800b84c:	b570      	push	{r4, r5, r6, lr}
 800b84e:	4604      	mov	r4, r0
 800b850:	460d      	mov	r5, r1
 800b852:	4616      	mov	r6, r2
 800b854:	ec45 4b10 	vmov	d0, r4, r5
 800b858:	f002 fb5a 	bl	800df10 <__ulp>
 800b85c:	b17e      	cbz	r6, 800b87e <sulp+0x32>
 800b85e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b862:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b866:	2b00      	cmp	r3, #0
 800b868:	dd09      	ble.n	800b87e <sulp+0x32>
 800b86a:	051b      	lsls	r3, r3, #20
 800b86c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800b870:	2000      	movs	r0, #0
 800b872:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800b876:	ec41 0b17 	vmov	d7, r0, r1
 800b87a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b87e:	bd70      	pop	{r4, r5, r6, pc}

0800b880 <_strtod_l>:
 800b880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b884:	ed2d 8b0e 	vpush	{d8-d14}
 800b888:	b097      	sub	sp, #92	; 0x5c
 800b88a:	461f      	mov	r7, r3
 800b88c:	2300      	movs	r3, #0
 800b88e:	9312      	str	r3, [sp, #72]	; 0x48
 800b890:	4ba1      	ldr	r3, [pc, #644]	; (800bb18 <_strtod_l+0x298>)
 800b892:	920d      	str	r2, [sp, #52]	; 0x34
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	9307      	str	r3, [sp, #28]
 800b898:	4604      	mov	r4, r0
 800b89a:	4618      	mov	r0, r3
 800b89c:	468b      	mov	fp, r1
 800b89e:	f7f4 fd29 	bl	80002f4 <strlen>
 800b8a2:	f04f 0800 	mov.w	r8, #0
 800b8a6:	4605      	mov	r5, r0
 800b8a8:	f04f 0900 	mov.w	r9, #0
 800b8ac:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800b8b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b8b2:	7813      	ldrb	r3, [r2, #0]
 800b8b4:	2b2b      	cmp	r3, #43	; 0x2b
 800b8b6:	d04d      	beq.n	800b954 <_strtod_l+0xd4>
 800b8b8:	d83a      	bhi.n	800b930 <_strtod_l+0xb0>
 800b8ba:	2b0d      	cmp	r3, #13
 800b8bc:	d833      	bhi.n	800b926 <_strtod_l+0xa6>
 800b8be:	2b08      	cmp	r3, #8
 800b8c0:	d833      	bhi.n	800b92a <_strtod_l+0xaa>
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d03d      	beq.n	800b942 <_strtod_l+0xc2>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	9308      	str	r3, [sp, #32]
 800b8ca:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800b8cc:	7833      	ldrb	r3, [r6, #0]
 800b8ce:	2b30      	cmp	r3, #48	; 0x30
 800b8d0:	f040 80b0 	bne.w	800ba34 <_strtod_l+0x1b4>
 800b8d4:	7873      	ldrb	r3, [r6, #1]
 800b8d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b8da:	2b58      	cmp	r3, #88	; 0x58
 800b8dc:	d167      	bne.n	800b9ae <_strtod_l+0x12e>
 800b8de:	9b08      	ldr	r3, [sp, #32]
 800b8e0:	9301      	str	r3, [sp, #4]
 800b8e2:	ab12      	add	r3, sp, #72	; 0x48
 800b8e4:	9702      	str	r7, [sp, #8]
 800b8e6:	9300      	str	r3, [sp, #0]
 800b8e8:	4a8c      	ldr	r2, [pc, #560]	; (800bb1c <_strtod_l+0x29c>)
 800b8ea:	ab13      	add	r3, sp, #76	; 0x4c
 800b8ec:	a911      	add	r1, sp, #68	; 0x44
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f001 fc68 	bl	800d1c4 <__gethex>
 800b8f4:	f010 0507 	ands.w	r5, r0, #7
 800b8f8:	4607      	mov	r7, r0
 800b8fa:	d005      	beq.n	800b908 <_strtod_l+0x88>
 800b8fc:	2d06      	cmp	r5, #6
 800b8fe:	d12b      	bne.n	800b958 <_strtod_l+0xd8>
 800b900:	3601      	adds	r6, #1
 800b902:	2300      	movs	r3, #0
 800b904:	9611      	str	r6, [sp, #68]	; 0x44
 800b906:	9308      	str	r3, [sp, #32]
 800b908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f040 854e 	bne.w	800c3ac <_strtod_l+0xb2c>
 800b910:	9b08      	ldr	r3, [sp, #32]
 800b912:	b1e3      	cbz	r3, 800b94e <_strtod_l+0xce>
 800b914:	ec49 8b17 	vmov	d7, r8, r9
 800b918:	eeb1 0b47 	vneg.f64	d0, d7
 800b91c:	b017      	add	sp, #92	; 0x5c
 800b91e:	ecbd 8b0e 	vpop	{d8-d14}
 800b922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b926:	2b20      	cmp	r3, #32
 800b928:	d1cd      	bne.n	800b8c6 <_strtod_l+0x46>
 800b92a:	3201      	adds	r2, #1
 800b92c:	9211      	str	r2, [sp, #68]	; 0x44
 800b92e:	e7bf      	b.n	800b8b0 <_strtod_l+0x30>
 800b930:	2b2d      	cmp	r3, #45	; 0x2d
 800b932:	d1c8      	bne.n	800b8c6 <_strtod_l+0x46>
 800b934:	2301      	movs	r3, #1
 800b936:	9308      	str	r3, [sp, #32]
 800b938:	1c53      	adds	r3, r2, #1
 800b93a:	9311      	str	r3, [sp, #68]	; 0x44
 800b93c:	7853      	ldrb	r3, [r2, #1]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d1c3      	bne.n	800b8ca <_strtod_l+0x4a>
 800b942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b944:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f040 852d 	bne.w	800c3a8 <_strtod_l+0xb28>
 800b94e:	ec49 8b10 	vmov	d0, r8, r9
 800b952:	e7e3      	b.n	800b91c <_strtod_l+0x9c>
 800b954:	2300      	movs	r3, #0
 800b956:	e7ee      	b.n	800b936 <_strtod_l+0xb6>
 800b958:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b95a:	b13a      	cbz	r2, 800b96c <_strtod_l+0xec>
 800b95c:	2135      	movs	r1, #53	; 0x35
 800b95e:	a814      	add	r0, sp, #80	; 0x50
 800b960:	f002 fbde 	bl	800e120 <__copybits>
 800b964:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b966:	4620      	mov	r0, r4
 800b968:	f001 ffa0 	bl	800d8ac <_Bfree>
 800b96c:	3d01      	subs	r5, #1
 800b96e:	2d04      	cmp	r5, #4
 800b970:	d806      	bhi.n	800b980 <_strtod_l+0x100>
 800b972:	e8df f005 	tbb	[pc, r5]
 800b976:	030a      	.short	0x030a
 800b978:	1714      	.short	0x1714
 800b97a:	0a          	.byte	0x0a
 800b97b:	00          	.byte	0x00
 800b97c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800b980:	073f      	lsls	r7, r7, #28
 800b982:	d5c1      	bpl.n	800b908 <_strtod_l+0x88>
 800b984:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800b988:	e7be      	b.n	800b908 <_strtod_l+0x88>
 800b98a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800b98e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b990:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b994:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b998:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b99c:	e7f0      	b.n	800b980 <_strtod_l+0x100>
 800b99e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800bb20 <_strtod_l+0x2a0>
 800b9a2:	e7ed      	b.n	800b980 <_strtod_l+0x100>
 800b9a4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b9a8:	f04f 38ff 	mov.w	r8, #4294967295
 800b9ac:	e7e8      	b.n	800b980 <_strtod_l+0x100>
 800b9ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9b0:	1c5a      	adds	r2, r3, #1
 800b9b2:	9211      	str	r2, [sp, #68]	; 0x44
 800b9b4:	785b      	ldrb	r3, [r3, #1]
 800b9b6:	2b30      	cmp	r3, #48	; 0x30
 800b9b8:	d0f9      	beq.n	800b9ae <_strtod_l+0x12e>
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d0a4      	beq.n	800b908 <_strtod_l+0x88>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	f04f 0a00 	mov.w	sl, #0
 800b9c4:	9304      	str	r3, [sp, #16]
 800b9c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9c8:	930a      	str	r3, [sp, #40]	; 0x28
 800b9ca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b9ce:	f8cd a018 	str.w	sl, [sp, #24]
 800b9d2:	220a      	movs	r2, #10
 800b9d4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b9d6:	7807      	ldrb	r7, [r0, #0]
 800b9d8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b9dc:	b2d9      	uxtb	r1, r3
 800b9de:	2909      	cmp	r1, #9
 800b9e0:	d92a      	bls.n	800ba38 <_strtod_l+0x1b8>
 800b9e2:	9907      	ldr	r1, [sp, #28]
 800b9e4:	462a      	mov	r2, r5
 800b9e6:	f002 fe4b 	bl	800e680 <strncmp>
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	d033      	beq.n	800ba56 <_strtod_l+0x1d6>
 800b9ee:	2000      	movs	r0, #0
 800b9f0:	9b06      	ldr	r3, [sp, #24]
 800b9f2:	463a      	mov	r2, r7
 800b9f4:	4601      	mov	r1, r0
 800b9f6:	4607      	mov	r7, r0
 800b9f8:	2a65      	cmp	r2, #101	; 0x65
 800b9fa:	d001      	beq.n	800ba00 <_strtod_l+0x180>
 800b9fc:	2a45      	cmp	r2, #69	; 0x45
 800b9fe:	d117      	bne.n	800ba30 <_strtod_l+0x1b0>
 800ba00:	b91b      	cbnz	r3, 800ba0a <_strtod_l+0x18a>
 800ba02:	9b04      	ldr	r3, [sp, #16]
 800ba04:	4303      	orrs	r3, r0
 800ba06:	d09c      	beq.n	800b942 <_strtod_l+0xc2>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800ba0e:	f10b 0201 	add.w	r2, fp, #1
 800ba12:	9211      	str	r2, [sp, #68]	; 0x44
 800ba14:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800ba18:	2a2b      	cmp	r2, #43	; 0x2b
 800ba1a:	d071      	beq.n	800bb00 <_strtod_l+0x280>
 800ba1c:	2a2d      	cmp	r2, #45	; 0x2d
 800ba1e:	d077      	beq.n	800bb10 <_strtod_l+0x290>
 800ba20:	f04f 0e00 	mov.w	lr, #0
 800ba24:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800ba28:	2d09      	cmp	r5, #9
 800ba2a:	d97f      	bls.n	800bb2c <_strtod_l+0x2ac>
 800ba2c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800ba30:	2500      	movs	r5, #0
 800ba32:	e09b      	b.n	800bb6c <_strtod_l+0x2ec>
 800ba34:	2300      	movs	r3, #0
 800ba36:	e7c3      	b.n	800b9c0 <_strtod_l+0x140>
 800ba38:	9906      	ldr	r1, [sp, #24]
 800ba3a:	2908      	cmp	r1, #8
 800ba3c:	bfdd      	ittte	le
 800ba3e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ba40:	fb02 3301 	mlale	r3, r2, r1, r3
 800ba44:	9309      	strle	r3, [sp, #36]	; 0x24
 800ba46:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ba4a:	9b06      	ldr	r3, [sp, #24]
 800ba4c:	3001      	adds	r0, #1
 800ba4e:	3301      	adds	r3, #1
 800ba50:	9306      	str	r3, [sp, #24]
 800ba52:	9011      	str	r0, [sp, #68]	; 0x44
 800ba54:	e7be      	b.n	800b9d4 <_strtod_l+0x154>
 800ba56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba58:	195a      	adds	r2, r3, r5
 800ba5a:	9211      	str	r2, [sp, #68]	; 0x44
 800ba5c:	5d5a      	ldrb	r2, [r3, r5]
 800ba5e:	9b06      	ldr	r3, [sp, #24]
 800ba60:	b3a3      	cbz	r3, 800bacc <_strtod_l+0x24c>
 800ba62:	4607      	mov	r7, r0
 800ba64:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ba68:	2909      	cmp	r1, #9
 800ba6a:	d912      	bls.n	800ba92 <_strtod_l+0x212>
 800ba6c:	2101      	movs	r1, #1
 800ba6e:	e7c3      	b.n	800b9f8 <_strtod_l+0x178>
 800ba70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba72:	1c5a      	adds	r2, r3, #1
 800ba74:	9211      	str	r2, [sp, #68]	; 0x44
 800ba76:	785a      	ldrb	r2, [r3, #1]
 800ba78:	3001      	adds	r0, #1
 800ba7a:	2a30      	cmp	r2, #48	; 0x30
 800ba7c:	d0f8      	beq.n	800ba70 <_strtod_l+0x1f0>
 800ba7e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ba82:	2b08      	cmp	r3, #8
 800ba84:	f200 8497 	bhi.w	800c3b6 <_strtod_l+0xb36>
 800ba88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba8a:	930a      	str	r3, [sp, #40]	; 0x28
 800ba8c:	4607      	mov	r7, r0
 800ba8e:	2000      	movs	r0, #0
 800ba90:	4603      	mov	r3, r0
 800ba92:	3a30      	subs	r2, #48	; 0x30
 800ba94:	f100 0101 	add.w	r1, r0, #1
 800ba98:	d012      	beq.n	800bac0 <_strtod_l+0x240>
 800ba9a:	440f      	add	r7, r1
 800ba9c:	eb00 0c03 	add.w	ip, r0, r3
 800baa0:	4619      	mov	r1, r3
 800baa2:	250a      	movs	r5, #10
 800baa4:	4561      	cmp	r1, ip
 800baa6:	d113      	bne.n	800bad0 <_strtod_l+0x250>
 800baa8:	1819      	adds	r1, r3, r0
 800baaa:	2908      	cmp	r1, #8
 800baac:	f103 0301 	add.w	r3, r3, #1
 800bab0:	4403      	add	r3, r0
 800bab2:	dc1c      	bgt.n	800baee <_strtod_l+0x26e>
 800bab4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bab6:	210a      	movs	r1, #10
 800bab8:	fb01 2200 	mla	r2, r1, r0, r2
 800babc:	9209      	str	r2, [sp, #36]	; 0x24
 800babe:	2100      	movs	r1, #0
 800bac0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bac2:	1c50      	adds	r0, r2, #1
 800bac4:	9011      	str	r0, [sp, #68]	; 0x44
 800bac6:	7852      	ldrb	r2, [r2, #1]
 800bac8:	4608      	mov	r0, r1
 800baca:	e7cb      	b.n	800ba64 <_strtod_l+0x1e4>
 800bacc:	9806      	ldr	r0, [sp, #24]
 800bace:	e7d4      	b.n	800ba7a <_strtod_l+0x1fa>
 800bad0:	2908      	cmp	r1, #8
 800bad2:	dc04      	bgt.n	800bade <_strtod_l+0x25e>
 800bad4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bad6:	436e      	muls	r6, r5
 800bad8:	9609      	str	r6, [sp, #36]	; 0x24
 800bada:	3101      	adds	r1, #1
 800badc:	e7e2      	b.n	800baa4 <_strtod_l+0x224>
 800bade:	f101 0e01 	add.w	lr, r1, #1
 800bae2:	f1be 0f10 	cmp.w	lr, #16
 800bae6:	bfd8      	it	le
 800bae8:	fb05 fa0a 	mulle.w	sl, r5, sl
 800baec:	e7f5      	b.n	800bada <_strtod_l+0x25a>
 800baee:	2b10      	cmp	r3, #16
 800baf0:	bfdc      	itt	le
 800baf2:	210a      	movle	r1, #10
 800baf4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800baf8:	e7e1      	b.n	800babe <_strtod_l+0x23e>
 800bafa:	2700      	movs	r7, #0
 800bafc:	2101      	movs	r1, #1
 800bafe:	e780      	b.n	800ba02 <_strtod_l+0x182>
 800bb00:	f04f 0e00 	mov.w	lr, #0
 800bb04:	f10b 0202 	add.w	r2, fp, #2
 800bb08:	9211      	str	r2, [sp, #68]	; 0x44
 800bb0a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800bb0e:	e789      	b.n	800ba24 <_strtod_l+0x1a4>
 800bb10:	f04f 0e01 	mov.w	lr, #1
 800bb14:	e7f6      	b.n	800bb04 <_strtod_l+0x284>
 800bb16:	bf00      	nop
 800bb18:	0800f918 	.word	0x0800f918
 800bb1c:	0800f6cc 	.word	0x0800f6cc
 800bb20:	7ff00000 	.word	0x7ff00000
 800bb24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bb26:	1c55      	adds	r5, r2, #1
 800bb28:	9511      	str	r5, [sp, #68]	; 0x44
 800bb2a:	7852      	ldrb	r2, [r2, #1]
 800bb2c:	2a30      	cmp	r2, #48	; 0x30
 800bb2e:	d0f9      	beq.n	800bb24 <_strtod_l+0x2a4>
 800bb30:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800bb34:	2d08      	cmp	r5, #8
 800bb36:	f63f af7b 	bhi.w	800ba30 <_strtod_l+0x1b0>
 800bb3a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800bb3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bb40:	9207      	str	r2, [sp, #28]
 800bb42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bb44:	1c55      	adds	r5, r2, #1
 800bb46:	9511      	str	r5, [sp, #68]	; 0x44
 800bb48:	7852      	ldrb	r2, [r2, #1]
 800bb4a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800bb4e:	2e09      	cmp	r6, #9
 800bb50:	d937      	bls.n	800bbc2 <_strtod_l+0x342>
 800bb52:	9e07      	ldr	r6, [sp, #28]
 800bb54:	1bad      	subs	r5, r5, r6
 800bb56:	2d08      	cmp	r5, #8
 800bb58:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800bb5c:	dc02      	bgt.n	800bb64 <_strtod_l+0x2e4>
 800bb5e:	4565      	cmp	r5, ip
 800bb60:	bfa8      	it	ge
 800bb62:	4665      	movge	r5, ip
 800bb64:	f1be 0f00 	cmp.w	lr, #0
 800bb68:	d000      	beq.n	800bb6c <_strtod_l+0x2ec>
 800bb6a:	426d      	negs	r5, r5
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d14d      	bne.n	800bc0c <_strtod_l+0x38c>
 800bb70:	9b04      	ldr	r3, [sp, #16]
 800bb72:	4303      	orrs	r3, r0
 800bb74:	f47f aec8 	bne.w	800b908 <_strtod_l+0x88>
 800bb78:	2900      	cmp	r1, #0
 800bb7a:	f47f aee2 	bne.w	800b942 <_strtod_l+0xc2>
 800bb7e:	2a69      	cmp	r2, #105	; 0x69
 800bb80:	d027      	beq.n	800bbd2 <_strtod_l+0x352>
 800bb82:	dc24      	bgt.n	800bbce <_strtod_l+0x34e>
 800bb84:	2a49      	cmp	r2, #73	; 0x49
 800bb86:	d024      	beq.n	800bbd2 <_strtod_l+0x352>
 800bb88:	2a4e      	cmp	r2, #78	; 0x4e
 800bb8a:	f47f aeda 	bne.w	800b942 <_strtod_l+0xc2>
 800bb8e:	4996      	ldr	r1, [pc, #600]	; (800bde8 <_strtod_l+0x568>)
 800bb90:	a811      	add	r0, sp, #68	; 0x44
 800bb92:	f001 fd6f 	bl	800d674 <__match>
 800bb96:	2800      	cmp	r0, #0
 800bb98:	f43f aed3 	beq.w	800b942 <_strtod_l+0xc2>
 800bb9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	2b28      	cmp	r3, #40	; 0x28
 800bba2:	d12d      	bne.n	800bc00 <_strtod_l+0x380>
 800bba4:	4991      	ldr	r1, [pc, #580]	; (800bdec <_strtod_l+0x56c>)
 800bba6:	aa14      	add	r2, sp, #80	; 0x50
 800bba8:	a811      	add	r0, sp, #68	; 0x44
 800bbaa:	f001 fd77 	bl	800d69c <__hexnan>
 800bbae:	2805      	cmp	r0, #5
 800bbb0:	d126      	bne.n	800bc00 <_strtod_l+0x380>
 800bbb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbb4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800bbb8:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800bbbc:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800bbc0:	e6a2      	b.n	800b908 <_strtod_l+0x88>
 800bbc2:	250a      	movs	r5, #10
 800bbc4:	fb05 250c 	mla	r5, r5, ip, r2
 800bbc8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800bbcc:	e7b9      	b.n	800bb42 <_strtod_l+0x2c2>
 800bbce:	2a6e      	cmp	r2, #110	; 0x6e
 800bbd0:	e7db      	b.n	800bb8a <_strtod_l+0x30a>
 800bbd2:	4987      	ldr	r1, [pc, #540]	; (800bdf0 <_strtod_l+0x570>)
 800bbd4:	a811      	add	r0, sp, #68	; 0x44
 800bbd6:	f001 fd4d 	bl	800d674 <__match>
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	f43f aeb1 	beq.w	800b942 <_strtod_l+0xc2>
 800bbe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbe2:	4984      	ldr	r1, [pc, #528]	; (800bdf4 <_strtod_l+0x574>)
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	a811      	add	r0, sp, #68	; 0x44
 800bbe8:	9311      	str	r3, [sp, #68]	; 0x44
 800bbea:	f001 fd43 	bl	800d674 <__match>
 800bbee:	b910      	cbnz	r0, 800bbf6 <_strtod_l+0x376>
 800bbf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	9311      	str	r3, [sp, #68]	; 0x44
 800bbf6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800be08 <_strtod_l+0x588>
 800bbfa:	f04f 0800 	mov.w	r8, #0
 800bbfe:	e683      	b.n	800b908 <_strtod_l+0x88>
 800bc00:	487d      	ldr	r0, [pc, #500]	; (800bdf8 <_strtod_l+0x578>)
 800bc02:	f002 fd25 	bl	800e650 <nan>
 800bc06:	ec59 8b10 	vmov	r8, r9, d0
 800bc0a:	e67d      	b.n	800b908 <_strtod_l+0x88>
 800bc0c:	1bea      	subs	r2, r5, r7
 800bc0e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800bc12:	9207      	str	r2, [sp, #28]
 800bc14:	9a06      	ldr	r2, [sp, #24]
 800bc16:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bc1a:	2a00      	cmp	r2, #0
 800bc1c:	bf08      	it	eq
 800bc1e:	461a      	moveq	r2, r3
 800bc20:	2b10      	cmp	r3, #16
 800bc22:	9206      	str	r2, [sp, #24]
 800bc24:	461a      	mov	r2, r3
 800bc26:	bfa8      	it	ge
 800bc28:	2210      	movge	r2, #16
 800bc2a:	2b09      	cmp	r3, #9
 800bc2c:	ec59 8b17 	vmov	r8, r9, d7
 800bc30:	dd0c      	ble.n	800bc4c <_strtod_l+0x3cc>
 800bc32:	4972      	ldr	r1, [pc, #456]	; (800bdfc <_strtod_l+0x57c>)
 800bc34:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800bc38:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800bc3c:	ee06 aa90 	vmov	s13, sl
 800bc40:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800bc44:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bc48:	ec59 8b16 	vmov	r8, r9, d6
 800bc4c:	2b0f      	cmp	r3, #15
 800bc4e:	dc36      	bgt.n	800bcbe <_strtod_l+0x43e>
 800bc50:	9907      	ldr	r1, [sp, #28]
 800bc52:	2900      	cmp	r1, #0
 800bc54:	f43f ae58 	beq.w	800b908 <_strtod_l+0x88>
 800bc58:	dd23      	ble.n	800bca2 <_strtod_l+0x422>
 800bc5a:	2916      	cmp	r1, #22
 800bc5c:	dc0b      	bgt.n	800bc76 <_strtod_l+0x3f6>
 800bc5e:	4b67      	ldr	r3, [pc, #412]	; (800bdfc <_strtod_l+0x57c>)
 800bc60:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800bc64:	ed93 7b00 	vldr	d7, [r3]
 800bc68:	ec49 8b16 	vmov	d6, r8, r9
 800bc6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bc70:	ec59 8b17 	vmov	r8, r9, d7
 800bc74:	e648      	b.n	800b908 <_strtod_l+0x88>
 800bc76:	9807      	ldr	r0, [sp, #28]
 800bc78:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800bc7c:	4281      	cmp	r1, r0
 800bc7e:	db1e      	blt.n	800bcbe <_strtod_l+0x43e>
 800bc80:	4a5e      	ldr	r2, [pc, #376]	; (800bdfc <_strtod_l+0x57c>)
 800bc82:	f1c3 030f 	rsb	r3, r3, #15
 800bc86:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800bc8a:	ed91 7b00 	vldr	d7, [r1]
 800bc8e:	ec49 8b16 	vmov	d6, r8, r9
 800bc92:	1ac3      	subs	r3, r0, r3
 800bc94:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bc98:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bc9c:	ed92 6b00 	vldr	d6, [r2]
 800bca0:	e7e4      	b.n	800bc6c <_strtod_l+0x3ec>
 800bca2:	9907      	ldr	r1, [sp, #28]
 800bca4:	3116      	adds	r1, #22
 800bca6:	db0a      	blt.n	800bcbe <_strtod_l+0x43e>
 800bca8:	4b54      	ldr	r3, [pc, #336]	; (800bdfc <_strtod_l+0x57c>)
 800bcaa:	1b7d      	subs	r5, r7, r5
 800bcac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bcb0:	ed95 7b00 	vldr	d7, [r5]
 800bcb4:	ec49 8b16 	vmov	d6, r8, r9
 800bcb8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bcbc:	e7d8      	b.n	800bc70 <_strtod_l+0x3f0>
 800bcbe:	9907      	ldr	r1, [sp, #28]
 800bcc0:	1a9a      	subs	r2, r3, r2
 800bcc2:	440a      	add	r2, r1
 800bcc4:	2a00      	cmp	r2, #0
 800bcc6:	dd6f      	ble.n	800bda8 <_strtod_l+0x528>
 800bcc8:	f012 000f 	ands.w	r0, r2, #15
 800bccc:	d00a      	beq.n	800bce4 <_strtod_l+0x464>
 800bcce:	494b      	ldr	r1, [pc, #300]	; (800bdfc <_strtod_l+0x57c>)
 800bcd0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bcd4:	ed91 7b00 	vldr	d7, [r1]
 800bcd8:	ec49 8b16 	vmov	d6, r8, r9
 800bcdc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bce0:	ec59 8b17 	vmov	r8, r9, d7
 800bce4:	f032 020f 	bics.w	r2, r2, #15
 800bce8:	d04f      	beq.n	800bd8a <_strtod_l+0x50a>
 800bcea:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800bcee:	dd22      	ble.n	800bd36 <_strtod_l+0x4b6>
 800bcf0:	2500      	movs	r5, #0
 800bcf2:	462e      	mov	r6, r5
 800bcf4:	9506      	str	r5, [sp, #24]
 800bcf6:	462f      	mov	r7, r5
 800bcf8:	2322      	movs	r3, #34	; 0x22
 800bcfa:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800be08 <_strtod_l+0x588>
 800bcfe:	6023      	str	r3, [r4, #0]
 800bd00:	f04f 0800 	mov.w	r8, #0
 800bd04:	9b06      	ldr	r3, [sp, #24]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	f43f adfe 	beq.w	800b908 <_strtod_l+0x88>
 800bd0c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f001 fdcc 	bl	800d8ac <_Bfree>
 800bd14:	4639      	mov	r1, r7
 800bd16:	4620      	mov	r0, r4
 800bd18:	f001 fdc8 	bl	800d8ac <_Bfree>
 800bd1c:	4631      	mov	r1, r6
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f001 fdc4 	bl	800d8ac <_Bfree>
 800bd24:	9906      	ldr	r1, [sp, #24]
 800bd26:	4620      	mov	r0, r4
 800bd28:	f001 fdc0 	bl	800d8ac <_Bfree>
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f001 fdbc 	bl	800d8ac <_Bfree>
 800bd34:	e5e8      	b.n	800b908 <_strtod_l+0x88>
 800bd36:	2000      	movs	r0, #0
 800bd38:	ec49 8b17 	vmov	d7, r8, r9
 800bd3c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800be00 <_strtod_l+0x580>
 800bd40:	1112      	asrs	r2, r2, #4
 800bd42:	4601      	mov	r1, r0
 800bd44:	2a01      	cmp	r2, #1
 800bd46:	dc23      	bgt.n	800bd90 <_strtod_l+0x510>
 800bd48:	b108      	cbz	r0, 800bd4e <_strtod_l+0x4ce>
 800bd4a:	ec59 8b17 	vmov	r8, r9, d7
 800bd4e:	4a2c      	ldr	r2, [pc, #176]	; (800be00 <_strtod_l+0x580>)
 800bd50:	482c      	ldr	r0, [pc, #176]	; (800be04 <_strtod_l+0x584>)
 800bd52:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bd56:	ed92 7b00 	vldr	d7, [r2]
 800bd5a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bd5e:	ec49 8b16 	vmov	d6, r8, r9
 800bd62:	4a29      	ldr	r2, [pc, #164]	; (800be08 <_strtod_l+0x588>)
 800bd64:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bd68:	ee17 1a90 	vmov	r1, s15
 800bd6c:	400a      	ands	r2, r1
 800bd6e:	4282      	cmp	r2, r0
 800bd70:	ec59 8b17 	vmov	r8, r9, d7
 800bd74:	d8bc      	bhi.n	800bcf0 <_strtod_l+0x470>
 800bd76:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800bd7a:	4282      	cmp	r2, r0
 800bd7c:	bf86      	itte	hi
 800bd7e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800be0c <_strtod_l+0x58c>
 800bd82:	f04f 38ff 	movhi.w	r8, #4294967295
 800bd86:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	9204      	str	r2, [sp, #16]
 800bd8e:	e078      	b.n	800be82 <_strtod_l+0x602>
 800bd90:	07d6      	lsls	r6, r2, #31
 800bd92:	d504      	bpl.n	800bd9e <_strtod_l+0x51e>
 800bd94:	ed9c 6b00 	vldr	d6, [ip]
 800bd98:	2001      	movs	r0, #1
 800bd9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bd9e:	3101      	adds	r1, #1
 800bda0:	1052      	asrs	r2, r2, #1
 800bda2:	f10c 0c08 	add.w	ip, ip, #8
 800bda6:	e7cd      	b.n	800bd44 <_strtod_l+0x4c4>
 800bda8:	d0ef      	beq.n	800bd8a <_strtod_l+0x50a>
 800bdaa:	4252      	negs	r2, r2
 800bdac:	f012 000f 	ands.w	r0, r2, #15
 800bdb0:	d00a      	beq.n	800bdc8 <_strtod_l+0x548>
 800bdb2:	4912      	ldr	r1, [pc, #72]	; (800bdfc <_strtod_l+0x57c>)
 800bdb4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bdb8:	ed91 7b00 	vldr	d7, [r1]
 800bdbc:	ec49 8b16 	vmov	d6, r8, r9
 800bdc0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bdc4:	ec59 8b17 	vmov	r8, r9, d7
 800bdc8:	1112      	asrs	r2, r2, #4
 800bdca:	d0de      	beq.n	800bd8a <_strtod_l+0x50a>
 800bdcc:	2a1f      	cmp	r2, #31
 800bdce:	dd1f      	ble.n	800be10 <_strtod_l+0x590>
 800bdd0:	2500      	movs	r5, #0
 800bdd2:	462e      	mov	r6, r5
 800bdd4:	9506      	str	r5, [sp, #24]
 800bdd6:	462f      	mov	r7, r5
 800bdd8:	2322      	movs	r3, #34	; 0x22
 800bdda:	f04f 0800 	mov.w	r8, #0
 800bdde:	f04f 0900 	mov.w	r9, #0
 800bde2:	6023      	str	r3, [r4, #0]
 800bde4:	e78e      	b.n	800bd04 <_strtod_l+0x484>
 800bde6:	bf00      	nop
 800bde8:	0800f69d 	.word	0x0800f69d
 800bdec:	0800f6e0 	.word	0x0800f6e0
 800bdf0:	0800f695 	.word	0x0800f695
 800bdf4:	0800f824 	.word	0x0800f824
 800bdf8:	0800fad0 	.word	0x0800fad0
 800bdfc:	0800f9b0 	.word	0x0800f9b0
 800be00:	0800f988 	.word	0x0800f988
 800be04:	7ca00000 	.word	0x7ca00000
 800be08:	7ff00000 	.word	0x7ff00000
 800be0c:	7fefffff 	.word	0x7fefffff
 800be10:	f012 0110 	ands.w	r1, r2, #16
 800be14:	bf18      	it	ne
 800be16:	216a      	movne	r1, #106	; 0x6a
 800be18:	9104      	str	r1, [sp, #16]
 800be1a:	ec49 8b17 	vmov	d7, r8, r9
 800be1e:	49be      	ldr	r1, [pc, #760]	; (800c118 <_strtod_l+0x898>)
 800be20:	2000      	movs	r0, #0
 800be22:	07d6      	lsls	r6, r2, #31
 800be24:	d504      	bpl.n	800be30 <_strtod_l+0x5b0>
 800be26:	ed91 6b00 	vldr	d6, [r1]
 800be2a:	2001      	movs	r0, #1
 800be2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800be30:	1052      	asrs	r2, r2, #1
 800be32:	f101 0108 	add.w	r1, r1, #8
 800be36:	d1f4      	bne.n	800be22 <_strtod_l+0x5a2>
 800be38:	b108      	cbz	r0, 800be3e <_strtod_l+0x5be>
 800be3a:	ec59 8b17 	vmov	r8, r9, d7
 800be3e:	9a04      	ldr	r2, [sp, #16]
 800be40:	b1c2      	cbz	r2, 800be74 <_strtod_l+0x5f4>
 800be42:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800be46:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800be4a:	2a00      	cmp	r2, #0
 800be4c:	4648      	mov	r0, r9
 800be4e:	dd11      	ble.n	800be74 <_strtod_l+0x5f4>
 800be50:	2a1f      	cmp	r2, #31
 800be52:	f340 812e 	ble.w	800c0b2 <_strtod_l+0x832>
 800be56:	2a34      	cmp	r2, #52	; 0x34
 800be58:	bfde      	ittt	le
 800be5a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800be5e:	f04f 32ff 	movle.w	r2, #4294967295
 800be62:	fa02 f101 	lslle.w	r1, r2, r1
 800be66:	f04f 0800 	mov.w	r8, #0
 800be6a:	bfcc      	ite	gt
 800be6c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800be70:	ea01 0900 	andle.w	r9, r1, r0
 800be74:	ec49 8b17 	vmov	d7, r8, r9
 800be78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800be7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be80:	d0a6      	beq.n	800bdd0 <_strtod_l+0x550>
 800be82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be84:	9200      	str	r2, [sp, #0]
 800be86:	990a      	ldr	r1, [sp, #40]	; 0x28
 800be88:	9a06      	ldr	r2, [sp, #24]
 800be8a:	4620      	mov	r0, r4
 800be8c:	f001 fd76 	bl	800d97c <__s2b>
 800be90:	9006      	str	r0, [sp, #24]
 800be92:	2800      	cmp	r0, #0
 800be94:	f43f af2c 	beq.w	800bcf0 <_strtod_l+0x470>
 800be98:	9b07      	ldr	r3, [sp, #28]
 800be9a:	1b7d      	subs	r5, r7, r5
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	bfb4      	ite	lt
 800bea0:	462b      	movlt	r3, r5
 800bea2:	2300      	movge	r3, #0
 800bea4:	9309      	str	r3, [sp, #36]	; 0x24
 800bea6:	9b07      	ldr	r3, [sp, #28]
 800bea8:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800c0f8 <_strtod_l+0x878>
 800beac:	ed9f ab94 	vldr	d10, [pc, #592]	; 800c100 <_strtod_l+0x880>
 800beb0:	ed9f bb95 	vldr	d11, [pc, #596]	; 800c108 <_strtod_l+0x888>
 800beb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800beb8:	2500      	movs	r5, #0
 800beba:	930c      	str	r3, [sp, #48]	; 0x30
 800bebc:	462e      	mov	r6, r5
 800bebe:	9b06      	ldr	r3, [sp, #24]
 800bec0:	4620      	mov	r0, r4
 800bec2:	6859      	ldr	r1, [r3, #4]
 800bec4:	f001 fcb2 	bl	800d82c <_Balloc>
 800bec8:	4607      	mov	r7, r0
 800beca:	2800      	cmp	r0, #0
 800becc:	f43f af14 	beq.w	800bcf8 <_strtod_l+0x478>
 800bed0:	9b06      	ldr	r3, [sp, #24]
 800bed2:	691a      	ldr	r2, [r3, #16]
 800bed4:	3202      	adds	r2, #2
 800bed6:	f103 010c 	add.w	r1, r3, #12
 800beda:	0092      	lsls	r2, r2, #2
 800bedc:	300c      	adds	r0, #12
 800bede:	f001 fc97 	bl	800d810 <memcpy>
 800bee2:	ec49 8b10 	vmov	d0, r8, r9
 800bee6:	aa14      	add	r2, sp, #80	; 0x50
 800bee8:	a913      	add	r1, sp, #76	; 0x4c
 800beea:	4620      	mov	r0, r4
 800beec:	f002 f88c 	bl	800e008 <__d2b>
 800bef0:	ec49 8b18 	vmov	d8, r8, r9
 800bef4:	9012      	str	r0, [sp, #72]	; 0x48
 800bef6:	2800      	cmp	r0, #0
 800bef8:	f43f aefe 	beq.w	800bcf8 <_strtod_l+0x478>
 800befc:	2101      	movs	r1, #1
 800befe:	4620      	mov	r0, r4
 800bf00:	f001 fdd6 	bl	800dab0 <__i2b>
 800bf04:	4606      	mov	r6, r0
 800bf06:	2800      	cmp	r0, #0
 800bf08:	f43f aef6 	beq.w	800bcf8 <_strtod_l+0x478>
 800bf0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf0e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	bfab      	itete	ge
 800bf14:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800bf16:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800bf18:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800bf1c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800bf20:	bfac      	ite	ge
 800bf22:	eb03 0b02 	addge.w	fp, r3, r2
 800bf26:	eba2 0a03 	sublt.w	sl, r2, r3
 800bf2a:	9a04      	ldr	r2, [sp, #16]
 800bf2c:	1a9b      	subs	r3, r3, r2
 800bf2e:	440b      	add	r3, r1
 800bf30:	4a7a      	ldr	r2, [pc, #488]	; (800c11c <_strtod_l+0x89c>)
 800bf32:	3b01      	subs	r3, #1
 800bf34:	4293      	cmp	r3, r2
 800bf36:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800bf3a:	f280 80cd 	bge.w	800c0d8 <_strtod_l+0x858>
 800bf3e:	1ad2      	subs	r2, r2, r3
 800bf40:	2a1f      	cmp	r2, #31
 800bf42:	eba1 0102 	sub.w	r1, r1, r2
 800bf46:	f04f 0001 	mov.w	r0, #1
 800bf4a:	f300 80b9 	bgt.w	800c0c0 <_strtod_l+0x840>
 800bf4e:	fa00 f302 	lsl.w	r3, r0, r2
 800bf52:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf54:	2300      	movs	r3, #0
 800bf56:	930a      	str	r3, [sp, #40]	; 0x28
 800bf58:	eb0b 0301 	add.w	r3, fp, r1
 800bf5c:	9a04      	ldr	r2, [sp, #16]
 800bf5e:	459b      	cmp	fp, r3
 800bf60:	448a      	add	sl, r1
 800bf62:	4492      	add	sl, r2
 800bf64:	465a      	mov	r2, fp
 800bf66:	bfa8      	it	ge
 800bf68:	461a      	movge	r2, r3
 800bf6a:	4552      	cmp	r2, sl
 800bf6c:	bfa8      	it	ge
 800bf6e:	4652      	movge	r2, sl
 800bf70:	2a00      	cmp	r2, #0
 800bf72:	bfc2      	ittt	gt
 800bf74:	1a9b      	subgt	r3, r3, r2
 800bf76:	ebaa 0a02 	subgt.w	sl, sl, r2
 800bf7a:	ebab 0b02 	subgt.w	fp, fp, r2
 800bf7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf80:	2a00      	cmp	r2, #0
 800bf82:	dd18      	ble.n	800bfb6 <_strtod_l+0x736>
 800bf84:	4631      	mov	r1, r6
 800bf86:	4620      	mov	r0, r4
 800bf88:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf8a:	f001 fe51 	bl	800dc30 <__pow5mult>
 800bf8e:	4606      	mov	r6, r0
 800bf90:	2800      	cmp	r0, #0
 800bf92:	f43f aeb1 	beq.w	800bcf8 <_strtod_l+0x478>
 800bf96:	4601      	mov	r1, r0
 800bf98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f001 fd9e 	bl	800dadc <__multiply>
 800bfa0:	900e      	str	r0, [sp, #56]	; 0x38
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	f43f aea8 	beq.w	800bcf8 <_strtod_l+0x478>
 800bfa8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f001 fc7e 	bl	800d8ac <_Bfree>
 800bfb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfb4:	9212      	str	r2, [sp, #72]	; 0x48
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f300 8093 	bgt.w	800c0e2 <_strtod_l+0x862>
 800bfbc:	9b07      	ldr	r3, [sp, #28]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	dd08      	ble.n	800bfd4 <_strtod_l+0x754>
 800bfc2:	4639      	mov	r1, r7
 800bfc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f001 fe32 	bl	800dc30 <__pow5mult>
 800bfcc:	4607      	mov	r7, r0
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	f43f ae92 	beq.w	800bcf8 <_strtod_l+0x478>
 800bfd4:	f1ba 0f00 	cmp.w	sl, #0
 800bfd8:	dd08      	ble.n	800bfec <_strtod_l+0x76c>
 800bfda:	4639      	mov	r1, r7
 800bfdc:	4652      	mov	r2, sl
 800bfde:	4620      	mov	r0, r4
 800bfe0:	f001 fe80 	bl	800dce4 <__lshift>
 800bfe4:	4607      	mov	r7, r0
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	f43f ae86 	beq.w	800bcf8 <_strtod_l+0x478>
 800bfec:	f1bb 0f00 	cmp.w	fp, #0
 800bff0:	dd08      	ble.n	800c004 <_strtod_l+0x784>
 800bff2:	4631      	mov	r1, r6
 800bff4:	465a      	mov	r2, fp
 800bff6:	4620      	mov	r0, r4
 800bff8:	f001 fe74 	bl	800dce4 <__lshift>
 800bffc:	4606      	mov	r6, r0
 800bffe:	2800      	cmp	r0, #0
 800c000:	f43f ae7a 	beq.w	800bcf8 <_strtod_l+0x478>
 800c004:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c006:	463a      	mov	r2, r7
 800c008:	4620      	mov	r0, r4
 800c00a:	f001 fef7 	bl	800ddfc <__mdiff>
 800c00e:	4605      	mov	r5, r0
 800c010:	2800      	cmp	r0, #0
 800c012:	f43f ae71 	beq.w	800bcf8 <_strtod_l+0x478>
 800c016:	2300      	movs	r3, #0
 800c018:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800c01c:	60c3      	str	r3, [r0, #12]
 800c01e:	4631      	mov	r1, r6
 800c020:	f001 fed0 	bl	800ddc4 <__mcmp>
 800c024:	2800      	cmp	r0, #0
 800c026:	da7d      	bge.n	800c124 <_strtod_l+0x8a4>
 800c028:	ea5a 0308 	orrs.w	r3, sl, r8
 800c02c:	f040 80a3 	bne.w	800c176 <_strtod_l+0x8f6>
 800c030:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c034:	2b00      	cmp	r3, #0
 800c036:	f040 809e 	bne.w	800c176 <_strtod_l+0x8f6>
 800c03a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c03e:	0d1b      	lsrs	r3, r3, #20
 800c040:	051b      	lsls	r3, r3, #20
 800c042:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c046:	f240 8096 	bls.w	800c176 <_strtod_l+0x8f6>
 800c04a:	696b      	ldr	r3, [r5, #20]
 800c04c:	b91b      	cbnz	r3, 800c056 <_strtod_l+0x7d6>
 800c04e:	692b      	ldr	r3, [r5, #16]
 800c050:	2b01      	cmp	r3, #1
 800c052:	f340 8090 	ble.w	800c176 <_strtod_l+0x8f6>
 800c056:	4629      	mov	r1, r5
 800c058:	2201      	movs	r2, #1
 800c05a:	4620      	mov	r0, r4
 800c05c:	f001 fe42 	bl	800dce4 <__lshift>
 800c060:	4631      	mov	r1, r6
 800c062:	4605      	mov	r5, r0
 800c064:	f001 feae 	bl	800ddc4 <__mcmp>
 800c068:	2800      	cmp	r0, #0
 800c06a:	f340 8084 	ble.w	800c176 <_strtod_l+0x8f6>
 800c06e:	9904      	ldr	r1, [sp, #16]
 800c070:	4a2b      	ldr	r2, [pc, #172]	; (800c120 <_strtod_l+0x8a0>)
 800c072:	464b      	mov	r3, r9
 800c074:	2900      	cmp	r1, #0
 800c076:	f000 809d 	beq.w	800c1b4 <_strtod_l+0x934>
 800c07a:	ea02 0109 	and.w	r1, r2, r9
 800c07e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c082:	f300 8097 	bgt.w	800c1b4 <_strtod_l+0x934>
 800c086:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c08a:	f77f aea5 	ble.w	800bdd8 <_strtod_l+0x558>
 800c08e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c110 <_strtod_l+0x890>
 800c092:	ec49 8b16 	vmov	d6, r8, r9
 800c096:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c09a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c09e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	bf08      	it	eq
 800c0a6:	2322      	moveq	r3, #34	; 0x22
 800c0a8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c0ac:	bf08      	it	eq
 800c0ae:	6023      	streq	r3, [r4, #0]
 800c0b0:	e62c      	b.n	800bd0c <_strtod_l+0x48c>
 800c0b2:	f04f 31ff 	mov.w	r1, #4294967295
 800c0b6:	fa01 f202 	lsl.w	r2, r1, r2
 800c0ba:	ea02 0808 	and.w	r8, r2, r8
 800c0be:	e6d9      	b.n	800be74 <_strtod_l+0x5f4>
 800c0c0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800c0c4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c0c8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800c0cc:	33e2      	adds	r3, #226	; 0xe2
 800c0ce:	fa00 f303 	lsl.w	r3, r0, r3
 800c0d2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800c0d6:	e73f      	b.n	800bf58 <_strtod_l+0x6d8>
 800c0d8:	2200      	movs	r2, #0
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c0e0:	e73a      	b.n	800bf58 <_strtod_l+0x6d8>
 800c0e2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	f001 fdfc 	bl	800dce4 <__lshift>
 800c0ec:	9012      	str	r0, [sp, #72]	; 0x48
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	f47f af64 	bne.w	800bfbc <_strtod_l+0x73c>
 800c0f4:	e600      	b.n	800bcf8 <_strtod_l+0x478>
 800c0f6:	bf00      	nop
 800c0f8:	94a03595 	.word	0x94a03595
 800c0fc:	3fcfffff 	.word	0x3fcfffff
 800c100:	94a03595 	.word	0x94a03595
 800c104:	3fdfffff 	.word	0x3fdfffff
 800c108:	35afe535 	.word	0x35afe535
 800c10c:	3fe00000 	.word	0x3fe00000
 800c110:	00000000 	.word	0x00000000
 800c114:	39500000 	.word	0x39500000
 800c118:	0800f6f8 	.word	0x0800f6f8
 800c11c:	fffffc02 	.word	0xfffffc02
 800c120:	7ff00000 	.word	0x7ff00000
 800c124:	46cb      	mov	fp, r9
 800c126:	d15f      	bne.n	800c1e8 <_strtod_l+0x968>
 800c128:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c12c:	f1ba 0f00 	cmp.w	sl, #0
 800c130:	d02a      	beq.n	800c188 <_strtod_l+0x908>
 800c132:	4aa7      	ldr	r2, [pc, #668]	; (800c3d0 <_strtod_l+0xb50>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d12b      	bne.n	800c190 <_strtod_l+0x910>
 800c138:	9b04      	ldr	r3, [sp, #16]
 800c13a:	4642      	mov	r2, r8
 800c13c:	b1fb      	cbz	r3, 800c17e <_strtod_l+0x8fe>
 800c13e:	4ba5      	ldr	r3, [pc, #660]	; (800c3d4 <_strtod_l+0xb54>)
 800c140:	ea09 0303 	and.w	r3, r9, r3
 800c144:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c148:	f04f 31ff 	mov.w	r1, #4294967295
 800c14c:	d81a      	bhi.n	800c184 <_strtod_l+0x904>
 800c14e:	0d1b      	lsrs	r3, r3, #20
 800c150:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c154:	fa01 f303 	lsl.w	r3, r1, r3
 800c158:	429a      	cmp	r2, r3
 800c15a:	d119      	bne.n	800c190 <_strtod_l+0x910>
 800c15c:	4b9e      	ldr	r3, [pc, #632]	; (800c3d8 <_strtod_l+0xb58>)
 800c15e:	459b      	cmp	fp, r3
 800c160:	d102      	bne.n	800c168 <_strtod_l+0x8e8>
 800c162:	3201      	adds	r2, #1
 800c164:	f43f adc8 	beq.w	800bcf8 <_strtod_l+0x478>
 800c168:	4b9a      	ldr	r3, [pc, #616]	; (800c3d4 <_strtod_l+0xb54>)
 800c16a:	ea0b 0303 	and.w	r3, fp, r3
 800c16e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c172:	f04f 0800 	mov.w	r8, #0
 800c176:	9b04      	ldr	r3, [sp, #16]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d188      	bne.n	800c08e <_strtod_l+0x80e>
 800c17c:	e5c6      	b.n	800bd0c <_strtod_l+0x48c>
 800c17e:	f04f 33ff 	mov.w	r3, #4294967295
 800c182:	e7e9      	b.n	800c158 <_strtod_l+0x8d8>
 800c184:	460b      	mov	r3, r1
 800c186:	e7e7      	b.n	800c158 <_strtod_l+0x8d8>
 800c188:	ea53 0308 	orrs.w	r3, r3, r8
 800c18c:	f43f af6f 	beq.w	800c06e <_strtod_l+0x7ee>
 800c190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c192:	b1cb      	cbz	r3, 800c1c8 <_strtod_l+0x948>
 800c194:	ea13 0f0b 	tst.w	r3, fp
 800c198:	d0ed      	beq.n	800c176 <_strtod_l+0x8f6>
 800c19a:	9a04      	ldr	r2, [sp, #16]
 800c19c:	4640      	mov	r0, r8
 800c19e:	4649      	mov	r1, r9
 800c1a0:	f1ba 0f00 	cmp.w	sl, #0
 800c1a4:	d014      	beq.n	800c1d0 <_strtod_l+0x950>
 800c1a6:	f7ff fb51 	bl	800b84c <sulp>
 800c1aa:	ee38 7b00 	vadd.f64	d7, d8, d0
 800c1ae:	ec59 8b17 	vmov	r8, r9, d7
 800c1b2:	e7e0      	b.n	800c176 <_strtod_l+0x8f6>
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c1ba:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c1be:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c1c2:	f04f 38ff 	mov.w	r8, #4294967295
 800c1c6:	e7d6      	b.n	800c176 <_strtod_l+0x8f6>
 800c1c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1ca:	ea13 0f08 	tst.w	r3, r8
 800c1ce:	e7e3      	b.n	800c198 <_strtod_l+0x918>
 800c1d0:	f7ff fb3c 	bl	800b84c <sulp>
 800c1d4:	ee38 0b40 	vsub.f64	d0, d8, d0
 800c1d8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e0:	ec59 8b10 	vmov	r8, r9, d0
 800c1e4:	d1c7      	bne.n	800c176 <_strtod_l+0x8f6>
 800c1e6:	e5f7      	b.n	800bdd8 <_strtod_l+0x558>
 800c1e8:	4631      	mov	r1, r6
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	f001 ff68 	bl	800e0c0 <__ratio>
 800c1f0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800c1f4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1fc:	d865      	bhi.n	800c2ca <_strtod_l+0xa4a>
 800c1fe:	f1ba 0f00 	cmp.w	sl, #0
 800c202:	d042      	beq.n	800c28a <_strtod_l+0xa0a>
 800c204:	4b75      	ldr	r3, [pc, #468]	; (800c3dc <_strtod_l+0xb5c>)
 800c206:	2200      	movs	r2, #0
 800c208:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800c20c:	4871      	ldr	r0, [pc, #452]	; (800c3d4 <_strtod_l+0xb54>)
 800c20e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800c3e8 <_strtod_l+0xb68>
 800c212:	ea0b 0100 	and.w	r1, fp, r0
 800c216:	4561      	cmp	r1, ip
 800c218:	f040 808e 	bne.w	800c338 <_strtod_l+0xab8>
 800c21c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800c220:	ec49 8b10 	vmov	d0, r8, r9
 800c224:	ec43 2b1c 	vmov	d12, r2, r3
 800c228:	910a      	str	r1, [sp, #40]	; 0x28
 800c22a:	f001 fe71 	bl	800df10 <__ulp>
 800c22e:	ec49 8b1e 	vmov	d14, r8, r9
 800c232:	4868      	ldr	r0, [pc, #416]	; (800c3d4 <_strtod_l+0xb54>)
 800c234:	eeac eb00 	vfma.f64	d14, d12, d0
 800c238:	ee1e 3a90 	vmov	r3, s29
 800c23c:	4a68      	ldr	r2, [pc, #416]	; (800c3e0 <_strtod_l+0xb60>)
 800c23e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c240:	4018      	ands	r0, r3
 800c242:	4290      	cmp	r0, r2
 800c244:	ec59 8b1e 	vmov	r8, r9, d14
 800c248:	d94e      	bls.n	800c2e8 <_strtod_l+0xa68>
 800c24a:	ee18 3a90 	vmov	r3, s17
 800c24e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c252:	4293      	cmp	r3, r2
 800c254:	d104      	bne.n	800c260 <_strtod_l+0x9e0>
 800c256:	ee18 3a10 	vmov	r3, s16
 800c25a:	3301      	adds	r3, #1
 800c25c:	f43f ad4c 	beq.w	800bcf8 <_strtod_l+0x478>
 800c260:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800c3d8 <_strtod_l+0xb58>
 800c264:	f04f 38ff 	mov.w	r8, #4294967295
 800c268:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c26a:	4620      	mov	r0, r4
 800c26c:	f001 fb1e 	bl	800d8ac <_Bfree>
 800c270:	4639      	mov	r1, r7
 800c272:	4620      	mov	r0, r4
 800c274:	f001 fb1a 	bl	800d8ac <_Bfree>
 800c278:	4631      	mov	r1, r6
 800c27a:	4620      	mov	r0, r4
 800c27c:	f001 fb16 	bl	800d8ac <_Bfree>
 800c280:	4629      	mov	r1, r5
 800c282:	4620      	mov	r0, r4
 800c284:	f001 fb12 	bl	800d8ac <_Bfree>
 800c288:	e619      	b.n	800bebe <_strtod_l+0x63e>
 800c28a:	f1b8 0f00 	cmp.w	r8, #0
 800c28e:	d112      	bne.n	800c2b6 <_strtod_l+0xa36>
 800c290:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c294:	b9b3      	cbnz	r3, 800c2c4 <_strtod_l+0xa44>
 800c296:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c29a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c2a6:	bf58      	it	pl
 800c2a8:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800c2ac:	eeb1 7b4d 	vneg.f64	d7, d13
 800c2b0:	ec53 2b17 	vmov	r2, r3, d7
 800c2b4:	e7aa      	b.n	800c20c <_strtod_l+0x98c>
 800c2b6:	f1b8 0f01 	cmp.w	r8, #1
 800c2ba:	d103      	bne.n	800c2c4 <_strtod_l+0xa44>
 800c2bc:	f1b9 0f00 	cmp.w	r9, #0
 800c2c0:	f43f ad8a 	beq.w	800bdd8 <_strtod_l+0x558>
 800c2c4:	4b47      	ldr	r3, [pc, #284]	; (800c3e4 <_strtod_l+0xb64>)
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	e79e      	b.n	800c208 <_strtod_l+0x988>
 800c2ca:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c2ce:	ee20 db0d 	vmul.f64	d13, d0, d13
 800c2d2:	f1ba 0f00 	cmp.w	sl, #0
 800c2d6:	d104      	bne.n	800c2e2 <_strtod_l+0xa62>
 800c2d8:	eeb1 7b4d 	vneg.f64	d7, d13
 800c2dc:	ec53 2b17 	vmov	r2, r3, d7
 800c2e0:	e794      	b.n	800c20c <_strtod_l+0x98c>
 800c2e2:	eeb0 7b4d 	vmov.f64	d7, d13
 800c2e6:	e7f9      	b.n	800c2dc <_strtod_l+0xa5c>
 800c2e8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c2ec:	9b04      	ldr	r3, [sp, #16]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1ba      	bne.n	800c268 <_strtod_l+0x9e8>
 800c2f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c2f6:	0d1b      	lsrs	r3, r3, #20
 800c2f8:	051b      	lsls	r3, r3, #20
 800c2fa:	4299      	cmp	r1, r3
 800c2fc:	d1b4      	bne.n	800c268 <_strtod_l+0x9e8>
 800c2fe:	ec51 0b1d 	vmov	r0, r1, d13
 800c302:	f7f4 fa29 	bl	8000758 <__aeabi_d2lz>
 800c306:	f7f4 f9e1 	bl	80006cc <__aeabi_l2d>
 800c30a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c30e:	ec41 0b17 	vmov	d7, r0, r1
 800c312:	ea43 0308 	orr.w	r3, r3, r8
 800c316:	ea53 030a 	orrs.w	r3, r3, sl
 800c31a:	ee3d db47 	vsub.f64	d13, d13, d7
 800c31e:	d03c      	beq.n	800c39a <_strtod_l+0xb1a>
 800c320:	eeb4 dbca 	vcmpe.f64	d13, d10
 800c324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c328:	f53f acf0 	bmi.w	800bd0c <_strtod_l+0x48c>
 800c32c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800c330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c334:	dd98      	ble.n	800c268 <_strtod_l+0x9e8>
 800c336:	e4e9      	b.n	800bd0c <_strtod_l+0x48c>
 800c338:	9804      	ldr	r0, [sp, #16]
 800c33a:	b1f0      	cbz	r0, 800c37a <_strtod_l+0xafa>
 800c33c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800c340:	d81b      	bhi.n	800c37a <_strtod_l+0xafa>
 800c342:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800c3c8 <_strtod_l+0xb48>
 800c346:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800c34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c34e:	d811      	bhi.n	800c374 <_strtod_l+0xaf4>
 800c350:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800c354:	ee1d 3a10 	vmov	r3, s26
 800c358:	2b01      	cmp	r3, #1
 800c35a:	bf38      	it	cc
 800c35c:	2301      	movcc	r3, #1
 800c35e:	ee0d 3a10 	vmov	s26, r3
 800c362:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800c366:	f1ba 0f00 	cmp.w	sl, #0
 800c36a:	d113      	bne.n	800c394 <_strtod_l+0xb14>
 800c36c:	eeb1 7b4d 	vneg.f64	d7, d13
 800c370:	ec53 2b17 	vmov	r2, r3, d7
 800c374:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800c378:	1a43      	subs	r3, r0, r1
 800c37a:	eeb0 0b48 	vmov.f64	d0, d8
 800c37e:	ec43 2b1c 	vmov	d12, r2, r3
 800c382:	910a      	str	r1, [sp, #40]	; 0x28
 800c384:	f001 fdc4 	bl	800df10 <__ulp>
 800c388:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c38a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800c38e:	ec59 8b18 	vmov	r8, r9, d8
 800c392:	e7ab      	b.n	800c2ec <_strtod_l+0xa6c>
 800c394:	eeb0 7b4d 	vmov.f64	d7, d13
 800c398:	e7ea      	b.n	800c370 <_strtod_l+0xaf0>
 800c39a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800c39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3a2:	f57f af61 	bpl.w	800c268 <_strtod_l+0x9e8>
 800c3a6:	e4b1      	b.n	800bd0c <_strtod_l+0x48c>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	9308      	str	r3, [sp, #32]
 800c3ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c3b0:	6013      	str	r3, [r2, #0]
 800c3b2:	f7ff baad 	b.w	800b910 <_strtod_l+0x90>
 800c3b6:	2a65      	cmp	r2, #101	; 0x65
 800c3b8:	f43f ab9f 	beq.w	800bafa <_strtod_l+0x27a>
 800c3bc:	2a45      	cmp	r2, #69	; 0x45
 800c3be:	f43f ab9c 	beq.w	800bafa <_strtod_l+0x27a>
 800c3c2:	2101      	movs	r1, #1
 800c3c4:	f7ff bbd4 	b.w	800bb70 <_strtod_l+0x2f0>
 800c3c8:	ffc00000 	.word	0xffc00000
 800c3cc:	41dfffff 	.word	0x41dfffff
 800c3d0:	000fffff 	.word	0x000fffff
 800c3d4:	7ff00000 	.word	0x7ff00000
 800c3d8:	7fefffff 	.word	0x7fefffff
 800c3dc:	3ff00000 	.word	0x3ff00000
 800c3e0:	7c9fffff 	.word	0x7c9fffff
 800c3e4:	bff00000 	.word	0xbff00000
 800c3e8:	7fe00000 	.word	0x7fe00000

0800c3ec <_strtod_r>:
 800c3ec:	4b01      	ldr	r3, [pc, #4]	; (800c3f4 <_strtod_r+0x8>)
 800c3ee:	f7ff ba47 	b.w	800b880 <_strtod_l>
 800c3f2:	bf00      	nop
 800c3f4:	24000078 	.word	0x24000078

0800c3f8 <_strtol_l.constprop.0>:
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3fe:	d001      	beq.n	800c404 <_strtol_l.constprop.0+0xc>
 800c400:	2b24      	cmp	r3, #36	; 0x24
 800c402:	d906      	bls.n	800c412 <_strtol_l.constprop.0+0x1a>
 800c404:	f7fe fb80 	bl	800ab08 <__errno>
 800c408:	2316      	movs	r3, #22
 800c40a:	6003      	str	r3, [r0, #0]
 800c40c:	2000      	movs	r0, #0
 800c40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c412:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c4f8 <_strtol_l.constprop.0+0x100>
 800c416:	460d      	mov	r5, r1
 800c418:	462e      	mov	r6, r5
 800c41a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c41e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c422:	f017 0708 	ands.w	r7, r7, #8
 800c426:	d1f7      	bne.n	800c418 <_strtol_l.constprop.0+0x20>
 800c428:	2c2d      	cmp	r4, #45	; 0x2d
 800c42a:	d132      	bne.n	800c492 <_strtol_l.constprop.0+0x9a>
 800c42c:	782c      	ldrb	r4, [r5, #0]
 800c42e:	2701      	movs	r7, #1
 800c430:	1cb5      	adds	r5, r6, #2
 800c432:	2b00      	cmp	r3, #0
 800c434:	d05b      	beq.n	800c4ee <_strtol_l.constprop.0+0xf6>
 800c436:	2b10      	cmp	r3, #16
 800c438:	d109      	bne.n	800c44e <_strtol_l.constprop.0+0x56>
 800c43a:	2c30      	cmp	r4, #48	; 0x30
 800c43c:	d107      	bne.n	800c44e <_strtol_l.constprop.0+0x56>
 800c43e:	782c      	ldrb	r4, [r5, #0]
 800c440:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c444:	2c58      	cmp	r4, #88	; 0x58
 800c446:	d14d      	bne.n	800c4e4 <_strtol_l.constprop.0+0xec>
 800c448:	786c      	ldrb	r4, [r5, #1]
 800c44a:	2310      	movs	r3, #16
 800c44c:	3502      	adds	r5, #2
 800c44e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c452:	f108 38ff 	add.w	r8, r8, #4294967295
 800c456:	f04f 0c00 	mov.w	ip, #0
 800c45a:	fbb8 f9f3 	udiv	r9, r8, r3
 800c45e:	4666      	mov	r6, ip
 800c460:	fb03 8a19 	mls	sl, r3, r9, r8
 800c464:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c468:	f1be 0f09 	cmp.w	lr, #9
 800c46c:	d816      	bhi.n	800c49c <_strtol_l.constprop.0+0xa4>
 800c46e:	4674      	mov	r4, lr
 800c470:	42a3      	cmp	r3, r4
 800c472:	dd24      	ble.n	800c4be <_strtol_l.constprop.0+0xc6>
 800c474:	f1bc 0f00 	cmp.w	ip, #0
 800c478:	db1e      	blt.n	800c4b8 <_strtol_l.constprop.0+0xc0>
 800c47a:	45b1      	cmp	r9, r6
 800c47c:	d31c      	bcc.n	800c4b8 <_strtol_l.constprop.0+0xc0>
 800c47e:	d101      	bne.n	800c484 <_strtol_l.constprop.0+0x8c>
 800c480:	45a2      	cmp	sl, r4
 800c482:	db19      	blt.n	800c4b8 <_strtol_l.constprop.0+0xc0>
 800c484:	fb06 4603 	mla	r6, r6, r3, r4
 800c488:	f04f 0c01 	mov.w	ip, #1
 800c48c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c490:	e7e8      	b.n	800c464 <_strtol_l.constprop.0+0x6c>
 800c492:	2c2b      	cmp	r4, #43	; 0x2b
 800c494:	bf04      	itt	eq
 800c496:	782c      	ldrbeq	r4, [r5, #0]
 800c498:	1cb5      	addeq	r5, r6, #2
 800c49a:	e7ca      	b.n	800c432 <_strtol_l.constprop.0+0x3a>
 800c49c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c4a0:	f1be 0f19 	cmp.w	lr, #25
 800c4a4:	d801      	bhi.n	800c4aa <_strtol_l.constprop.0+0xb2>
 800c4a6:	3c37      	subs	r4, #55	; 0x37
 800c4a8:	e7e2      	b.n	800c470 <_strtol_l.constprop.0+0x78>
 800c4aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c4ae:	f1be 0f19 	cmp.w	lr, #25
 800c4b2:	d804      	bhi.n	800c4be <_strtol_l.constprop.0+0xc6>
 800c4b4:	3c57      	subs	r4, #87	; 0x57
 800c4b6:	e7db      	b.n	800c470 <_strtol_l.constprop.0+0x78>
 800c4b8:	f04f 3cff 	mov.w	ip, #4294967295
 800c4bc:	e7e6      	b.n	800c48c <_strtol_l.constprop.0+0x94>
 800c4be:	f1bc 0f00 	cmp.w	ip, #0
 800c4c2:	da05      	bge.n	800c4d0 <_strtol_l.constprop.0+0xd8>
 800c4c4:	2322      	movs	r3, #34	; 0x22
 800c4c6:	6003      	str	r3, [r0, #0]
 800c4c8:	4646      	mov	r6, r8
 800c4ca:	b942      	cbnz	r2, 800c4de <_strtol_l.constprop.0+0xe6>
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	e79e      	b.n	800c40e <_strtol_l.constprop.0+0x16>
 800c4d0:	b107      	cbz	r7, 800c4d4 <_strtol_l.constprop.0+0xdc>
 800c4d2:	4276      	negs	r6, r6
 800c4d4:	2a00      	cmp	r2, #0
 800c4d6:	d0f9      	beq.n	800c4cc <_strtol_l.constprop.0+0xd4>
 800c4d8:	f1bc 0f00 	cmp.w	ip, #0
 800c4dc:	d000      	beq.n	800c4e0 <_strtol_l.constprop.0+0xe8>
 800c4de:	1e69      	subs	r1, r5, #1
 800c4e0:	6011      	str	r1, [r2, #0]
 800c4e2:	e7f3      	b.n	800c4cc <_strtol_l.constprop.0+0xd4>
 800c4e4:	2430      	movs	r4, #48	; 0x30
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d1b1      	bne.n	800c44e <_strtol_l.constprop.0+0x56>
 800c4ea:	2308      	movs	r3, #8
 800c4ec:	e7af      	b.n	800c44e <_strtol_l.constprop.0+0x56>
 800c4ee:	2c30      	cmp	r4, #48	; 0x30
 800c4f0:	d0a5      	beq.n	800c43e <_strtol_l.constprop.0+0x46>
 800c4f2:	230a      	movs	r3, #10
 800c4f4:	e7ab      	b.n	800c44e <_strtol_l.constprop.0+0x56>
 800c4f6:	bf00      	nop
 800c4f8:	0800f721 	.word	0x0800f721

0800c4fc <_strtol_r>:
 800c4fc:	f7ff bf7c 	b.w	800c3f8 <_strtol_l.constprop.0>

0800c500 <quorem>:
 800c500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c504:	6903      	ldr	r3, [r0, #16]
 800c506:	690c      	ldr	r4, [r1, #16]
 800c508:	42a3      	cmp	r3, r4
 800c50a:	4607      	mov	r7, r0
 800c50c:	f2c0 8081 	blt.w	800c612 <quorem+0x112>
 800c510:	3c01      	subs	r4, #1
 800c512:	f101 0814 	add.w	r8, r1, #20
 800c516:	f100 0514 	add.w	r5, r0, #20
 800c51a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c51e:	9301      	str	r3, [sp, #4]
 800c520:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c524:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c528:	3301      	adds	r3, #1
 800c52a:	429a      	cmp	r2, r3
 800c52c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c530:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c534:	fbb2 f6f3 	udiv	r6, r2, r3
 800c538:	d331      	bcc.n	800c59e <quorem+0x9e>
 800c53a:	f04f 0e00 	mov.w	lr, #0
 800c53e:	4640      	mov	r0, r8
 800c540:	46ac      	mov	ip, r5
 800c542:	46f2      	mov	sl, lr
 800c544:	f850 2b04 	ldr.w	r2, [r0], #4
 800c548:	b293      	uxth	r3, r2
 800c54a:	fb06 e303 	mla	r3, r6, r3, lr
 800c54e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c552:	b29b      	uxth	r3, r3
 800c554:	ebaa 0303 	sub.w	r3, sl, r3
 800c558:	f8dc a000 	ldr.w	sl, [ip]
 800c55c:	0c12      	lsrs	r2, r2, #16
 800c55e:	fa13 f38a 	uxtah	r3, r3, sl
 800c562:	fb06 e202 	mla	r2, r6, r2, lr
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	9b00      	ldr	r3, [sp, #0]
 800c56a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c56e:	b292      	uxth	r2, r2
 800c570:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c574:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c578:	f8bd 3000 	ldrh.w	r3, [sp]
 800c57c:	4581      	cmp	r9, r0
 800c57e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c582:	f84c 3b04 	str.w	r3, [ip], #4
 800c586:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c58a:	d2db      	bcs.n	800c544 <quorem+0x44>
 800c58c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c590:	b92b      	cbnz	r3, 800c59e <quorem+0x9e>
 800c592:	9b01      	ldr	r3, [sp, #4]
 800c594:	3b04      	subs	r3, #4
 800c596:	429d      	cmp	r5, r3
 800c598:	461a      	mov	r2, r3
 800c59a:	d32e      	bcc.n	800c5fa <quorem+0xfa>
 800c59c:	613c      	str	r4, [r7, #16]
 800c59e:	4638      	mov	r0, r7
 800c5a0:	f001 fc10 	bl	800ddc4 <__mcmp>
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	db24      	blt.n	800c5f2 <quorem+0xf2>
 800c5a8:	3601      	adds	r6, #1
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	f04f 0c00 	mov.w	ip, #0
 800c5b0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c5b4:	f8d0 e000 	ldr.w	lr, [r0]
 800c5b8:	b293      	uxth	r3, r2
 800c5ba:	ebac 0303 	sub.w	r3, ip, r3
 800c5be:	0c12      	lsrs	r2, r2, #16
 800c5c0:	fa13 f38e 	uxtah	r3, r3, lr
 800c5c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c5c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5d2:	45c1      	cmp	r9, r8
 800c5d4:	f840 3b04 	str.w	r3, [r0], #4
 800c5d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c5dc:	d2e8      	bcs.n	800c5b0 <quorem+0xb0>
 800c5de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5e6:	b922      	cbnz	r2, 800c5f2 <quorem+0xf2>
 800c5e8:	3b04      	subs	r3, #4
 800c5ea:	429d      	cmp	r5, r3
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	d30a      	bcc.n	800c606 <quorem+0x106>
 800c5f0:	613c      	str	r4, [r7, #16]
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	b003      	add	sp, #12
 800c5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5fa:	6812      	ldr	r2, [r2, #0]
 800c5fc:	3b04      	subs	r3, #4
 800c5fe:	2a00      	cmp	r2, #0
 800c600:	d1cc      	bne.n	800c59c <quorem+0x9c>
 800c602:	3c01      	subs	r4, #1
 800c604:	e7c7      	b.n	800c596 <quorem+0x96>
 800c606:	6812      	ldr	r2, [r2, #0]
 800c608:	3b04      	subs	r3, #4
 800c60a:	2a00      	cmp	r2, #0
 800c60c:	d1f0      	bne.n	800c5f0 <quorem+0xf0>
 800c60e:	3c01      	subs	r4, #1
 800c610:	e7eb      	b.n	800c5ea <quorem+0xea>
 800c612:	2000      	movs	r0, #0
 800c614:	e7ee      	b.n	800c5f4 <quorem+0xf4>
	...

0800c618 <_dtoa_r>:
 800c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	ed2d 8b02 	vpush	{d8}
 800c620:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c622:	b091      	sub	sp, #68	; 0x44
 800c624:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c628:	ec59 8b10 	vmov	r8, r9, d0
 800c62c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c62e:	9106      	str	r1, [sp, #24]
 800c630:	4606      	mov	r6, r0
 800c632:	9208      	str	r2, [sp, #32]
 800c634:	930c      	str	r3, [sp, #48]	; 0x30
 800c636:	b975      	cbnz	r5, 800c656 <_dtoa_r+0x3e>
 800c638:	2010      	movs	r0, #16
 800c63a:	f001 f8cf 	bl	800d7dc <malloc>
 800c63e:	4602      	mov	r2, r0
 800c640:	6270      	str	r0, [r6, #36]	; 0x24
 800c642:	b920      	cbnz	r0, 800c64e <_dtoa_r+0x36>
 800c644:	4baa      	ldr	r3, [pc, #680]	; (800c8f0 <_dtoa_r+0x2d8>)
 800c646:	21ea      	movs	r1, #234	; 0xea
 800c648:	48aa      	ldr	r0, [pc, #680]	; (800c8f4 <_dtoa_r+0x2dc>)
 800c64a:	f002 f83b 	bl	800e6c4 <__assert_func>
 800c64e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c652:	6005      	str	r5, [r0, #0]
 800c654:	60c5      	str	r5, [r0, #12]
 800c656:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c658:	6819      	ldr	r1, [r3, #0]
 800c65a:	b151      	cbz	r1, 800c672 <_dtoa_r+0x5a>
 800c65c:	685a      	ldr	r2, [r3, #4]
 800c65e:	604a      	str	r2, [r1, #4]
 800c660:	2301      	movs	r3, #1
 800c662:	4093      	lsls	r3, r2
 800c664:	608b      	str	r3, [r1, #8]
 800c666:	4630      	mov	r0, r6
 800c668:	f001 f920 	bl	800d8ac <_Bfree>
 800c66c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c66e:	2200      	movs	r2, #0
 800c670:	601a      	str	r2, [r3, #0]
 800c672:	f1b9 0300 	subs.w	r3, r9, #0
 800c676:	bfbb      	ittet	lt
 800c678:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c67c:	9303      	strlt	r3, [sp, #12]
 800c67e:	2300      	movge	r3, #0
 800c680:	2201      	movlt	r2, #1
 800c682:	bfac      	ite	ge
 800c684:	6023      	strge	r3, [r4, #0]
 800c686:	6022      	strlt	r2, [r4, #0]
 800c688:	4b9b      	ldr	r3, [pc, #620]	; (800c8f8 <_dtoa_r+0x2e0>)
 800c68a:	9c03      	ldr	r4, [sp, #12]
 800c68c:	43a3      	bics	r3, r4
 800c68e:	d11c      	bne.n	800c6ca <_dtoa_r+0xb2>
 800c690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c692:	f242 730f 	movw	r3, #9999	; 0x270f
 800c696:	6013      	str	r3, [r2, #0]
 800c698:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c69c:	ea53 0308 	orrs.w	r3, r3, r8
 800c6a0:	f000 84fd 	beq.w	800d09e <_dtoa_r+0xa86>
 800c6a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c6a6:	b963      	cbnz	r3, 800c6c2 <_dtoa_r+0xaa>
 800c6a8:	4b94      	ldr	r3, [pc, #592]	; (800c8fc <_dtoa_r+0x2e4>)
 800c6aa:	e01f      	b.n	800c6ec <_dtoa_r+0xd4>
 800c6ac:	4b94      	ldr	r3, [pc, #592]	; (800c900 <_dtoa_r+0x2e8>)
 800c6ae:	9301      	str	r3, [sp, #4]
 800c6b0:	3308      	adds	r3, #8
 800c6b2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c6b4:	6013      	str	r3, [r2, #0]
 800c6b6:	9801      	ldr	r0, [sp, #4]
 800c6b8:	b011      	add	sp, #68	; 0x44
 800c6ba:	ecbd 8b02 	vpop	{d8}
 800c6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c2:	4b8e      	ldr	r3, [pc, #568]	; (800c8fc <_dtoa_r+0x2e4>)
 800c6c4:	9301      	str	r3, [sp, #4]
 800c6c6:	3303      	adds	r3, #3
 800c6c8:	e7f3      	b.n	800c6b2 <_dtoa_r+0x9a>
 800c6ca:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c6ce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6d6:	d10b      	bne.n	800c6f0 <_dtoa_r+0xd8>
 800c6d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6da:	2301      	movs	r3, #1
 800c6dc:	6013      	str	r3, [r2, #0]
 800c6de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f000 84d9 	beq.w	800d098 <_dtoa_r+0xa80>
 800c6e6:	4887      	ldr	r0, [pc, #540]	; (800c904 <_dtoa_r+0x2ec>)
 800c6e8:	6018      	str	r0, [r3, #0]
 800c6ea:	1e43      	subs	r3, r0, #1
 800c6ec:	9301      	str	r3, [sp, #4]
 800c6ee:	e7e2      	b.n	800c6b6 <_dtoa_r+0x9e>
 800c6f0:	a90f      	add	r1, sp, #60	; 0x3c
 800c6f2:	aa0e      	add	r2, sp, #56	; 0x38
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	eeb0 0b48 	vmov.f64	d0, d8
 800c6fa:	f001 fc85 	bl	800e008 <__d2b>
 800c6fe:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800c702:	4605      	mov	r5, r0
 800c704:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c706:	2900      	cmp	r1, #0
 800c708:	d046      	beq.n	800c798 <_dtoa_r+0x180>
 800c70a:	ee18 4a90 	vmov	r4, s17
 800c70e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c712:	ec53 2b18 	vmov	r2, r3, d8
 800c716:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800c71a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c71e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c722:	2400      	movs	r4, #0
 800c724:	ec43 2b16 	vmov	d6, r2, r3
 800c728:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800c72c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c8d8 <_dtoa_r+0x2c0>
 800c730:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c734:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800c8e0 <_dtoa_r+0x2c8>
 800c738:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c73c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c8e8 <_dtoa_r+0x2d0>
 800c740:	ee07 1a90 	vmov	s15, r1
 800c744:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c748:	eeb0 7b46 	vmov.f64	d7, d6
 800c74c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c750:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c754:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c75c:	ee16 ba90 	vmov	fp, s13
 800c760:	940a      	str	r4, [sp, #40]	; 0x28
 800c762:	d508      	bpl.n	800c776 <_dtoa_r+0x15e>
 800c764:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c768:	eeb4 6b47 	vcmp.f64	d6, d7
 800c76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c770:	bf18      	it	ne
 800c772:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800c776:	f1bb 0f16 	cmp.w	fp, #22
 800c77a:	d82f      	bhi.n	800c7dc <_dtoa_r+0x1c4>
 800c77c:	4b62      	ldr	r3, [pc, #392]	; (800c908 <_dtoa_r+0x2f0>)
 800c77e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c782:	ed93 7b00 	vldr	d7, [r3]
 800c786:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c78e:	d501      	bpl.n	800c794 <_dtoa_r+0x17c>
 800c790:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c794:	2300      	movs	r3, #0
 800c796:	e022      	b.n	800c7de <_dtoa_r+0x1c6>
 800c798:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c79a:	4401      	add	r1, r0
 800c79c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800c7a0:	2b20      	cmp	r3, #32
 800c7a2:	bfc1      	itttt	gt
 800c7a4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c7a8:	fa04 f303 	lslgt.w	r3, r4, r3
 800c7ac:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800c7b0:	fa28 f804 	lsrgt.w	r8, r8, r4
 800c7b4:	bfd6      	itet	le
 800c7b6:	f1c3 0320 	rsble	r3, r3, #32
 800c7ba:	ea43 0808 	orrgt.w	r8, r3, r8
 800c7be:	fa08 f803 	lslle.w	r8, r8, r3
 800c7c2:	ee07 8a90 	vmov	s15, r8
 800c7c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c7ca:	3901      	subs	r1, #1
 800c7cc:	ee17 4a90 	vmov	r4, s15
 800c7d0:	ec53 2b17 	vmov	r2, r3, d7
 800c7d4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800c7d8:	2401      	movs	r4, #1
 800c7da:	e7a3      	b.n	800c724 <_dtoa_r+0x10c>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7e0:	1a43      	subs	r3, r0, r1
 800c7e2:	1e5a      	subs	r2, r3, #1
 800c7e4:	bf45      	ittet	mi
 800c7e6:	f1c3 0301 	rsbmi	r3, r3, #1
 800c7ea:	9304      	strmi	r3, [sp, #16]
 800c7ec:	2300      	movpl	r3, #0
 800c7ee:	2300      	movmi	r3, #0
 800c7f0:	9205      	str	r2, [sp, #20]
 800c7f2:	bf54      	ite	pl
 800c7f4:	9304      	strpl	r3, [sp, #16]
 800c7f6:	9305      	strmi	r3, [sp, #20]
 800c7f8:	f1bb 0f00 	cmp.w	fp, #0
 800c7fc:	db18      	blt.n	800c830 <_dtoa_r+0x218>
 800c7fe:	9b05      	ldr	r3, [sp, #20]
 800c800:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c804:	445b      	add	r3, fp
 800c806:	9305      	str	r3, [sp, #20]
 800c808:	2300      	movs	r3, #0
 800c80a:	9a06      	ldr	r2, [sp, #24]
 800c80c:	2a09      	cmp	r2, #9
 800c80e:	d849      	bhi.n	800c8a4 <_dtoa_r+0x28c>
 800c810:	2a05      	cmp	r2, #5
 800c812:	bfc4      	itt	gt
 800c814:	3a04      	subgt	r2, #4
 800c816:	9206      	strgt	r2, [sp, #24]
 800c818:	9a06      	ldr	r2, [sp, #24]
 800c81a:	f1a2 0202 	sub.w	r2, r2, #2
 800c81e:	bfcc      	ite	gt
 800c820:	2400      	movgt	r4, #0
 800c822:	2401      	movle	r4, #1
 800c824:	2a03      	cmp	r2, #3
 800c826:	d848      	bhi.n	800c8ba <_dtoa_r+0x2a2>
 800c828:	e8df f002 	tbb	[pc, r2]
 800c82c:	3a2c2e0b 	.word	0x3a2c2e0b
 800c830:	9b04      	ldr	r3, [sp, #16]
 800c832:	2200      	movs	r2, #0
 800c834:	eba3 030b 	sub.w	r3, r3, fp
 800c838:	9304      	str	r3, [sp, #16]
 800c83a:	9209      	str	r2, [sp, #36]	; 0x24
 800c83c:	f1cb 0300 	rsb	r3, fp, #0
 800c840:	e7e3      	b.n	800c80a <_dtoa_r+0x1f2>
 800c842:	2200      	movs	r2, #0
 800c844:	9207      	str	r2, [sp, #28]
 800c846:	9a08      	ldr	r2, [sp, #32]
 800c848:	2a00      	cmp	r2, #0
 800c84a:	dc39      	bgt.n	800c8c0 <_dtoa_r+0x2a8>
 800c84c:	f04f 0a01 	mov.w	sl, #1
 800c850:	46d1      	mov	r9, sl
 800c852:	4652      	mov	r2, sl
 800c854:	f8cd a020 	str.w	sl, [sp, #32]
 800c858:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800c85a:	2100      	movs	r1, #0
 800c85c:	6079      	str	r1, [r7, #4]
 800c85e:	2004      	movs	r0, #4
 800c860:	f100 0c14 	add.w	ip, r0, #20
 800c864:	4594      	cmp	ip, r2
 800c866:	6879      	ldr	r1, [r7, #4]
 800c868:	d92f      	bls.n	800c8ca <_dtoa_r+0x2b2>
 800c86a:	4630      	mov	r0, r6
 800c86c:	930d      	str	r3, [sp, #52]	; 0x34
 800c86e:	f000 ffdd 	bl	800d82c <_Balloc>
 800c872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c874:	9001      	str	r0, [sp, #4]
 800c876:	4602      	mov	r2, r0
 800c878:	2800      	cmp	r0, #0
 800c87a:	d149      	bne.n	800c910 <_dtoa_r+0x2f8>
 800c87c:	4b23      	ldr	r3, [pc, #140]	; (800c90c <_dtoa_r+0x2f4>)
 800c87e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c882:	e6e1      	b.n	800c648 <_dtoa_r+0x30>
 800c884:	2201      	movs	r2, #1
 800c886:	e7dd      	b.n	800c844 <_dtoa_r+0x22c>
 800c888:	2200      	movs	r2, #0
 800c88a:	9207      	str	r2, [sp, #28]
 800c88c:	9a08      	ldr	r2, [sp, #32]
 800c88e:	eb0b 0a02 	add.w	sl, fp, r2
 800c892:	f10a 0901 	add.w	r9, sl, #1
 800c896:	464a      	mov	r2, r9
 800c898:	2a01      	cmp	r2, #1
 800c89a:	bfb8      	it	lt
 800c89c:	2201      	movlt	r2, #1
 800c89e:	e7db      	b.n	800c858 <_dtoa_r+0x240>
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	e7f2      	b.n	800c88a <_dtoa_r+0x272>
 800c8a4:	2401      	movs	r4, #1
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800c8ac:	f04f 3aff 	mov.w	sl, #4294967295
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	46d1      	mov	r9, sl
 800c8b4:	2212      	movs	r2, #18
 800c8b6:	9108      	str	r1, [sp, #32]
 800c8b8:	e7ce      	b.n	800c858 <_dtoa_r+0x240>
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	9207      	str	r2, [sp, #28]
 800c8be:	e7f5      	b.n	800c8ac <_dtoa_r+0x294>
 800c8c0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c8c4:	46d1      	mov	r9, sl
 800c8c6:	4652      	mov	r2, sl
 800c8c8:	e7c6      	b.n	800c858 <_dtoa_r+0x240>
 800c8ca:	3101      	adds	r1, #1
 800c8cc:	6079      	str	r1, [r7, #4]
 800c8ce:	0040      	lsls	r0, r0, #1
 800c8d0:	e7c6      	b.n	800c860 <_dtoa_r+0x248>
 800c8d2:	bf00      	nop
 800c8d4:	f3af 8000 	nop.w
 800c8d8:	636f4361 	.word	0x636f4361
 800c8dc:	3fd287a7 	.word	0x3fd287a7
 800c8e0:	8b60c8b3 	.word	0x8b60c8b3
 800c8e4:	3fc68a28 	.word	0x3fc68a28
 800c8e8:	509f79fb 	.word	0x509f79fb
 800c8ec:	3fd34413 	.word	0x3fd34413
 800c8f0:	0800f82e 	.word	0x0800f82e
 800c8f4:	0800f845 	.word	0x0800f845
 800c8f8:	7ff00000 	.word	0x7ff00000
 800c8fc:	0800f82a 	.word	0x0800f82a
 800c900:	0800f821 	.word	0x0800f821
 800c904:	0800f6a1 	.word	0x0800f6a1
 800c908:	0800f9b0 	.word	0x0800f9b0
 800c90c:	0800f8a0 	.word	0x0800f8a0
 800c910:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c912:	9901      	ldr	r1, [sp, #4]
 800c914:	6011      	str	r1, [r2, #0]
 800c916:	f1b9 0f0e 	cmp.w	r9, #14
 800c91a:	d86c      	bhi.n	800c9f6 <_dtoa_r+0x3de>
 800c91c:	2c00      	cmp	r4, #0
 800c91e:	d06a      	beq.n	800c9f6 <_dtoa_r+0x3de>
 800c920:	f1bb 0f00 	cmp.w	fp, #0
 800c924:	f340 80a0 	ble.w	800ca68 <_dtoa_r+0x450>
 800c928:	49c1      	ldr	r1, [pc, #772]	; (800cc30 <_dtoa_r+0x618>)
 800c92a:	f00b 020f 	and.w	r2, fp, #15
 800c92e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c932:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c936:	ed92 7b00 	vldr	d7, [r2]
 800c93a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800c93e:	f000 8087 	beq.w	800ca50 <_dtoa_r+0x438>
 800c942:	4abc      	ldr	r2, [pc, #752]	; (800cc34 <_dtoa_r+0x61c>)
 800c944:	ed92 6b08 	vldr	d6, [r2, #32]
 800c948:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c94c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c950:	f001 010f 	and.w	r1, r1, #15
 800c954:	2203      	movs	r2, #3
 800c956:	48b7      	ldr	r0, [pc, #732]	; (800cc34 <_dtoa_r+0x61c>)
 800c958:	2900      	cmp	r1, #0
 800c95a:	d17b      	bne.n	800ca54 <_dtoa_r+0x43c>
 800c95c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c960:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c964:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c968:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c96a:	2900      	cmp	r1, #0
 800c96c:	f000 80a2 	beq.w	800cab4 <_dtoa_r+0x49c>
 800c970:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c974:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c978:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c980:	f140 8098 	bpl.w	800cab4 <_dtoa_r+0x49c>
 800c984:	f1b9 0f00 	cmp.w	r9, #0
 800c988:	f000 8094 	beq.w	800cab4 <_dtoa_r+0x49c>
 800c98c:	f1ba 0f00 	cmp.w	sl, #0
 800c990:	dd2f      	ble.n	800c9f2 <_dtoa_r+0x3da>
 800c992:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c996:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c99a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c99e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c9a2:	3201      	adds	r2, #1
 800c9a4:	4650      	mov	r0, sl
 800c9a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c9aa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c9ae:	ee07 2a90 	vmov	s15, r2
 800c9b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c9b6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c9ba:	ee15 4a90 	vmov	r4, s11
 800c9be:	ec52 1b15 	vmov	r1, r2, d5
 800c9c2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d177      	bne.n	800caba <_dtoa_r+0x4a2>
 800c9ca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c9ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c9d2:	ec42 1b17 	vmov	d7, r1, r2
 800c9d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9de:	f300 8263 	bgt.w	800cea8 <_dtoa_r+0x890>
 800c9e2:	eeb1 7b47 	vneg.f64	d7, d7
 800c9e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9ee:	f100 8258 	bmi.w	800cea2 <_dtoa_r+0x88a>
 800c9f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c9f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c9f8:	2a00      	cmp	r2, #0
 800c9fa:	f2c0 811d 	blt.w	800cc38 <_dtoa_r+0x620>
 800c9fe:	f1bb 0f0e 	cmp.w	fp, #14
 800ca02:	f300 8119 	bgt.w	800cc38 <_dtoa_r+0x620>
 800ca06:	4b8a      	ldr	r3, [pc, #552]	; (800cc30 <_dtoa_r+0x618>)
 800ca08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ca0c:	ed93 6b00 	vldr	d6, [r3]
 800ca10:	9b08      	ldr	r3, [sp, #32]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	f280 80b7 	bge.w	800cb86 <_dtoa_r+0x56e>
 800ca18:	f1b9 0f00 	cmp.w	r9, #0
 800ca1c:	f300 80b3 	bgt.w	800cb86 <_dtoa_r+0x56e>
 800ca20:	f040 823f 	bne.w	800cea2 <_dtoa_r+0x88a>
 800ca24:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ca28:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ca2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca30:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ca34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca38:	464c      	mov	r4, r9
 800ca3a:	464f      	mov	r7, r9
 800ca3c:	f280 8215 	bge.w	800ce6a <_dtoa_r+0x852>
 800ca40:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ca44:	2331      	movs	r3, #49	; 0x31
 800ca46:	f808 3b01 	strb.w	r3, [r8], #1
 800ca4a:	f10b 0b01 	add.w	fp, fp, #1
 800ca4e:	e211      	b.n	800ce74 <_dtoa_r+0x85c>
 800ca50:	2202      	movs	r2, #2
 800ca52:	e780      	b.n	800c956 <_dtoa_r+0x33e>
 800ca54:	07cc      	lsls	r4, r1, #31
 800ca56:	d504      	bpl.n	800ca62 <_dtoa_r+0x44a>
 800ca58:	ed90 6b00 	vldr	d6, [r0]
 800ca5c:	3201      	adds	r2, #1
 800ca5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca62:	1049      	asrs	r1, r1, #1
 800ca64:	3008      	adds	r0, #8
 800ca66:	e777      	b.n	800c958 <_dtoa_r+0x340>
 800ca68:	d022      	beq.n	800cab0 <_dtoa_r+0x498>
 800ca6a:	f1cb 0100 	rsb	r1, fp, #0
 800ca6e:	4a70      	ldr	r2, [pc, #448]	; (800cc30 <_dtoa_r+0x618>)
 800ca70:	f001 000f 	and.w	r0, r1, #15
 800ca74:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ca78:	ed92 7b00 	vldr	d7, [r2]
 800ca7c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ca80:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ca84:	486b      	ldr	r0, [pc, #428]	; (800cc34 <_dtoa_r+0x61c>)
 800ca86:	1109      	asrs	r1, r1, #4
 800ca88:	2400      	movs	r4, #0
 800ca8a:	2202      	movs	r2, #2
 800ca8c:	b929      	cbnz	r1, 800ca9a <_dtoa_r+0x482>
 800ca8e:	2c00      	cmp	r4, #0
 800ca90:	f43f af6a 	beq.w	800c968 <_dtoa_r+0x350>
 800ca94:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ca98:	e766      	b.n	800c968 <_dtoa_r+0x350>
 800ca9a:	07cf      	lsls	r7, r1, #31
 800ca9c:	d505      	bpl.n	800caaa <_dtoa_r+0x492>
 800ca9e:	ed90 6b00 	vldr	d6, [r0]
 800caa2:	3201      	adds	r2, #1
 800caa4:	2401      	movs	r4, #1
 800caa6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800caaa:	1049      	asrs	r1, r1, #1
 800caac:	3008      	adds	r0, #8
 800caae:	e7ed      	b.n	800ca8c <_dtoa_r+0x474>
 800cab0:	2202      	movs	r2, #2
 800cab2:	e759      	b.n	800c968 <_dtoa_r+0x350>
 800cab4:	465f      	mov	r7, fp
 800cab6:	4648      	mov	r0, r9
 800cab8:	e775      	b.n	800c9a6 <_dtoa_r+0x38e>
 800caba:	ec42 1b17 	vmov	d7, r1, r2
 800cabe:	4a5c      	ldr	r2, [pc, #368]	; (800cc30 <_dtoa_r+0x618>)
 800cac0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cac4:	ed12 4b02 	vldr	d4, [r2, #-8]
 800cac8:	9a01      	ldr	r2, [sp, #4]
 800caca:	1814      	adds	r4, r2, r0
 800cacc:	9a07      	ldr	r2, [sp, #28]
 800cace:	b352      	cbz	r2, 800cb26 <_dtoa_r+0x50e>
 800cad0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800cad4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800cad8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cadc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800cae0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800cae4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cae8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800caec:	ee14 2a90 	vmov	r2, s9
 800caf0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800caf4:	3230      	adds	r2, #48	; 0x30
 800caf6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cafa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb02:	f808 2b01 	strb.w	r2, [r8], #1
 800cb06:	d439      	bmi.n	800cb7c <_dtoa_r+0x564>
 800cb08:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cb0c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb14:	d472      	bmi.n	800cbfc <_dtoa_r+0x5e4>
 800cb16:	45a0      	cmp	r8, r4
 800cb18:	f43f af6b 	beq.w	800c9f2 <_dtoa_r+0x3da>
 800cb1c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cb20:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cb24:	e7e0      	b.n	800cae8 <_dtoa_r+0x4d0>
 800cb26:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cb2a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cb2e:	4621      	mov	r1, r4
 800cb30:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800cb34:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cb38:	ee14 2a90 	vmov	r2, s9
 800cb3c:	3230      	adds	r2, #48	; 0x30
 800cb3e:	f808 2b01 	strb.w	r2, [r8], #1
 800cb42:	45a0      	cmp	r8, r4
 800cb44:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cb48:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cb4c:	d118      	bne.n	800cb80 <_dtoa_r+0x568>
 800cb4e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cb52:	ee37 4b05 	vadd.f64	d4, d7, d5
 800cb56:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800cb5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb5e:	dc4d      	bgt.n	800cbfc <_dtoa_r+0x5e4>
 800cb60:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cb64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cb68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb6c:	f57f af41 	bpl.w	800c9f2 <_dtoa_r+0x3da>
 800cb70:	4688      	mov	r8, r1
 800cb72:	3901      	subs	r1, #1
 800cb74:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800cb78:	2b30      	cmp	r3, #48	; 0x30
 800cb7a:	d0f9      	beq.n	800cb70 <_dtoa_r+0x558>
 800cb7c:	46bb      	mov	fp, r7
 800cb7e:	e02a      	b.n	800cbd6 <_dtoa_r+0x5be>
 800cb80:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cb84:	e7d6      	b.n	800cb34 <_dtoa_r+0x51c>
 800cb86:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb8a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800cb8e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cb92:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cb96:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cb9a:	ee15 3a10 	vmov	r3, s10
 800cb9e:	3330      	adds	r3, #48	; 0x30
 800cba0:	f808 3b01 	strb.w	r3, [r8], #1
 800cba4:	9b01      	ldr	r3, [sp, #4]
 800cba6:	eba8 0303 	sub.w	r3, r8, r3
 800cbaa:	4599      	cmp	r9, r3
 800cbac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cbb0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cbb4:	d133      	bne.n	800cc1e <_dtoa_r+0x606>
 800cbb6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cbba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cbbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbc2:	dc1a      	bgt.n	800cbfa <_dtoa_r+0x5e2>
 800cbc4:	eeb4 7b46 	vcmp.f64	d7, d6
 800cbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbcc:	d103      	bne.n	800cbd6 <_dtoa_r+0x5be>
 800cbce:	ee15 3a10 	vmov	r3, s10
 800cbd2:	07d9      	lsls	r1, r3, #31
 800cbd4:	d411      	bmi.n	800cbfa <_dtoa_r+0x5e2>
 800cbd6:	4629      	mov	r1, r5
 800cbd8:	4630      	mov	r0, r6
 800cbda:	f000 fe67 	bl	800d8ac <_Bfree>
 800cbde:	2300      	movs	r3, #0
 800cbe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbe2:	f888 3000 	strb.w	r3, [r8]
 800cbe6:	f10b 0301 	add.w	r3, fp, #1
 800cbea:	6013      	str	r3, [r2, #0]
 800cbec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f43f ad61 	beq.w	800c6b6 <_dtoa_r+0x9e>
 800cbf4:	f8c3 8000 	str.w	r8, [r3]
 800cbf8:	e55d      	b.n	800c6b6 <_dtoa_r+0x9e>
 800cbfa:	465f      	mov	r7, fp
 800cbfc:	4643      	mov	r3, r8
 800cbfe:	4698      	mov	r8, r3
 800cc00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc04:	2a39      	cmp	r2, #57	; 0x39
 800cc06:	d106      	bne.n	800cc16 <_dtoa_r+0x5fe>
 800cc08:	9a01      	ldr	r2, [sp, #4]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d1f7      	bne.n	800cbfe <_dtoa_r+0x5e6>
 800cc0e:	9901      	ldr	r1, [sp, #4]
 800cc10:	2230      	movs	r2, #48	; 0x30
 800cc12:	3701      	adds	r7, #1
 800cc14:	700a      	strb	r2, [r1, #0]
 800cc16:	781a      	ldrb	r2, [r3, #0]
 800cc18:	3201      	adds	r2, #1
 800cc1a:	701a      	strb	r2, [r3, #0]
 800cc1c:	e7ae      	b.n	800cb7c <_dtoa_r+0x564>
 800cc1e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cc22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc2a:	d1b2      	bne.n	800cb92 <_dtoa_r+0x57a>
 800cc2c:	e7d3      	b.n	800cbd6 <_dtoa_r+0x5be>
 800cc2e:	bf00      	nop
 800cc30:	0800f9b0 	.word	0x0800f9b0
 800cc34:	0800f988 	.word	0x0800f988
 800cc38:	9907      	ldr	r1, [sp, #28]
 800cc3a:	2900      	cmp	r1, #0
 800cc3c:	f000 80d0 	beq.w	800cde0 <_dtoa_r+0x7c8>
 800cc40:	9906      	ldr	r1, [sp, #24]
 800cc42:	2901      	cmp	r1, #1
 800cc44:	f300 80b4 	bgt.w	800cdb0 <_dtoa_r+0x798>
 800cc48:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cc4a:	2900      	cmp	r1, #0
 800cc4c:	f000 80ac 	beq.w	800cda8 <_dtoa_r+0x790>
 800cc50:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cc54:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cc58:	461c      	mov	r4, r3
 800cc5a:	930a      	str	r3, [sp, #40]	; 0x28
 800cc5c:	9b04      	ldr	r3, [sp, #16]
 800cc5e:	4413      	add	r3, r2
 800cc60:	9304      	str	r3, [sp, #16]
 800cc62:	9b05      	ldr	r3, [sp, #20]
 800cc64:	2101      	movs	r1, #1
 800cc66:	4413      	add	r3, r2
 800cc68:	4630      	mov	r0, r6
 800cc6a:	9305      	str	r3, [sp, #20]
 800cc6c:	f000 ff20 	bl	800dab0 <__i2b>
 800cc70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc72:	4607      	mov	r7, r0
 800cc74:	f1b8 0f00 	cmp.w	r8, #0
 800cc78:	dd0d      	ble.n	800cc96 <_dtoa_r+0x67e>
 800cc7a:	9a05      	ldr	r2, [sp, #20]
 800cc7c:	2a00      	cmp	r2, #0
 800cc7e:	dd0a      	ble.n	800cc96 <_dtoa_r+0x67e>
 800cc80:	4542      	cmp	r2, r8
 800cc82:	9904      	ldr	r1, [sp, #16]
 800cc84:	bfa8      	it	ge
 800cc86:	4642      	movge	r2, r8
 800cc88:	1a89      	subs	r1, r1, r2
 800cc8a:	9104      	str	r1, [sp, #16]
 800cc8c:	9905      	ldr	r1, [sp, #20]
 800cc8e:	eba8 0802 	sub.w	r8, r8, r2
 800cc92:	1a8a      	subs	r2, r1, r2
 800cc94:	9205      	str	r2, [sp, #20]
 800cc96:	b303      	cbz	r3, 800ccda <_dtoa_r+0x6c2>
 800cc98:	9a07      	ldr	r2, [sp, #28]
 800cc9a:	2a00      	cmp	r2, #0
 800cc9c:	f000 80a5 	beq.w	800cdea <_dtoa_r+0x7d2>
 800cca0:	2c00      	cmp	r4, #0
 800cca2:	dd13      	ble.n	800cccc <_dtoa_r+0x6b4>
 800cca4:	4639      	mov	r1, r7
 800cca6:	4622      	mov	r2, r4
 800cca8:	4630      	mov	r0, r6
 800ccaa:	930d      	str	r3, [sp, #52]	; 0x34
 800ccac:	f000 ffc0 	bl	800dc30 <__pow5mult>
 800ccb0:	462a      	mov	r2, r5
 800ccb2:	4601      	mov	r1, r0
 800ccb4:	4607      	mov	r7, r0
 800ccb6:	4630      	mov	r0, r6
 800ccb8:	f000 ff10 	bl	800dadc <__multiply>
 800ccbc:	4629      	mov	r1, r5
 800ccbe:	900a      	str	r0, [sp, #40]	; 0x28
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	f000 fdf3 	bl	800d8ac <_Bfree>
 800ccc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccca:	4615      	mov	r5, r2
 800cccc:	1b1a      	subs	r2, r3, r4
 800ccce:	d004      	beq.n	800ccda <_dtoa_r+0x6c2>
 800ccd0:	4629      	mov	r1, r5
 800ccd2:	4630      	mov	r0, r6
 800ccd4:	f000 ffac 	bl	800dc30 <__pow5mult>
 800ccd8:	4605      	mov	r5, r0
 800ccda:	2101      	movs	r1, #1
 800ccdc:	4630      	mov	r0, r6
 800ccde:	f000 fee7 	bl	800dab0 <__i2b>
 800cce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	4604      	mov	r4, r0
 800cce8:	f340 8081 	ble.w	800cdee <_dtoa_r+0x7d6>
 800ccec:	461a      	mov	r2, r3
 800ccee:	4601      	mov	r1, r0
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	f000 ff9d 	bl	800dc30 <__pow5mult>
 800ccf6:	9b06      	ldr	r3, [sp, #24]
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	4604      	mov	r4, r0
 800ccfc:	dd7a      	ble.n	800cdf4 <_dtoa_r+0x7dc>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	930a      	str	r3, [sp, #40]	; 0x28
 800cd02:	6922      	ldr	r2, [r4, #16]
 800cd04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cd08:	6910      	ldr	r0, [r2, #16]
 800cd0a:	f000 fe81 	bl	800da10 <__hi0bits>
 800cd0e:	f1c0 0020 	rsb	r0, r0, #32
 800cd12:	9b05      	ldr	r3, [sp, #20]
 800cd14:	4418      	add	r0, r3
 800cd16:	f010 001f 	ands.w	r0, r0, #31
 800cd1a:	f000 808c 	beq.w	800ce36 <_dtoa_r+0x81e>
 800cd1e:	f1c0 0220 	rsb	r2, r0, #32
 800cd22:	2a04      	cmp	r2, #4
 800cd24:	f340 8085 	ble.w	800ce32 <_dtoa_r+0x81a>
 800cd28:	f1c0 001c 	rsb	r0, r0, #28
 800cd2c:	9b04      	ldr	r3, [sp, #16]
 800cd2e:	4403      	add	r3, r0
 800cd30:	9304      	str	r3, [sp, #16]
 800cd32:	9b05      	ldr	r3, [sp, #20]
 800cd34:	4403      	add	r3, r0
 800cd36:	4480      	add	r8, r0
 800cd38:	9305      	str	r3, [sp, #20]
 800cd3a:	9b04      	ldr	r3, [sp, #16]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	dd05      	ble.n	800cd4c <_dtoa_r+0x734>
 800cd40:	4629      	mov	r1, r5
 800cd42:	461a      	mov	r2, r3
 800cd44:	4630      	mov	r0, r6
 800cd46:	f000 ffcd 	bl	800dce4 <__lshift>
 800cd4a:	4605      	mov	r5, r0
 800cd4c:	9b05      	ldr	r3, [sp, #20]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	dd05      	ble.n	800cd5e <_dtoa_r+0x746>
 800cd52:	4621      	mov	r1, r4
 800cd54:	461a      	mov	r2, r3
 800cd56:	4630      	mov	r0, r6
 800cd58:	f000 ffc4 	bl	800dce4 <__lshift>
 800cd5c:	4604      	mov	r4, r0
 800cd5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d06a      	beq.n	800ce3a <_dtoa_r+0x822>
 800cd64:	4621      	mov	r1, r4
 800cd66:	4628      	mov	r0, r5
 800cd68:	f001 f82c 	bl	800ddc4 <__mcmp>
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	da64      	bge.n	800ce3a <_dtoa_r+0x822>
 800cd70:	2300      	movs	r3, #0
 800cd72:	4629      	mov	r1, r5
 800cd74:	220a      	movs	r2, #10
 800cd76:	4630      	mov	r0, r6
 800cd78:	f000 fdba 	bl	800d8f0 <__multadd>
 800cd7c:	9b07      	ldr	r3, [sp, #28]
 800cd7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cd82:	4605      	mov	r5, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f000 8191 	beq.w	800d0ac <_dtoa_r+0xa94>
 800cd8a:	4639      	mov	r1, r7
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	220a      	movs	r2, #10
 800cd90:	4630      	mov	r0, r6
 800cd92:	f000 fdad 	bl	800d8f0 <__multadd>
 800cd96:	f1ba 0f00 	cmp.w	sl, #0
 800cd9a:	4607      	mov	r7, r0
 800cd9c:	f300 808d 	bgt.w	800ceba <_dtoa_r+0x8a2>
 800cda0:	9b06      	ldr	r3, [sp, #24]
 800cda2:	2b02      	cmp	r3, #2
 800cda4:	dc50      	bgt.n	800ce48 <_dtoa_r+0x830>
 800cda6:	e088      	b.n	800ceba <_dtoa_r+0x8a2>
 800cda8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdaa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cdae:	e751      	b.n	800cc54 <_dtoa_r+0x63c>
 800cdb0:	f109 34ff 	add.w	r4, r9, #4294967295
 800cdb4:	42a3      	cmp	r3, r4
 800cdb6:	bfbf      	itttt	lt
 800cdb8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800cdba:	1ae3      	sublt	r3, r4, r3
 800cdbc:	18d2      	addlt	r2, r2, r3
 800cdbe:	9209      	strlt	r2, [sp, #36]	; 0x24
 800cdc0:	bfb6      	itet	lt
 800cdc2:	4623      	movlt	r3, r4
 800cdc4:	1b1c      	subge	r4, r3, r4
 800cdc6:	2400      	movlt	r4, #0
 800cdc8:	f1b9 0f00 	cmp.w	r9, #0
 800cdcc:	bfb5      	itete	lt
 800cdce:	9a04      	ldrlt	r2, [sp, #16]
 800cdd0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800cdd4:	eba2 0809 	sublt.w	r8, r2, r9
 800cdd8:	464a      	movge	r2, r9
 800cdda:	bfb8      	it	lt
 800cddc:	2200      	movlt	r2, #0
 800cdde:	e73c      	b.n	800cc5a <_dtoa_r+0x642>
 800cde0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cde4:	9f07      	ldr	r7, [sp, #28]
 800cde6:	461c      	mov	r4, r3
 800cde8:	e744      	b.n	800cc74 <_dtoa_r+0x65c>
 800cdea:	461a      	mov	r2, r3
 800cdec:	e770      	b.n	800ccd0 <_dtoa_r+0x6b8>
 800cdee:	9b06      	ldr	r3, [sp, #24]
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	dc18      	bgt.n	800ce26 <_dtoa_r+0x80e>
 800cdf4:	9b02      	ldr	r3, [sp, #8]
 800cdf6:	b9b3      	cbnz	r3, 800ce26 <_dtoa_r+0x80e>
 800cdf8:	9b03      	ldr	r3, [sp, #12]
 800cdfa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800cdfe:	b9a2      	cbnz	r2, 800ce2a <_dtoa_r+0x812>
 800ce00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ce04:	0d12      	lsrs	r2, r2, #20
 800ce06:	0512      	lsls	r2, r2, #20
 800ce08:	b18a      	cbz	r2, 800ce2e <_dtoa_r+0x816>
 800ce0a:	9b04      	ldr	r3, [sp, #16]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	9304      	str	r3, [sp, #16]
 800ce10:	9b05      	ldr	r3, [sp, #20]
 800ce12:	3301      	adds	r3, #1
 800ce14:	9305      	str	r3, [sp, #20]
 800ce16:	2301      	movs	r3, #1
 800ce18:	930a      	str	r3, [sp, #40]	; 0x28
 800ce1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	f47f af70 	bne.w	800cd02 <_dtoa_r+0x6ea>
 800ce22:	2001      	movs	r0, #1
 800ce24:	e775      	b.n	800cd12 <_dtoa_r+0x6fa>
 800ce26:	2300      	movs	r3, #0
 800ce28:	e7f6      	b.n	800ce18 <_dtoa_r+0x800>
 800ce2a:	9b02      	ldr	r3, [sp, #8]
 800ce2c:	e7f4      	b.n	800ce18 <_dtoa_r+0x800>
 800ce2e:	920a      	str	r2, [sp, #40]	; 0x28
 800ce30:	e7f3      	b.n	800ce1a <_dtoa_r+0x802>
 800ce32:	d082      	beq.n	800cd3a <_dtoa_r+0x722>
 800ce34:	4610      	mov	r0, r2
 800ce36:	301c      	adds	r0, #28
 800ce38:	e778      	b.n	800cd2c <_dtoa_r+0x714>
 800ce3a:	f1b9 0f00 	cmp.w	r9, #0
 800ce3e:	dc37      	bgt.n	800ceb0 <_dtoa_r+0x898>
 800ce40:	9b06      	ldr	r3, [sp, #24]
 800ce42:	2b02      	cmp	r3, #2
 800ce44:	dd34      	ble.n	800ceb0 <_dtoa_r+0x898>
 800ce46:	46ca      	mov	sl, r9
 800ce48:	f1ba 0f00 	cmp.w	sl, #0
 800ce4c:	d10d      	bne.n	800ce6a <_dtoa_r+0x852>
 800ce4e:	4621      	mov	r1, r4
 800ce50:	4653      	mov	r3, sl
 800ce52:	2205      	movs	r2, #5
 800ce54:	4630      	mov	r0, r6
 800ce56:	f000 fd4b 	bl	800d8f0 <__multadd>
 800ce5a:	4601      	mov	r1, r0
 800ce5c:	4604      	mov	r4, r0
 800ce5e:	4628      	mov	r0, r5
 800ce60:	f000 ffb0 	bl	800ddc4 <__mcmp>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	f73f adeb 	bgt.w	800ca40 <_dtoa_r+0x428>
 800ce6a:	9b08      	ldr	r3, [sp, #32]
 800ce6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ce70:	ea6f 0b03 	mvn.w	fp, r3
 800ce74:	f04f 0900 	mov.w	r9, #0
 800ce78:	4621      	mov	r1, r4
 800ce7a:	4630      	mov	r0, r6
 800ce7c:	f000 fd16 	bl	800d8ac <_Bfree>
 800ce80:	2f00      	cmp	r7, #0
 800ce82:	f43f aea8 	beq.w	800cbd6 <_dtoa_r+0x5be>
 800ce86:	f1b9 0f00 	cmp.w	r9, #0
 800ce8a:	d005      	beq.n	800ce98 <_dtoa_r+0x880>
 800ce8c:	45b9      	cmp	r9, r7
 800ce8e:	d003      	beq.n	800ce98 <_dtoa_r+0x880>
 800ce90:	4649      	mov	r1, r9
 800ce92:	4630      	mov	r0, r6
 800ce94:	f000 fd0a 	bl	800d8ac <_Bfree>
 800ce98:	4639      	mov	r1, r7
 800ce9a:	4630      	mov	r0, r6
 800ce9c:	f000 fd06 	bl	800d8ac <_Bfree>
 800cea0:	e699      	b.n	800cbd6 <_dtoa_r+0x5be>
 800cea2:	2400      	movs	r4, #0
 800cea4:	4627      	mov	r7, r4
 800cea6:	e7e0      	b.n	800ce6a <_dtoa_r+0x852>
 800cea8:	46bb      	mov	fp, r7
 800ceaa:	4604      	mov	r4, r0
 800ceac:	4607      	mov	r7, r0
 800ceae:	e5c7      	b.n	800ca40 <_dtoa_r+0x428>
 800ceb0:	9b07      	ldr	r3, [sp, #28]
 800ceb2:	46ca      	mov	sl, r9
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	f000 8100 	beq.w	800d0ba <_dtoa_r+0xaa2>
 800ceba:	f1b8 0f00 	cmp.w	r8, #0
 800cebe:	dd05      	ble.n	800cecc <_dtoa_r+0x8b4>
 800cec0:	4639      	mov	r1, r7
 800cec2:	4642      	mov	r2, r8
 800cec4:	4630      	mov	r0, r6
 800cec6:	f000 ff0d 	bl	800dce4 <__lshift>
 800ceca:	4607      	mov	r7, r0
 800cecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d05d      	beq.n	800cf8e <_dtoa_r+0x976>
 800ced2:	6879      	ldr	r1, [r7, #4]
 800ced4:	4630      	mov	r0, r6
 800ced6:	f000 fca9 	bl	800d82c <_Balloc>
 800ceda:	4680      	mov	r8, r0
 800cedc:	b928      	cbnz	r0, 800ceea <_dtoa_r+0x8d2>
 800cede:	4b82      	ldr	r3, [pc, #520]	; (800d0e8 <_dtoa_r+0xad0>)
 800cee0:	4602      	mov	r2, r0
 800cee2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cee6:	f7ff bbaf 	b.w	800c648 <_dtoa_r+0x30>
 800ceea:	693a      	ldr	r2, [r7, #16]
 800ceec:	3202      	adds	r2, #2
 800ceee:	0092      	lsls	r2, r2, #2
 800cef0:	f107 010c 	add.w	r1, r7, #12
 800cef4:	300c      	adds	r0, #12
 800cef6:	f000 fc8b 	bl	800d810 <memcpy>
 800cefa:	2201      	movs	r2, #1
 800cefc:	4641      	mov	r1, r8
 800cefe:	4630      	mov	r0, r6
 800cf00:	f000 fef0 	bl	800dce4 <__lshift>
 800cf04:	9b01      	ldr	r3, [sp, #4]
 800cf06:	3301      	adds	r3, #1
 800cf08:	9304      	str	r3, [sp, #16]
 800cf0a:	9b01      	ldr	r3, [sp, #4]
 800cf0c:	4453      	add	r3, sl
 800cf0e:	9308      	str	r3, [sp, #32]
 800cf10:	9b02      	ldr	r3, [sp, #8]
 800cf12:	f003 0301 	and.w	r3, r3, #1
 800cf16:	46b9      	mov	r9, r7
 800cf18:	9307      	str	r3, [sp, #28]
 800cf1a:	4607      	mov	r7, r0
 800cf1c:	9b04      	ldr	r3, [sp, #16]
 800cf1e:	4621      	mov	r1, r4
 800cf20:	3b01      	subs	r3, #1
 800cf22:	4628      	mov	r0, r5
 800cf24:	9302      	str	r3, [sp, #8]
 800cf26:	f7ff faeb 	bl	800c500 <quorem>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	3330      	adds	r3, #48	; 0x30
 800cf2e:	9005      	str	r0, [sp, #20]
 800cf30:	4649      	mov	r1, r9
 800cf32:	4628      	mov	r0, r5
 800cf34:	9309      	str	r3, [sp, #36]	; 0x24
 800cf36:	f000 ff45 	bl	800ddc4 <__mcmp>
 800cf3a:	463a      	mov	r2, r7
 800cf3c:	4682      	mov	sl, r0
 800cf3e:	4621      	mov	r1, r4
 800cf40:	4630      	mov	r0, r6
 800cf42:	f000 ff5b 	bl	800ddfc <__mdiff>
 800cf46:	68c2      	ldr	r2, [r0, #12]
 800cf48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf4a:	4680      	mov	r8, r0
 800cf4c:	bb0a      	cbnz	r2, 800cf92 <_dtoa_r+0x97a>
 800cf4e:	4601      	mov	r1, r0
 800cf50:	4628      	mov	r0, r5
 800cf52:	f000 ff37 	bl	800ddc4 <__mcmp>
 800cf56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf58:	4602      	mov	r2, r0
 800cf5a:	4641      	mov	r1, r8
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800cf62:	f000 fca3 	bl	800d8ac <_Bfree>
 800cf66:	9b06      	ldr	r3, [sp, #24]
 800cf68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf6a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cf6e:	ea43 0102 	orr.w	r1, r3, r2
 800cf72:	9b07      	ldr	r3, [sp, #28]
 800cf74:	430b      	orrs	r3, r1
 800cf76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf78:	d10d      	bne.n	800cf96 <_dtoa_r+0x97e>
 800cf7a:	2b39      	cmp	r3, #57	; 0x39
 800cf7c:	d029      	beq.n	800cfd2 <_dtoa_r+0x9ba>
 800cf7e:	f1ba 0f00 	cmp.w	sl, #0
 800cf82:	dd01      	ble.n	800cf88 <_dtoa_r+0x970>
 800cf84:	9b05      	ldr	r3, [sp, #20]
 800cf86:	3331      	adds	r3, #49	; 0x31
 800cf88:	9a02      	ldr	r2, [sp, #8]
 800cf8a:	7013      	strb	r3, [r2, #0]
 800cf8c:	e774      	b.n	800ce78 <_dtoa_r+0x860>
 800cf8e:	4638      	mov	r0, r7
 800cf90:	e7b8      	b.n	800cf04 <_dtoa_r+0x8ec>
 800cf92:	2201      	movs	r2, #1
 800cf94:	e7e1      	b.n	800cf5a <_dtoa_r+0x942>
 800cf96:	f1ba 0f00 	cmp.w	sl, #0
 800cf9a:	db06      	blt.n	800cfaa <_dtoa_r+0x992>
 800cf9c:	9906      	ldr	r1, [sp, #24]
 800cf9e:	ea41 0a0a 	orr.w	sl, r1, sl
 800cfa2:	9907      	ldr	r1, [sp, #28]
 800cfa4:	ea5a 0101 	orrs.w	r1, sl, r1
 800cfa8:	d120      	bne.n	800cfec <_dtoa_r+0x9d4>
 800cfaa:	2a00      	cmp	r2, #0
 800cfac:	ddec      	ble.n	800cf88 <_dtoa_r+0x970>
 800cfae:	4629      	mov	r1, r5
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	9304      	str	r3, [sp, #16]
 800cfb6:	f000 fe95 	bl	800dce4 <__lshift>
 800cfba:	4621      	mov	r1, r4
 800cfbc:	4605      	mov	r5, r0
 800cfbe:	f000 ff01 	bl	800ddc4 <__mcmp>
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	9b04      	ldr	r3, [sp, #16]
 800cfc6:	dc02      	bgt.n	800cfce <_dtoa_r+0x9b6>
 800cfc8:	d1de      	bne.n	800cf88 <_dtoa_r+0x970>
 800cfca:	07da      	lsls	r2, r3, #31
 800cfcc:	d5dc      	bpl.n	800cf88 <_dtoa_r+0x970>
 800cfce:	2b39      	cmp	r3, #57	; 0x39
 800cfd0:	d1d8      	bne.n	800cf84 <_dtoa_r+0x96c>
 800cfd2:	9a02      	ldr	r2, [sp, #8]
 800cfd4:	2339      	movs	r3, #57	; 0x39
 800cfd6:	7013      	strb	r3, [r2, #0]
 800cfd8:	4643      	mov	r3, r8
 800cfda:	4698      	mov	r8, r3
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800cfe2:	2a39      	cmp	r2, #57	; 0x39
 800cfe4:	d051      	beq.n	800d08a <_dtoa_r+0xa72>
 800cfe6:	3201      	adds	r2, #1
 800cfe8:	701a      	strb	r2, [r3, #0]
 800cfea:	e745      	b.n	800ce78 <_dtoa_r+0x860>
 800cfec:	2a00      	cmp	r2, #0
 800cfee:	dd03      	ble.n	800cff8 <_dtoa_r+0x9e0>
 800cff0:	2b39      	cmp	r3, #57	; 0x39
 800cff2:	d0ee      	beq.n	800cfd2 <_dtoa_r+0x9ba>
 800cff4:	3301      	adds	r3, #1
 800cff6:	e7c7      	b.n	800cf88 <_dtoa_r+0x970>
 800cff8:	9a04      	ldr	r2, [sp, #16]
 800cffa:	9908      	ldr	r1, [sp, #32]
 800cffc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d000:	428a      	cmp	r2, r1
 800d002:	d02b      	beq.n	800d05c <_dtoa_r+0xa44>
 800d004:	4629      	mov	r1, r5
 800d006:	2300      	movs	r3, #0
 800d008:	220a      	movs	r2, #10
 800d00a:	4630      	mov	r0, r6
 800d00c:	f000 fc70 	bl	800d8f0 <__multadd>
 800d010:	45b9      	cmp	r9, r7
 800d012:	4605      	mov	r5, r0
 800d014:	f04f 0300 	mov.w	r3, #0
 800d018:	f04f 020a 	mov.w	r2, #10
 800d01c:	4649      	mov	r1, r9
 800d01e:	4630      	mov	r0, r6
 800d020:	d107      	bne.n	800d032 <_dtoa_r+0xa1a>
 800d022:	f000 fc65 	bl	800d8f0 <__multadd>
 800d026:	4681      	mov	r9, r0
 800d028:	4607      	mov	r7, r0
 800d02a:	9b04      	ldr	r3, [sp, #16]
 800d02c:	3301      	adds	r3, #1
 800d02e:	9304      	str	r3, [sp, #16]
 800d030:	e774      	b.n	800cf1c <_dtoa_r+0x904>
 800d032:	f000 fc5d 	bl	800d8f0 <__multadd>
 800d036:	4639      	mov	r1, r7
 800d038:	4681      	mov	r9, r0
 800d03a:	2300      	movs	r3, #0
 800d03c:	220a      	movs	r2, #10
 800d03e:	4630      	mov	r0, r6
 800d040:	f000 fc56 	bl	800d8f0 <__multadd>
 800d044:	4607      	mov	r7, r0
 800d046:	e7f0      	b.n	800d02a <_dtoa_r+0xa12>
 800d048:	f1ba 0f00 	cmp.w	sl, #0
 800d04c:	9a01      	ldr	r2, [sp, #4]
 800d04e:	bfcc      	ite	gt
 800d050:	46d0      	movgt	r8, sl
 800d052:	f04f 0801 	movle.w	r8, #1
 800d056:	4490      	add	r8, r2
 800d058:	f04f 0900 	mov.w	r9, #0
 800d05c:	4629      	mov	r1, r5
 800d05e:	2201      	movs	r2, #1
 800d060:	4630      	mov	r0, r6
 800d062:	9302      	str	r3, [sp, #8]
 800d064:	f000 fe3e 	bl	800dce4 <__lshift>
 800d068:	4621      	mov	r1, r4
 800d06a:	4605      	mov	r5, r0
 800d06c:	f000 feaa 	bl	800ddc4 <__mcmp>
 800d070:	2800      	cmp	r0, #0
 800d072:	dcb1      	bgt.n	800cfd8 <_dtoa_r+0x9c0>
 800d074:	d102      	bne.n	800d07c <_dtoa_r+0xa64>
 800d076:	9b02      	ldr	r3, [sp, #8]
 800d078:	07db      	lsls	r3, r3, #31
 800d07a:	d4ad      	bmi.n	800cfd8 <_dtoa_r+0x9c0>
 800d07c:	4643      	mov	r3, r8
 800d07e:	4698      	mov	r8, r3
 800d080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d084:	2a30      	cmp	r2, #48	; 0x30
 800d086:	d0fa      	beq.n	800d07e <_dtoa_r+0xa66>
 800d088:	e6f6      	b.n	800ce78 <_dtoa_r+0x860>
 800d08a:	9a01      	ldr	r2, [sp, #4]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d1a4      	bne.n	800cfda <_dtoa_r+0x9c2>
 800d090:	f10b 0b01 	add.w	fp, fp, #1
 800d094:	2331      	movs	r3, #49	; 0x31
 800d096:	e778      	b.n	800cf8a <_dtoa_r+0x972>
 800d098:	4b14      	ldr	r3, [pc, #80]	; (800d0ec <_dtoa_r+0xad4>)
 800d09a:	f7ff bb27 	b.w	800c6ec <_dtoa_r+0xd4>
 800d09e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f47f ab03 	bne.w	800c6ac <_dtoa_r+0x94>
 800d0a6:	4b12      	ldr	r3, [pc, #72]	; (800d0f0 <_dtoa_r+0xad8>)
 800d0a8:	f7ff bb20 	b.w	800c6ec <_dtoa_r+0xd4>
 800d0ac:	f1ba 0f00 	cmp.w	sl, #0
 800d0b0:	dc03      	bgt.n	800d0ba <_dtoa_r+0xaa2>
 800d0b2:	9b06      	ldr	r3, [sp, #24]
 800d0b4:	2b02      	cmp	r3, #2
 800d0b6:	f73f aec7 	bgt.w	800ce48 <_dtoa_r+0x830>
 800d0ba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d0be:	4621      	mov	r1, r4
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	f7ff fa1d 	bl	800c500 <quorem>
 800d0c6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d0ca:	f808 3b01 	strb.w	r3, [r8], #1
 800d0ce:	9a01      	ldr	r2, [sp, #4]
 800d0d0:	eba8 0202 	sub.w	r2, r8, r2
 800d0d4:	4592      	cmp	sl, r2
 800d0d6:	ddb7      	ble.n	800d048 <_dtoa_r+0xa30>
 800d0d8:	4629      	mov	r1, r5
 800d0da:	2300      	movs	r3, #0
 800d0dc:	220a      	movs	r2, #10
 800d0de:	4630      	mov	r0, r6
 800d0e0:	f000 fc06 	bl	800d8f0 <__multadd>
 800d0e4:	4605      	mov	r5, r0
 800d0e6:	e7ea      	b.n	800d0be <_dtoa_r+0xaa6>
 800d0e8:	0800f8a0 	.word	0x0800f8a0
 800d0ec:	0800f6a0 	.word	0x0800f6a0
 800d0f0:	0800f821 	.word	0x0800f821

0800d0f4 <rshift>:
 800d0f4:	6903      	ldr	r3, [r0, #16]
 800d0f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d0fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d102:	f100 0414 	add.w	r4, r0, #20
 800d106:	dd45      	ble.n	800d194 <rshift+0xa0>
 800d108:	f011 011f 	ands.w	r1, r1, #31
 800d10c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d110:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d114:	d10c      	bne.n	800d130 <rshift+0x3c>
 800d116:	f100 0710 	add.w	r7, r0, #16
 800d11a:	4629      	mov	r1, r5
 800d11c:	42b1      	cmp	r1, r6
 800d11e:	d334      	bcc.n	800d18a <rshift+0x96>
 800d120:	1a9b      	subs	r3, r3, r2
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	1eea      	subs	r2, r5, #3
 800d126:	4296      	cmp	r6, r2
 800d128:	bf38      	it	cc
 800d12a:	2300      	movcc	r3, #0
 800d12c:	4423      	add	r3, r4
 800d12e:	e015      	b.n	800d15c <rshift+0x68>
 800d130:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d134:	f1c1 0820 	rsb	r8, r1, #32
 800d138:	40cf      	lsrs	r7, r1
 800d13a:	f105 0e04 	add.w	lr, r5, #4
 800d13e:	46a1      	mov	r9, r4
 800d140:	4576      	cmp	r6, lr
 800d142:	46f4      	mov	ip, lr
 800d144:	d815      	bhi.n	800d172 <rshift+0x7e>
 800d146:	1a9a      	subs	r2, r3, r2
 800d148:	0092      	lsls	r2, r2, #2
 800d14a:	3a04      	subs	r2, #4
 800d14c:	3501      	adds	r5, #1
 800d14e:	42ae      	cmp	r6, r5
 800d150:	bf38      	it	cc
 800d152:	2200      	movcc	r2, #0
 800d154:	18a3      	adds	r3, r4, r2
 800d156:	50a7      	str	r7, [r4, r2]
 800d158:	b107      	cbz	r7, 800d15c <rshift+0x68>
 800d15a:	3304      	adds	r3, #4
 800d15c:	1b1a      	subs	r2, r3, r4
 800d15e:	42a3      	cmp	r3, r4
 800d160:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d164:	bf08      	it	eq
 800d166:	2300      	moveq	r3, #0
 800d168:	6102      	str	r2, [r0, #16]
 800d16a:	bf08      	it	eq
 800d16c:	6143      	streq	r3, [r0, #20]
 800d16e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d172:	f8dc c000 	ldr.w	ip, [ip]
 800d176:	fa0c fc08 	lsl.w	ip, ip, r8
 800d17a:	ea4c 0707 	orr.w	r7, ip, r7
 800d17e:	f849 7b04 	str.w	r7, [r9], #4
 800d182:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d186:	40cf      	lsrs	r7, r1
 800d188:	e7da      	b.n	800d140 <rshift+0x4c>
 800d18a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d18e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d192:	e7c3      	b.n	800d11c <rshift+0x28>
 800d194:	4623      	mov	r3, r4
 800d196:	e7e1      	b.n	800d15c <rshift+0x68>

0800d198 <__hexdig_fun>:
 800d198:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d19c:	2b09      	cmp	r3, #9
 800d19e:	d802      	bhi.n	800d1a6 <__hexdig_fun+0xe>
 800d1a0:	3820      	subs	r0, #32
 800d1a2:	b2c0      	uxtb	r0, r0
 800d1a4:	4770      	bx	lr
 800d1a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d1aa:	2b05      	cmp	r3, #5
 800d1ac:	d801      	bhi.n	800d1b2 <__hexdig_fun+0x1a>
 800d1ae:	3847      	subs	r0, #71	; 0x47
 800d1b0:	e7f7      	b.n	800d1a2 <__hexdig_fun+0xa>
 800d1b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d1b6:	2b05      	cmp	r3, #5
 800d1b8:	d801      	bhi.n	800d1be <__hexdig_fun+0x26>
 800d1ba:	3827      	subs	r0, #39	; 0x27
 800d1bc:	e7f1      	b.n	800d1a2 <__hexdig_fun+0xa>
 800d1be:	2000      	movs	r0, #0
 800d1c0:	4770      	bx	lr
	...

0800d1c4 <__gethex>:
 800d1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c8:	ed2d 8b02 	vpush	{d8}
 800d1cc:	b089      	sub	sp, #36	; 0x24
 800d1ce:	ee08 0a10 	vmov	s16, r0
 800d1d2:	9304      	str	r3, [sp, #16]
 800d1d4:	4bb4      	ldr	r3, [pc, #720]	; (800d4a8 <__gethex+0x2e4>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	9301      	str	r3, [sp, #4]
 800d1da:	4618      	mov	r0, r3
 800d1dc:	468b      	mov	fp, r1
 800d1de:	4690      	mov	r8, r2
 800d1e0:	f7f3 f888 	bl	80002f4 <strlen>
 800d1e4:	9b01      	ldr	r3, [sp, #4]
 800d1e6:	f8db 2000 	ldr.w	r2, [fp]
 800d1ea:	4403      	add	r3, r0
 800d1ec:	4682      	mov	sl, r0
 800d1ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d1f2:	9305      	str	r3, [sp, #20]
 800d1f4:	1c93      	adds	r3, r2, #2
 800d1f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d1fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d1fe:	32fe      	adds	r2, #254	; 0xfe
 800d200:	18d1      	adds	r1, r2, r3
 800d202:	461f      	mov	r7, r3
 800d204:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d208:	9100      	str	r1, [sp, #0]
 800d20a:	2830      	cmp	r0, #48	; 0x30
 800d20c:	d0f8      	beq.n	800d200 <__gethex+0x3c>
 800d20e:	f7ff ffc3 	bl	800d198 <__hexdig_fun>
 800d212:	4604      	mov	r4, r0
 800d214:	2800      	cmp	r0, #0
 800d216:	d13a      	bne.n	800d28e <__gethex+0xca>
 800d218:	9901      	ldr	r1, [sp, #4]
 800d21a:	4652      	mov	r2, sl
 800d21c:	4638      	mov	r0, r7
 800d21e:	f001 fa2f 	bl	800e680 <strncmp>
 800d222:	4605      	mov	r5, r0
 800d224:	2800      	cmp	r0, #0
 800d226:	d168      	bne.n	800d2fa <__gethex+0x136>
 800d228:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d22c:	eb07 060a 	add.w	r6, r7, sl
 800d230:	f7ff ffb2 	bl	800d198 <__hexdig_fun>
 800d234:	2800      	cmp	r0, #0
 800d236:	d062      	beq.n	800d2fe <__gethex+0x13a>
 800d238:	4633      	mov	r3, r6
 800d23a:	7818      	ldrb	r0, [r3, #0]
 800d23c:	2830      	cmp	r0, #48	; 0x30
 800d23e:	461f      	mov	r7, r3
 800d240:	f103 0301 	add.w	r3, r3, #1
 800d244:	d0f9      	beq.n	800d23a <__gethex+0x76>
 800d246:	f7ff ffa7 	bl	800d198 <__hexdig_fun>
 800d24a:	2301      	movs	r3, #1
 800d24c:	fab0 f480 	clz	r4, r0
 800d250:	0964      	lsrs	r4, r4, #5
 800d252:	4635      	mov	r5, r6
 800d254:	9300      	str	r3, [sp, #0]
 800d256:	463a      	mov	r2, r7
 800d258:	4616      	mov	r6, r2
 800d25a:	3201      	adds	r2, #1
 800d25c:	7830      	ldrb	r0, [r6, #0]
 800d25e:	f7ff ff9b 	bl	800d198 <__hexdig_fun>
 800d262:	2800      	cmp	r0, #0
 800d264:	d1f8      	bne.n	800d258 <__gethex+0x94>
 800d266:	9901      	ldr	r1, [sp, #4]
 800d268:	4652      	mov	r2, sl
 800d26a:	4630      	mov	r0, r6
 800d26c:	f001 fa08 	bl	800e680 <strncmp>
 800d270:	b980      	cbnz	r0, 800d294 <__gethex+0xd0>
 800d272:	b94d      	cbnz	r5, 800d288 <__gethex+0xc4>
 800d274:	eb06 050a 	add.w	r5, r6, sl
 800d278:	462a      	mov	r2, r5
 800d27a:	4616      	mov	r6, r2
 800d27c:	3201      	adds	r2, #1
 800d27e:	7830      	ldrb	r0, [r6, #0]
 800d280:	f7ff ff8a 	bl	800d198 <__hexdig_fun>
 800d284:	2800      	cmp	r0, #0
 800d286:	d1f8      	bne.n	800d27a <__gethex+0xb6>
 800d288:	1bad      	subs	r5, r5, r6
 800d28a:	00ad      	lsls	r5, r5, #2
 800d28c:	e004      	b.n	800d298 <__gethex+0xd4>
 800d28e:	2400      	movs	r4, #0
 800d290:	4625      	mov	r5, r4
 800d292:	e7e0      	b.n	800d256 <__gethex+0x92>
 800d294:	2d00      	cmp	r5, #0
 800d296:	d1f7      	bne.n	800d288 <__gethex+0xc4>
 800d298:	7833      	ldrb	r3, [r6, #0]
 800d29a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d29e:	2b50      	cmp	r3, #80	; 0x50
 800d2a0:	d13b      	bne.n	800d31a <__gethex+0x156>
 800d2a2:	7873      	ldrb	r3, [r6, #1]
 800d2a4:	2b2b      	cmp	r3, #43	; 0x2b
 800d2a6:	d02c      	beq.n	800d302 <__gethex+0x13e>
 800d2a8:	2b2d      	cmp	r3, #45	; 0x2d
 800d2aa:	d02e      	beq.n	800d30a <__gethex+0x146>
 800d2ac:	1c71      	adds	r1, r6, #1
 800d2ae:	f04f 0900 	mov.w	r9, #0
 800d2b2:	7808      	ldrb	r0, [r1, #0]
 800d2b4:	f7ff ff70 	bl	800d198 <__hexdig_fun>
 800d2b8:	1e43      	subs	r3, r0, #1
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	2b18      	cmp	r3, #24
 800d2be:	d82c      	bhi.n	800d31a <__gethex+0x156>
 800d2c0:	f1a0 0210 	sub.w	r2, r0, #16
 800d2c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d2c8:	f7ff ff66 	bl	800d198 <__hexdig_fun>
 800d2cc:	1e43      	subs	r3, r0, #1
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	2b18      	cmp	r3, #24
 800d2d2:	d91d      	bls.n	800d310 <__gethex+0x14c>
 800d2d4:	f1b9 0f00 	cmp.w	r9, #0
 800d2d8:	d000      	beq.n	800d2dc <__gethex+0x118>
 800d2da:	4252      	negs	r2, r2
 800d2dc:	4415      	add	r5, r2
 800d2de:	f8cb 1000 	str.w	r1, [fp]
 800d2e2:	b1e4      	cbz	r4, 800d31e <__gethex+0x15a>
 800d2e4:	9b00      	ldr	r3, [sp, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	bf14      	ite	ne
 800d2ea:	2700      	movne	r7, #0
 800d2ec:	2706      	moveq	r7, #6
 800d2ee:	4638      	mov	r0, r7
 800d2f0:	b009      	add	sp, #36	; 0x24
 800d2f2:	ecbd 8b02 	vpop	{d8}
 800d2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2fa:	463e      	mov	r6, r7
 800d2fc:	4625      	mov	r5, r4
 800d2fe:	2401      	movs	r4, #1
 800d300:	e7ca      	b.n	800d298 <__gethex+0xd4>
 800d302:	f04f 0900 	mov.w	r9, #0
 800d306:	1cb1      	adds	r1, r6, #2
 800d308:	e7d3      	b.n	800d2b2 <__gethex+0xee>
 800d30a:	f04f 0901 	mov.w	r9, #1
 800d30e:	e7fa      	b.n	800d306 <__gethex+0x142>
 800d310:	230a      	movs	r3, #10
 800d312:	fb03 0202 	mla	r2, r3, r2, r0
 800d316:	3a10      	subs	r2, #16
 800d318:	e7d4      	b.n	800d2c4 <__gethex+0x100>
 800d31a:	4631      	mov	r1, r6
 800d31c:	e7df      	b.n	800d2de <__gethex+0x11a>
 800d31e:	1bf3      	subs	r3, r6, r7
 800d320:	3b01      	subs	r3, #1
 800d322:	4621      	mov	r1, r4
 800d324:	2b07      	cmp	r3, #7
 800d326:	dc0b      	bgt.n	800d340 <__gethex+0x17c>
 800d328:	ee18 0a10 	vmov	r0, s16
 800d32c:	f000 fa7e 	bl	800d82c <_Balloc>
 800d330:	4604      	mov	r4, r0
 800d332:	b940      	cbnz	r0, 800d346 <__gethex+0x182>
 800d334:	4b5d      	ldr	r3, [pc, #372]	; (800d4ac <__gethex+0x2e8>)
 800d336:	4602      	mov	r2, r0
 800d338:	21de      	movs	r1, #222	; 0xde
 800d33a:	485d      	ldr	r0, [pc, #372]	; (800d4b0 <__gethex+0x2ec>)
 800d33c:	f001 f9c2 	bl	800e6c4 <__assert_func>
 800d340:	3101      	adds	r1, #1
 800d342:	105b      	asrs	r3, r3, #1
 800d344:	e7ee      	b.n	800d324 <__gethex+0x160>
 800d346:	f100 0914 	add.w	r9, r0, #20
 800d34a:	f04f 0b00 	mov.w	fp, #0
 800d34e:	f1ca 0301 	rsb	r3, sl, #1
 800d352:	f8cd 9008 	str.w	r9, [sp, #8]
 800d356:	f8cd b000 	str.w	fp, [sp]
 800d35a:	9306      	str	r3, [sp, #24]
 800d35c:	42b7      	cmp	r7, r6
 800d35e:	d340      	bcc.n	800d3e2 <__gethex+0x21e>
 800d360:	9802      	ldr	r0, [sp, #8]
 800d362:	9b00      	ldr	r3, [sp, #0]
 800d364:	f840 3b04 	str.w	r3, [r0], #4
 800d368:	eba0 0009 	sub.w	r0, r0, r9
 800d36c:	1080      	asrs	r0, r0, #2
 800d36e:	0146      	lsls	r6, r0, #5
 800d370:	6120      	str	r0, [r4, #16]
 800d372:	4618      	mov	r0, r3
 800d374:	f000 fb4c 	bl	800da10 <__hi0bits>
 800d378:	1a30      	subs	r0, r6, r0
 800d37a:	f8d8 6000 	ldr.w	r6, [r8]
 800d37e:	42b0      	cmp	r0, r6
 800d380:	dd63      	ble.n	800d44a <__gethex+0x286>
 800d382:	1b87      	subs	r7, r0, r6
 800d384:	4639      	mov	r1, r7
 800d386:	4620      	mov	r0, r4
 800d388:	f000 feed 	bl	800e166 <__any_on>
 800d38c:	4682      	mov	sl, r0
 800d38e:	b1a8      	cbz	r0, 800d3bc <__gethex+0x1f8>
 800d390:	1e7b      	subs	r3, r7, #1
 800d392:	1159      	asrs	r1, r3, #5
 800d394:	f003 021f 	and.w	r2, r3, #31
 800d398:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d39c:	f04f 0a01 	mov.w	sl, #1
 800d3a0:	fa0a f202 	lsl.w	r2, sl, r2
 800d3a4:	420a      	tst	r2, r1
 800d3a6:	d009      	beq.n	800d3bc <__gethex+0x1f8>
 800d3a8:	4553      	cmp	r3, sl
 800d3aa:	dd05      	ble.n	800d3b8 <__gethex+0x1f4>
 800d3ac:	1eb9      	subs	r1, r7, #2
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	f000 fed9 	bl	800e166 <__any_on>
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	d145      	bne.n	800d444 <__gethex+0x280>
 800d3b8:	f04f 0a02 	mov.w	sl, #2
 800d3bc:	4639      	mov	r1, r7
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f7ff fe98 	bl	800d0f4 <rshift>
 800d3c4:	443d      	add	r5, r7
 800d3c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d3ca:	42ab      	cmp	r3, r5
 800d3cc:	da4c      	bge.n	800d468 <__gethex+0x2a4>
 800d3ce:	ee18 0a10 	vmov	r0, s16
 800d3d2:	4621      	mov	r1, r4
 800d3d4:	f000 fa6a 	bl	800d8ac <_Bfree>
 800d3d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d3da:	2300      	movs	r3, #0
 800d3dc:	6013      	str	r3, [r2, #0]
 800d3de:	27a3      	movs	r7, #163	; 0xa3
 800d3e0:	e785      	b.n	800d2ee <__gethex+0x12a>
 800d3e2:	1e73      	subs	r3, r6, #1
 800d3e4:	9a05      	ldr	r2, [sp, #20]
 800d3e6:	9303      	str	r3, [sp, #12]
 800d3e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d019      	beq.n	800d424 <__gethex+0x260>
 800d3f0:	f1bb 0f20 	cmp.w	fp, #32
 800d3f4:	d107      	bne.n	800d406 <__gethex+0x242>
 800d3f6:	9b02      	ldr	r3, [sp, #8]
 800d3f8:	9a00      	ldr	r2, [sp, #0]
 800d3fa:	f843 2b04 	str.w	r2, [r3], #4
 800d3fe:	9302      	str	r3, [sp, #8]
 800d400:	2300      	movs	r3, #0
 800d402:	9300      	str	r3, [sp, #0]
 800d404:	469b      	mov	fp, r3
 800d406:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d40a:	f7ff fec5 	bl	800d198 <__hexdig_fun>
 800d40e:	9b00      	ldr	r3, [sp, #0]
 800d410:	f000 000f 	and.w	r0, r0, #15
 800d414:	fa00 f00b 	lsl.w	r0, r0, fp
 800d418:	4303      	orrs	r3, r0
 800d41a:	9300      	str	r3, [sp, #0]
 800d41c:	f10b 0b04 	add.w	fp, fp, #4
 800d420:	9b03      	ldr	r3, [sp, #12]
 800d422:	e00d      	b.n	800d440 <__gethex+0x27c>
 800d424:	9b03      	ldr	r3, [sp, #12]
 800d426:	9a06      	ldr	r2, [sp, #24]
 800d428:	4413      	add	r3, r2
 800d42a:	42bb      	cmp	r3, r7
 800d42c:	d3e0      	bcc.n	800d3f0 <__gethex+0x22c>
 800d42e:	4618      	mov	r0, r3
 800d430:	9901      	ldr	r1, [sp, #4]
 800d432:	9307      	str	r3, [sp, #28]
 800d434:	4652      	mov	r2, sl
 800d436:	f001 f923 	bl	800e680 <strncmp>
 800d43a:	9b07      	ldr	r3, [sp, #28]
 800d43c:	2800      	cmp	r0, #0
 800d43e:	d1d7      	bne.n	800d3f0 <__gethex+0x22c>
 800d440:	461e      	mov	r6, r3
 800d442:	e78b      	b.n	800d35c <__gethex+0x198>
 800d444:	f04f 0a03 	mov.w	sl, #3
 800d448:	e7b8      	b.n	800d3bc <__gethex+0x1f8>
 800d44a:	da0a      	bge.n	800d462 <__gethex+0x29e>
 800d44c:	1a37      	subs	r7, r6, r0
 800d44e:	4621      	mov	r1, r4
 800d450:	ee18 0a10 	vmov	r0, s16
 800d454:	463a      	mov	r2, r7
 800d456:	f000 fc45 	bl	800dce4 <__lshift>
 800d45a:	1bed      	subs	r5, r5, r7
 800d45c:	4604      	mov	r4, r0
 800d45e:	f100 0914 	add.w	r9, r0, #20
 800d462:	f04f 0a00 	mov.w	sl, #0
 800d466:	e7ae      	b.n	800d3c6 <__gethex+0x202>
 800d468:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d46c:	42a8      	cmp	r0, r5
 800d46e:	dd72      	ble.n	800d556 <__gethex+0x392>
 800d470:	1b45      	subs	r5, r0, r5
 800d472:	42ae      	cmp	r6, r5
 800d474:	dc36      	bgt.n	800d4e4 <__gethex+0x320>
 800d476:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d47a:	2b02      	cmp	r3, #2
 800d47c:	d02a      	beq.n	800d4d4 <__gethex+0x310>
 800d47e:	2b03      	cmp	r3, #3
 800d480:	d02c      	beq.n	800d4dc <__gethex+0x318>
 800d482:	2b01      	cmp	r3, #1
 800d484:	d11c      	bne.n	800d4c0 <__gethex+0x2fc>
 800d486:	42ae      	cmp	r6, r5
 800d488:	d11a      	bne.n	800d4c0 <__gethex+0x2fc>
 800d48a:	2e01      	cmp	r6, #1
 800d48c:	d112      	bne.n	800d4b4 <__gethex+0x2f0>
 800d48e:	9a04      	ldr	r2, [sp, #16]
 800d490:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d494:	6013      	str	r3, [r2, #0]
 800d496:	2301      	movs	r3, #1
 800d498:	6123      	str	r3, [r4, #16]
 800d49a:	f8c9 3000 	str.w	r3, [r9]
 800d49e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d4a0:	2762      	movs	r7, #98	; 0x62
 800d4a2:	601c      	str	r4, [r3, #0]
 800d4a4:	e723      	b.n	800d2ee <__gethex+0x12a>
 800d4a6:	bf00      	nop
 800d4a8:	0800f918 	.word	0x0800f918
 800d4ac:	0800f8a0 	.word	0x0800f8a0
 800d4b0:	0800f8b1 	.word	0x0800f8b1
 800d4b4:	1e71      	subs	r1, r6, #1
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	f000 fe55 	bl	800e166 <__any_on>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	d1e6      	bne.n	800d48e <__gethex+0x2ca>
 800d4c0:	ee18 0a10 	vmov	r0, s16
 800d4c4:	4621      	mov	r1, r4
 800d4c6:	f000 f9f1 	bl	800d8ac <_Bfree>
 800d4ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	6013      	str	r3, [r2, #0]
 800d4d0:	2750      	movs	r7, #80	; 0x50
 800d4d2:	e70c      	b.n	800d2ee <__gethex+0x12a>
 800d4d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d1f2      	bne.n	800d4c0 <__gethex+0x2fc>
 800d4da:	e7d8      	b.n	800d48e <__gethex+0x2ca>
 800d4dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d1d5      	bne.n	800d48e <__gethex+0x2ca>
 800d4e2:	e7ed      	b.n	800d4c0 <__gethex+0x2fc>
 800d4e4:	1e6f      	subs	r7, r5, #1
 800d4e6:	f1ba 0f00 	cmp.w	sl, #0
 800d4ea:	d131      	bne.n	800d550 <__gethex+0x38c>
 800d4ec:	b127      	cbz	r7, 800d4f8 <__gethex+0x334>
 800d4ee:	4639      	mov	r1, r7
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	f000 fe38 	bl	800e166 <__any_on>
 800d4f6:	4682      	mov	sl, r0
 800d4f8:	117b      	asrs	r3, r7, #5
 800d4fa:	2101      	movs	r1, #1
 800d4fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d500:	f007 071f 	and.w	r7, r7, #31
 800d504:	fa01 f707 	lsl.w	r7, r1, r7
 800d508:	421f      	tst	r7, r3
 800d50a:	4629      	mov	r1, r5
 800d50c:	4620      	mov	r0, r4
 800d50e:	bf18      	it	ne
 800d510:	f04a 0a02 	orrne.w	sl, sl, #2
 800d514:	1b76      	subs	r6, r6, r5
 800d516:	f7ff fded 	bl	800d0f4 <rshift>
 800d51a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d51e:	2702      	movs	r7, #2
 800d520:	f1ba 0f00 	cmp.w	sl, #0
 800d524:	d048      	beq.n	800d5b8 <__gethex+0x3f4>
 800d526:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d52a:	2b02      	cmp	r3, #2
 800d52c:	d015      	beq.n	800d55a <__gethex+0x396>
 800d52e:	2b03      	cmp	r3, #3
 800d530:	d017      	beq.n	800d562 <__gethex+0x39e>
 800d532:	2b01      	cmp	r3, #1
 800d534:	d109      	bne.n	800d54a <__gethex+0x386>
 800d536:	f01a 0f02 	tst.w	sl, #2
 800d53a:	d006      	beq.n	800d54a <__gethex+0x386>
 800d53c:	f8d9 0000 	ldr.w	r0, [r9]
 800d540:	ea4a 0a00 	orr.w	sl, sl, r0
 800d544:	f01a 0f01 	tst.w	sl, #1
 800d548:	d10e      	bne.n	800d568 <__gethex+0x3a4>
 800d54a:	f047 0710 	orr.w	r7, r7, #16
 800d54e:	e033      	b.n	800d5b8 <__gethex+0x3f4>
 800d550:	f04f 0a01 	mov.w	sl, #1
 800d554:	e7d0      	b.n	800d4f8 <__gethex+0x334>
 800d556:	2701      	movs	r7, #1
 800d558:	e7e2      	b.n	800d520 <__gethex+0x35c>
 800d55a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d55c:	f1c3 0301 	rsb	r3, r3, #1
 800d560:	9315      	str	r3, [sp, #84]	; 0x54
 800d562:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d564:	2b00      	cmp	r3, #0
 800d566:	d0f0      	beq.n	800d54a <__gethex+0x386>
 800d568:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d56c:	f104 0314 	add.w	r3, r4, #20
 800d570:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d574:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d578:	f04f 0c00 	mov.w	ip, #0
 800d57c:	4618      	mov	r0, r3
 800d57e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d582:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d586:	d01c      	beq.n	800d5c2 <__gethex+0x3fe>
 800d588:	3201      	adds	r2, #1
 800d58a:	6002      	str	r2, [r0, #0]
 800d58c:	2f02      	cmp	r7, #2
 800d58e:	f104 0314 	add.w	r3, r4, #20
 800d592:	d13f      	bne.n	800d614 <__gethex+0x450>
 800d594:	f8d8 2000 	ldr.w	r2, [r8]
 800d598:	3a01      	subs	r2, #1
 800d59a:	42b2      	cmp	r2, r6
 800d59c:	d10a      	bne.n	800d5b4 <__gethex+0x3f0>
 800d59e:	1171      	asrs	r1, r6, #5
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d5a6:	f006 061f 	and.w	r6, r6, #31
 800d5aa:	fa02 f606 	lsl.w	r6, r2, r6
 800d5ae:	421e      	tst	r6, r3
 800d5b0:	bf18      	it	ne
 800d5b2:	4617      	movne	r7, r2
 800d5b4:	f047 0720 	orr.w	r7, r7, #32
 800d5b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d5ba:	601c      	str	r4, [r3, #0]
 800d5bc:	9b04      	ldr	r3, [sp, #16]
 800d5be:	601d      	str	r5, [r3, #0]
 800d5c0:	e695      	b.n	800d2ee <__gethex+0x12a>
 800d5c2:	4299      	cmp	r1, r3
 800d5c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800d5c8:	d8d8      	bhi.n	800d57c <__gethex+0x3b8>
 800d5ca:	68a3      	ldr	r3, [r4, #8]
 800d5cc:	459b      	cmp	fp, r3
 800d5ce:	db19      	blt.n	800d604 <__gethex+0x440>
 800d5d0:	6861      	ldr	r1, [r4, #4]
 800d5d2:	ee18 0a10 	vmov	r0, s16
 800d5d6:	3101      	adds	r1, #1
 800d5d8:	f000 f928 	bl	800d82c <_Balloc>
 800d5dc:	4681      	mov	r9, r0
 800d5de:	b918      	cbnz	r0, 800d5e8 <__gethex+0x424>
 800d5e0:	4b1a      	ldr	r3, [pc, #104]	; (800d64c <__gethex+0x488>)
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	2184      	movs	r1, #132	; 0x84
 800d5e6:	e6a8      	b.n	800d33a <__gethex+0x176>
 800d5e8:	6922      	ldr	r2, [r4, #16]
 800d5ea:	3202      	adds	r2, #2
 800d5ec:	f104 010c 	add.w	r1, r4, #12
 800d5f0:	0092      	lsls	r2, r2, #2
 800d5f2:	300c      	adds	r0, #12
 800d5f4:	f000 f90c 	bl	800d810 <memcpy>
 800d5f8:	4621      	mov	r1, r4
 800d5fa:	ee18 0a10 	vmov	r0, s16
 800d5fe:	f000 f955 	bl	800d8ac <_Bfree>
 800d602:	464c      	mov	r4, r9
 800d604:	6923      	ldr	r3, [r4, #16]
 800d606:	1c5a      	adds	r2, r3, #1
 800d608:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d60c:	6122      	str	r2, [r4, #16]
 800d60e:	2201      	movs	r2, #1
 800d610:	615a      	str	r2, [r3, #20]
 800d612:	e7bb      	b.n	800d58c <__gethex+0x3c8>
 800d614:	6922      	ldr	r2, [r4, #16]
 800d616:	455a      	cmp	r2, fp
 800d618:	dd0b      	ble.n	800d632 <__gethex+0x46e>
 800d61a:	2101      	movs	r1, #1
 800d61c:	4620      	mov	r0, r4
 800d61e:	f7ff fd69 	bl	800d0f4 <rshift>
 800d622:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d626:	3501      	adds	r5, #1
 800d628:	42ab      	cmp	r3, r5
 800d62a:	f6ff aed0 	blt.w	800d3ce <__gethex+0x20a>
 800d62e:	2701      	movs	r7, #1
 800d630:	e7c0      	b.n	800d5b4 <__gethex+0x3f0>
 800d632:	f016 061f 	ands.w	r6, r6, #31
 800d636:	d0fa      	beq.n	800d62e <__gethex+0x46a>
 800d638:	4453      	add	r3, sl
 800d63a:	f1c6 0620 	rsb	r6, r6, #32
 800d63e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d642:	f000 f9e5 	bl	800da10 <__hi0bits>
 800d646:	42b0      	cmp	r0, r6
 800d648:	dbe7      	blt.n	800d61a <__gethex+0x456>
 800d64a:	e7f0      	b.n	800d62e <__gethex+0x46a>
 800d64c:	0800f8a0 	.word	0x0800f8a0

0800d650 <L_shift>:
 800d650:	f1c2 0208 	rsb	r2, r2, #8
 800d654:	0092      	lsls	r2, r2, #2
 800d656:	b570      	push	{r4, r5, r6, lr}
 800d658:	f1c2 0620 	rsb	r6, r2, #32
 800d65c:	6843      	ldr	r3, [r0, #4]
 800d65e:	6804      	ldr	r4, [r0, #0]
 800d660:	fa03 f506 	lsl.w	r5, r3, r6
 800d664:	432c      	orrs	r4, r5
 800d666:	40d3      	lsrs	r3, r2
 800d668:	6004      	str	r4, [r0, #0]
 800d66a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d66e:	4288      	cmp	r0, r1
 800d670:	d3f4      	bcc.n	800d65c <L_shift+0xc>
 800d672:	bd70      	pop	{r4, r5, r6, pc}

0800d674 <__match>:
 800d674:	b530      	push	{r4, r5, lr}
 800d676:	6803      	ldr	r3, [r0, #0]
 800d678:	3301      	adds	r3, #1
 800d67a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d67e:	b914      	cbnz	r4, 800d686 <__match+0x12>
 800d680:	6003      	str	r3, [r0, #0]
 800d682:	2001      	movs	r0, #1
 800d684:	bd30      	pop	{r4, r5, pc}
 800d686:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d68a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d68e:	2d19      	cmp	r5, #25
 800d690:	bf98      	it	ls
 800d692:	3220      	addls	r2, #32
 800d694:	42a2      	cmp	r2, r4
 800d696:	d0f0      	beq.n	800d67a <__match+0x6>
 800d698:	2000      	movs	r0, #0
 800d69a:	e7f3      	b.n	800d684 <__match+0x10>

0800d69c <__hexnan>:
 800d69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a0:	680b      	ldr	r3, [r1, #0]
 800d6a2:	115e      	asrs	r6, r3, #5
 800d6a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d6a8:	f013 031f 	ands.w	r3, r3, #31
 800d6ac:	b087      	sub	sp, #28
 800d6ae:	bf18      	it	ne
 800d6b0:	3604      	addne	r6, #4
 800d6b2:	2500      	movs	r5, #0
 800d6b4:	1f37      	subs	r7, r6, #4
 800d6b6:	4690      	mov	r8, r2
 800d6b8:	6802      	ldr	r2, [r0, #0]
 800d6ba:	9301      	str	r3, [sp, #4]
 800d6bc:	4682      	mov	sl, r0
 800d6be:	f846 5c04 	str.w	r5, [r6, #-4]
 800d6c2:	46b9      	mov	r9, r7
 800d6c4:	463c      	mov	r4, r7
 800d6c6:	9502      	str	r5, [sp, #8]
 800d6c8:	46ab      	mov	fp, r5
 800d6ca:	7851      	ldrb	r1, [r2, #1]
 800d6cc:	1c53      	adds	r3, r2, #1
 800d6ce:	9303      	str	r3, [sp, #12]
 800d6d0:	b341      	cbz	r1, 800d724 <__hexnan+0x88>
 800d6d2:	4608      	mov	r0, r1
 800d6d4:	9205      	str	r2, [sp, #20]
 800d6d6:	9104      	str	r1, [sp, #16]
 800d6d8:	f7ff fd5e 	bl	800d198 <__hexdig_fun>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d14f      	bne.n	800d780 <__hexnan+0xe4>
 800d6e0:	9904      	ldr	r1, [sp, #16]
 800d6e2:	9a05      	ldr	r2, [sp, #20]
 800d6e4:	2920      	cmp	r1, #32
 800d6e6:	d818      	bhi.n	800d71a <__hexnan+0x7e>
 800d6e8:	9b02      	ldr	r3, [sp, #8]
 800d6ea:	459b      	cmp	fp, r3
 800d6ec:	dd13      	ble.n	800d716 <__hexnan+0x7a>
 800d6ee:	454c      	cmp	r4, r9
 800d6f0:	d206      	bcs.n	800d700 <__hexnan+0x64>
 800d6f2:	2d07      	cmp	r5, #7
 800d6f4:	dc04      	bgt.n	800d700 <__hexnan+0x64>
 800d6f6:	462a      	mov	r2, r5
 800d6f8:	4649      	mov	r1, r9
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	f7ff ffa8 	bl	800d650 <L_shift>
 800d700:	4544      	cmp	r4, r8
 800d702:	d950      	bls.n	800d7a6 <__hexnan+0x10a>
 800d704:	2300      	movs	r3, #0
 800d706:	f1a4 0904 	sub.w	r9, r4, #4
 800d70a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d70e:	f8cd b008 	str.w	fp, [sp, #8]
 800d712:	464c      	mov	r4, r9
 800d714:	461d      	mov	r5, r3
 800d716:	9a03      	ldr	r2, [sp, #12]
 800d718:	e7d7      	b.n	800d6ca <__hexnan+0x2e>
 800d71a:	2929      	cmp	r1, #41	; 0x29
 800d71c:	d156      	bne.n	800d7cc <__hexnan+0x130>
 800d71e:	3202      	adds	r2, #2
 800d720:	f8ca 2000 	str.w	r2, [sl]
 800d724:	f1bb 0f00 	cmp.w	fp, #0
 800d728:	d050      	beq.n	800d7cc <__hexnan+0x130>
 800d72a:	454c      	cmp	r4, r9
 800d72c:	d206      	bcs.n	800d73c <__hexnan+0xa0>
 800d72e:	2d07      	cmp	r5, #7
 800d730:	dc04      	bgt.n	800d73c <__hexnan+0xa0>
 800d732:	462a      	mov	r2, r5
 800d734:	4649      	mov	r1, r9
 800d736:	4620      	mov	r0, r4
 800d738:	f7ff ff8a 	bl	800d650 <L_shift>
 800d73c:	4544      	cmp	r4, r8
 800d73e:	d934      	bls.n	800d7aa <__hexnan+0x10e>
 800d740:	f1a8 0204 	sub.w	r2, r8, #4
 800d744:	4623      	mov	r3, r4
 800d746:	f853 1b04 	ldr.w	r1, [r3], #4
 800d74a:	f842 1f04 	str.w	r1, [r2, #4]!
 800d74e:	429f      	cmp	r7, r3
 800d750:	d2f9      	bcs.n	800d746 <__hexnan+0xaa>
 800d752:	1b3b      	subs	r3, r7, r4
 800d754:	f023 0303 	bic.w	r3, r3, #3
 800d758:	3304      	adds	r3, #4
 800d75a:	3401      	adds	r4, #1
 800d75c:	3e03      	subs	r6, #3
 800d75e:	42b4      	cmp	r4, r6
 800d760:	bf88      	it	hi
 800d762:	2304      	movhi	r3, #4
 800d764:	4443      	add	r3, r8
 800d766:	2200      	movs	r2, #0
 800d768:	f843 2b04 	str.w	r2, [r3], #4
 800d76c:	429f      	cmp	r7, r3
 800d76e:	d2fb      	bcs.n	800d768 <__hexnan+0xcc>
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	b91b      	cbnz	r3, 800d77c <__hexnan+0xe0>
 800d774:	4547      	cmp	r7, r8
 800d776:	d127      	bne.n	800d7c8 <__hexnan+0x12c>
 800d778:	2301      	movs	r3, #1
 800d77a:	603b      	str	r3, [r7, #0]
 800d77c:	2005      	movs	r0, #5
 800d77e:	e026      	b.n	800d7ce <__hexnan+0x132>
 800d780:	3501      	adds	r5, #1
 800d782:	2d08      	cmp	r5, #8
 800d784:	f10b 0b01 	add.w	fp, fp, #1
 800d788:	dd06      	ble.n	800d798 <__hexnan+0xfc>
 800d78a:	4544      	cmp	r4, r8
 800d78c:	d9c3      	bls.n	800d716 <__hexnan+0x7a>
 800d78e:	2300      	movs	r3, #0
 800d790:	f844 3c04 	str.w	r3, [r4, #-4]
 800d794:	2501      	movs	r5, #1
 800d796:	3c04      	subs	r4, #4
 800d798:	6822      	ldr	r2, [r4, #0]
 800d79a:	f000 000f 	and.w	r0, r0, #15
 800d79e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d7a2:	6022      	str	r2, [r4, #0]
 800d7a4:	e7b7      	b.n	800d716 <__hexnan+0x7a>
 800d7a6:	2508      	movs	r5, #8
 800d7a8:	e7b5      	b.n	800d716 <__hexnan+0x7a>
 800d7aa:	9b01      	ldr	r3, [sp, #4]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d0df      	beq.n	800d770 <__hexnan+0xd4>
 800d7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b4:	f1c3 0320 	rsb	r3, r3, #32
 800d7b8:	fa22 f303 	lsr.w	r3, r2, r3
 800d7bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d7c0:	401a      	ands	r2, r3
 800d7c2:	f846 2c04 	str.w	r2, [r6, #-4]
 800d7c6:	e7d3      	b.n	800d770 <__hexnan+0xd4>
 800d7c8:	3f04      	subs	r7, #4
 800d7ca:	e7d1      	b.n	800d770 <__hexnan+0xd4>
 800d7cc:	2004      	movs	r0, #4
 800d7ce:	b007      	add	sp, #28
 800d7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d7d4 <_localeconv_r>:
 800d7d4:	4800      	ldr	r0, [pc, #0]	; (800d7d8 <_localeconv_r+0x4>)
 800d7d6:	4770      	bx	lr
 800d7d8:	24000168 	.word	0x24000168

0800d7dc <malloc>:
 800d7dc:	4b02      	ldr	r3, [pc, #8]	; (800d7e8 <malloc+0xc>)
 800d7de:	4601      	mov	r1, r0
 800d7e0:	6818      	ldr	r0, [r3, #0]
 800d7e2:	f000 bd63 	b.w	800e2ac <_malloc_r>
 800d7e6:	bf00      	nop
 800d7e8:	24000010 	.word	0x24000010

0800d7ec <__ascii_mbtowc>:
 800d7ec:	b082      	sub	sp, #8
 800d7ee:	b901      	cbnz	r1, 800d7f2 <__ascii_mbtowc+0x6>
 800d7f0:	a901      	add	r1, sp, #4
 800d7f2:	b142      	cbz	r2, 800d806 <__ascii_mbtowc+0x1a>
 800d7f4:	b14b      	cbz	r3, 800d80a <__ascii_mbtowc+0x1e>
 800d7f6:	7813      	ldrb	r3, [r2, #0]
 800d7f8:	600b      	str	r3, [r1, #0]
 800d7fa:	7812      	ldrb	r2, [r2, #0]
 800d7fc:	1e10      	subs	r0, r2, #0
 800d7fe:	bf18      	it	ne
 800d800:	2001      	movne	r0, #1
 800d802:	b002      	add	sp, #8
 800d804:	4770      	bx	lr
 800d806:	4610      	mov	r0, r2
 800d808:	e7fb      	b.n	800d802 <__ascii_mbtowc+0x16>
 800d80a:	f06f 0001 	mvn.w	r0, #1
 800d80e:	e7f8      	b.n	800d802 <__ascii_mbtowc+0x16>

0800d810 <memcpy>:
 800d810:	440a      	add	r2, r1
 800d812:	4291      	cmp	r1, r2
 800d814:	f100 33ff 	add.w	r3, r0, #4294967295
 800d818:	d100      	bne.n	800d81c <memcpy+0xc>
 800d81a:	4770      	bx	lr
 800d81c:	b510      	push	{r4, lr}
 800d81e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d822:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d826:	4291      	cmp	r1, r2
 800d828:	d1f9      	bne.n	800d81e <memcpy+0xe>
 800d82a:	bd10      	pop	{r4, pc}

0800d82c <_Balloc>:
 800d82c:	b570      	push	{r4, r5, r6, lr}
 800d82e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d830:	4604      	mov	r4, r0
 800d832:	460d      	mov	r5, r1
 800d834:	b976      	cbnz	r6, 800d854 <_Balloc+0x28>
 800d836:	2010      	movs	r0, #16
 800d838:	f7ff ffd0 	bl	800d7dc <malloc>
 800d83c:	4602      	mov	r2, r0
 800d83e:	6260      	str	r0, [r4, #36]	; 0x24
 800d840:	b920      	cbnz	r0, 800d84c <_Balloc+0x20>
 800d842:	4b18      	ldr	r3, [pc, #96]	; (800d8a4 <_Balloc+0x78>)
 800d844:	4818      	ldr	r0, [pc, #96]	; (800d8a8 <_Balloc+0x7c>)
 800d846:	2166      	movs	r1, #102	; 0x66
 800d848:	f000 ff3c 	bl	800e6c4 <__assert_func>
 800d84c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d850:	6006      	str	r6, [r0, #0]
 800d852:	60c6      	str	r6, [r0, #12]
 800d854:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d856:	68f3      	ldr	r3, [r6, #12]
 800d858:	b183      	cbz	r3, 800d87c <_Balloc+0x50>
 800d85a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d862:	b9b8      	cbnz	r0, 800d894 <_Balloc+0x68>
 800d864:	2101      	movs	r1, #1
 800d866:	fa01 f605 	lsl.w	r6, r1, r5
 800d86a:	1d72      	adds	r2, r6, #5
 800d86c:	0092      	lsls	r2, r2, #2
 800d86e:	4620      	mov	r0, r4
 800d870:	f000 fc9a 	bl	800e1a8 <_calloc_r>
 800d874:	b160      	cbz	r0, 800d890 <_Balloc+0x64>
 800d876:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d87a:	e00e      	b.n	800d89a <_Balloc+0x6e>
 800d87c:	2221      	movs	r2, #33	; 0x21
 800d87e:	2104      	movs	r1, #4
 800d880:	4620      	mov	r0, r4
 800d882:	f000 fc91 	bl	800e1a8 <_calloc_r>
 800d886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d888:	60f0      	str	r0, [r6, #12]
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d1e4      	bne.n	800d85a <_Balloc+0x2e>
 800d890:	2000      	movs	r0, #0
 800d892:	bd70      	pop	{r4, r5, r6, pc}
 800d894:	6802      	ldr	r2, [r0, #0]
 800d896:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d89a:	2300      	movs	r3, #0
 800d89c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d8a0:	e7f7      	b.n	800d892 <_Balloc+0x66>
 800d8a2:	bf00      	nop
 800d8a4:	0800f82e 	.word	0x0800f82e
 800d8a8:	0800f92c 	.word	0x0800f92c

0800d8ac <_Bfree>:
 800d8ac:	b570      	push	{r4, r5, r6, lr}
 800d8ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d8b0:	4605      	mov	r5, r0
 800d8b2:	460c      	mov	r4, r1
 800d8b4:	b976      	cbnz	r6, 800d8d4 <_Bfree+0x28>
 800d8b6:	2010      	movs	r0, #16
 800d8b8:	f7ff ff90 	bl	800d7dc <malloc>
 800d8bc:	4602      	mov	r2, r0
 800d8be:	6268      	str	r0, [r5, #36]	; 0x24
 800d8c0:	b920      	cbnz	r0, 800d8cc <_Bfree+0x20>
 800d8c2:	4b09      	ldr	r3, [pc, #36]	; (800d8e8 <_Bfree+0x3c>)
 800d8c4:	4809      	ldr	r0, [pc, #36]	; (800d8ec <_Bfree+0x40>)
 800d8c6:	218a      	movs	r1, #138	; 0x8a
 800d8c8:	f000 fefc 	bl	800e6c4 <__assert_func>
 800d8cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8d0:	6006      	str	r6, [r0, #0]
 800d8d2:	60c6      	str	r6, [r0, #12]
 800d8d4:	b13c      	cbz	r4, 800d8e6 <_Bfree+0x3a>
 800d8d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d8d8:	6862      	ldr	r2, [r4, #4]
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d8e0:	6021      	str	r1, [r4, #0]
 800d8e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d8e6:	bd70      	pop	{r4, r5, r6, pc}
 800d8e8:	0800f82e 	.word	0x0800f82e
 800d8ec:	0800f92c 	.word	0x0800f92c

0800d8f0 <__multadd>:
 800d8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8f4:	690d      	ldr	r5, [r1, #16]
 800d8f6:	4607      	mov	r7, r0
 800d8f8:	460c      	mov	r4, r1
 800d8fa:	461e      	mov	r6, r3
 800d8fc:	f101 0c14 	add.w	ip, r1, #20
 800d900:	2000      	movs	r0, #0
 800d902:	f8dc 3000 	ldr.w	r3, [ip]
 800d906:	b299      	uxth	r1, r3
 800d908:	fb02 6101 	mla	r1, r2, r1, r6
 800d90c:	0c1e      	lsrs	r6, r3, #16
 800d90e:	0c0b      	lsrs	r3, r1, #16
 800d910:	fb02 3306 	mla	r3, r2, r6, r3
 800d914:	b289      	uxth	r1, r1
 800d916:	3001      	adds	r0, #1
 800d918:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d91c:	4285      	cmp	r5, r0
 800d91e:	f84c 1b04 	str.w	r1, [ip], #4
 800d922:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d926:	dcec      	bgt.n	800d902 <__multadd+0x12>
 800d928:	b30e      	cbz	r6, 800d96e <__multadd+0x7e>
 800d92a:	68a3      	ldr	r3, [r4, #8]
 800d92c:	42ab      	cmp	r3, r5
 800d92e:	dc19      	bgt.n	800d964 <__multadd+0x74>
 800d930:	6861      	ldr	r1, [r4, #4]
 800d932:	4638      	mov	r0, r7
 800d934:	3101      	adds	r1, #1
 800d936:	f7ff ff79 	bl	800d82c <_Balloc>
 800d93a:	4680      	mov	r8, r0
 800d93c:	b928      	cbnz	r0, 800d94a <__multadd+0x5a>
 800d93e:	4602      	mov	r2, r0
 800d940:	4b0c      	ldr	r3, [pc, #48]	; (800d974 <__multadd+0x84>)
 800d942:	480d      	ldr	r0, [pc, #52]	; (800d978 <__multadd+0x88>)
 800d944:	21b5      	movs	r1, #181	; 0xb5
 800d946:	f000 febd 	bl	800e6c4 <__assert_func>
 800d94a:	6922      	ldr	r2, [r4, #16]
 800d94c:	3202      	adds	r2, #2
 800d94e:	f104 010c 	add.w	r1, r4, #12
 800d952:	0092      	lsls	r2, r2, #2
 800d954:	300c      	adds	r0, #12
 800d956:	f7ff ff5b 	bl	800d810 <memcpy>
 800d95a:	4621      	mov	r1, r4
 800d95c:	4638      	mov	r0, r7
 800d95e:	f7ff ffa5 	bl	800d8ac <_Bfree>
 800d962:	4644      	mov	r4, r8
 800d964:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d968:	3501      	adds	r5, #1
 800d96a:	615e      	str	r6, [r3, #20]
 800d96c:	6125      	str	r5, [r4, #16]
 800d96e:	4620      	mov	r0, r4
 800d970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d974:	0800f8a0 	.word	0x0800f8a0
 800d978:	0800f92c 	.word	0x0800f92c

0800d97c <__s2b>:
 800d97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d980:	460c      	mov	r4, r1
 800d982:	4615      	mov	r5, r2
 800d984:	461f      	mov	r7, r3
 800d986:	2209      	movs	r2, #9
 800d988:	3308      	adds	r3, #8
 800d98a:	4606      	mov	r6, r0
 800d98c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d990:	2100      	movs	r1, #0
 800d992:	2201      	movs	r2, #1
 800d994:	429a      	cmp	r2, r3
 800d996:	db09      	blt.n	800d9ac <__s2b+0x30>
 800d998:	4630      	mov	r0, r6
 800d99a:	f7ff ff47 	bl	800d82c <_Balloc>
 800d99e:	b940      	cbnz	r0, 800d9b2 <__s2b+0x36>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	4b19      	ldr	r3, [pc, #100]	; (800da08 <__s2b+0x8c>)
 800d9a4:	4819      	ldr	r0, [pc, #100]	; (800da0c <__s2b+0x90>)
 800d9a6:	21ce      	movs	r1, #206	; 0xce
 800d9a8:	f000 fe8c 	bl	800e6c4 <__assert_func>
 800d9ac:	0052      	lsls	r2, r2, #1
 800d9ae:	3101      	adds	r1, #1
 800d9b0:	e7f0      	b.n	800d994 <__s2b+0x18>
 800d9b2:	9b08      	ldr	r3, [sp, #32]
 800d9b4:	6143      	str	r3, [r0, #20]
 800d9b6:	2d09      	cmp	r5, #9
 800d9b8:	f04f 0301 	mov.w	r3, #1
 800d9bc:	6103      	str	r3, [r0, #16]
 800d9be:	dd16      	ble.n	800d9ee <__s2b+0x72>
 800d9c0:	f104 0909 	add.w	r9, r4, #9
 800d9c4:	46c8      	mov	r8, r9
 800d9c6:	442c      	add	r4, r5
 800d9c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d9cc:	4601      	mov	r1, r0
 800d9ce:	3b30      	subs	r3, #48	; 0x30
 800d9d0:	220a      	movs	r2, #10
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	f7ff ff8c 	bl	800d8f0 <__multadd>
 800d9d8:	45a0      	cmp	r8, r4
 800d9da:	d1f5      	bne.n	800d9c8 <__s2b+0x4c>
 800d9dc:	f1a5 0408 	sub.w	r4, r5, #8
 800d9e0:	444c      	add	r4, r9
 800d9e2:	1b2d      	subs	r5, r5, r4
 800d9e4:	1963      	adds	r3, r4, r5
 800d9e6:	42bb      	cmp	r3, r7
 800d9e8:	db04      	blt.n	800d9f4 <__s2b+0x78>
 800d9ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9ee:	340a      	adds	r4, #10
 800d9f0:	2509      	movs	r5, #9
 800d9f2:	e7f6      	b.n	800d9e2 <__s2b+0x66>
 800d9f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d9f8:	4601      	mov	r1, r0
 800d9fa:	3b30      	subs	r3, #48	; 0x30
 800d9fc:	220a      	movs	r2, #10
 800d9fe:	4630      	mov	r0, r6
 800da00:	f7ff ff76 	bl	800d8f0 <__multadd>
 800da04:	e7ee      	b.n	800d9e4 <__s2b+0x68>
 800da06:	bf00      	nop
 800da08:	0800f8a0 	.word	0x0800f8a0
 800da0c:	0800f92c 	.word	0x0800f92c

0800da10 <__hi0bits>:
 800da10:	0c03      	lsrs	r3, r0, #16
 800da12:	041b      	lsls	r3, r3, #16
 800da14:	b9d3      	cbnz	r3, 800da4c <__hi0bits+0x3c>
 800da16:	0400      	lsls	r0, r0, #16
 800da18:	2310      	movs	r3, #16
 800da1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800da1e:	bf04      	itt	eq
 800da20:	0200      	lsleq	r0, r0, #8
 800da22:	3308      	addeq	r3, #8
 800da24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800da28:	bf04      	itt	eq
 800da2a:	0100      	lsleq	r0, r0, #4
 800da2c:	3304      	addeq	r3, #4
 800da2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800da32:	bf04      	itt	eq
 800da34:	0080      	lsleq	r0, r0, #2
 800da36:	3302      	addeq	r3, #2
 800da38:	2800      	cmp	r0, #0
 800da3a:	db05      	blt.n	800da48 <__hi0bits+0x38>
 800da3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800da40:	f103 0301 	add.w	r3, r3, #1
 800da44:	bf08      	it	eq
 800da46:	2320      	moveq	r3, #32
 800da48:	4618      	mov	r0, r3
 800da4a:	4770      	bx	lr
 800da4c:	2300      	movs	r3, #0
 800da4e:	e7e4      	b.n	800da1a <__hi0bits+0xa>

0800da50 <__lo0bits>:
 800da50:	6803      	ldr	r3, [r0, #0]
 800da52:	f013 0207 	ands.w	r2, r3, #7
 800da56:	4601      	mov	r1, r0
 800da58:	d00b      	beq.n	800da72 <__lo0bits+0x22>
 800da5a:	07da      	lsls	r2, r3, #31
 800da5c:	d423      	bmi.n	800daa6 <__lo0bits+0x56>
 800da5e:	0798      	lsls	r0, r3, #30
 800da60:	bf49      	itett	mi
 800da62:	085b      	lsrmi	r3, r3, #1
 800da64:	089b      	lsrpl	r3, r3, #2
 800da66:	2001      	movmi	r0, #1
 800da68:	600b      	strmi	r3, [r1, #0]
 800da6a:	bf5c      	itt	pl
 800da6c:	600b      	strpl	r3, [r1, #0]
 800da6e:	2002      	movpl	r0, #2
 800da70:	4770      	bx	lr
 800da72:	b298      	uxth	r0, r3
 800da74:	b9a8      	cbnz	r0, 800daa2 <__lo0bits+0x52>
 800da76:	0c1b      	lsrs	r3, r3, #16
 800da78:	2010      	movs	r0, #16
 800da7a:	b2da      	uxtb	r2, r3
 800da7c:	b90a      	cbnz	r2, 800da82 <__lo0bits+0x32>
 800da7e:	3008      	adds	r0, #8
 800da80:	0a1b      	lsrs	r3, r3, #8
 800da82:	071a      	lsls	r2, r3, #28
 800da84:	bf04      	itt	eq
 800da86:	091b      	lsreq	r3, r3, #4
 800da88:	3004      	addeq	r0, #4
 800da8a:	079a      	lsls	r2, r3, #30
 800da8c:	bf04      	itt	eq
 800da8e:	089b      	lsreq	r3, r3, #2
 800da90:	3002      	addeq	r0, #2
 800da92:	07da      	lsls	r2, r3, #31
 800da94:	d403      	bmi.n	800da9e <__lo0bits+0x4e>
 800da96:	085b      	lsrs	r3, r3, #1
 800da98:	f100 0001 	add.w	r0, r0, #1
 800da9c:	d005      	beq.n	800daaa <__lo0bits+0x5a>
 800da9e:	600b      	str	r3, [r1, #0]
 800daa0:	4770      	bx	lr
 800daa2:	4610      	mov	r0, r2
 800daa4:	e7e9      	b.n	800da7a <__lo0bits+0x2a>
 800daa6:	2000      	movs	r0, #0
 800daa8:	4770      	bx	lr
 800daaa:	2020      	movs	r0, #32
 800daac:	4770      	bx	lr
	...

0800dab0 <__i2b>:
 800dab0:	b510      	push	{r4, lr}
 800dab2:	460c      	mov	r4, r1
 800dab4:	2101      	movs	r1, #1
 800dab6:	f7ff feb9 	bl	800d82c <_Balloc>
 800daba:	4602      	mov	r2, r0
 800dabc:	b928      	cbnz	r0, 800daca <__i2b+0x1a>
 800dabe:	4b05      	ldr	r3, [pc, #20]	; (800dad4 <__i2b+0x24>)
 800dac0:	4805      	ldr	r0, [pc, #20]	; (800dad8 <__i2b+0x28>)
 800dac2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dac6:	f000 fdfd 	bl	800e6c4 <__assert_func>
 800daca:	2301      	movs	r3, #1
 800dacc:	6144      	str	r4, [r0, #20]
 800dace:	6103      	str	r3, [r0, #16]
 800dad0:	bd10      	pop	{r4, pc}
 800dad2:	bf00      	nop
 800dad4:	0800f8a0 	.word	0x0800f8a0
 800dad8:	0800f92c 	.word	0x0800f92c

0800dadc <__multiply>:
 800dadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae0:	4691      	mov	r9, r2
 800dae2:	690a      	ldr	r2, [r1, #16]
 800dae4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dae8:	429a      	cmp	r2, r3
 800daea:	bfb8      	it	lt
 800daec:	460b      	movlt	r3, r1
 800daee:	460c      	mov	r4, r1
 800daf0:	bfbc      	itt	lt
 800daf2:	464c      	movlt	r4, r9
 800daf4:	4699      	movlt	r9, r3
 800daf6:	6927      	ldr	r7, [r4, #16]
 800daf8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dafc:	68a3      	ldr	r3, [r4, #8]
 800dafe:	6861      	ldr	r1, [r4, #4]
 800db00:	eb07 060a 	add.w	r6, r7, sl
 800db04:	42b3      	cmp	r3, r6
 800db06:	b085      	sub	sp, #20
 800db08:	bfb8      	it	lt
 800db0a:	3101      	addlt	r1, #1
 800db0c:	f7ff fe8e 	bl	800d82c <_Balloc>
 800db10:	b930      	cbnz	r0, 800db20 <__multiply+0x44>
 800db12:	4602      	mov	r2, r0
 800db14:	4b44      	ldr	r3, [pc, #272]	; (800dc28 <__multiply+0x14c>)
 800db16:	4845      	ldr	r0, [pc, #276]	; (800dc2c <__multiply+0x150>)
 800db18:	f240 115d 	movw	r1, #349	; 0x15d
 800db1c:	f000 fdd2 	bl	800e6c4 <__assert_func>
 800db20:	f100 0514 	add.w	r5, r0, #20
 800db24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800db28:	462b      	mov	r3, r5
 800db2a:	2200      	movs	r2, #0
 800db2c:	4543      	cmp	r3, r8
 800db2e:	d321      	bcc.n	800db74 <__multiply+0x98>
 800db30:	f104 0314 	add.w	r3, r4, #20
 800db34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800db38:	f109 0314 	add.w	r3, r9, #20
 800db3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800db40:	9202      	str	r2, [sp, #8]
 800db42:	1b3a      	subs	r2, r7, r4
 800db44:	3a15      	subs	r2, #21
 800db46:	f022 0203 	bic.w	r2, r2, #3
 800db4a:	3204      	adds	r2, #4
 800db4c:	f104 0115 	add.w	r1, r4, #21
 800db50:	428f      	cmp	r7, r1
 800db52:	bf38      	it	cc
 800db54:	2204      	movcc	r2, #4
 800db56:	9201      	str	r2, [sp, #4]
 800db58:	9a02      	ldr	r2, [sp, #8]
 800db5a:	9303      	str	r3, [sp, #12]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d80c      	bhi.n	800db7a <__multiply+0x9e>
 800db60:	2e00      	cmp	r6, #0
 800db62:	dd03      	ble.n	800db6c <__multiply+0x90>
 800db64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d05a      	beq.n	800dc22 <__multiply+0x146>
 800db6c:	6106      	str	r6, [r0, #16]
 800db6e:	b005      	add	sp, #20
 800db70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db74:	f843 2b04 	str.w	r2, [r3], #4
 800db78:	e7d8      	b.n	800db2c <__multiply+0x50>
 800db7a:	f8b3 a000 	ldrh.w	sl, [r3]
 800db7e:	f1ba 0f00 	cmp.w	sl, #0
 800db82:	d024      	beq.n	800dbce <__multiply+0xf2>
 800db84:	f104 0e14 	add.w	lr, r4, #20
 800db88:	46a9      	mov	r9, r5
 800db8a:	f04f 0c00 	mov.w	ip, #0
 800db8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800db92:	f8d9 1000 	ldr.w	r1, [r9]
 800db96:	fa1f fb82 	uxth.w	fp, r2
 800db9a:	b289      	uxth	r1, r1
 800db9c:	fb0a 110b 	mla	r1, sl, fp, r1
 800dba0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dba4:	f8d9 2000 	ldr.w	r2, [r9]
 800dba8:	4461      	add	r1, ip
 800dbaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dbae:	fb0a c20b 	mla	r2, sl, fp, ip
 800dbb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dbb6:	b289      	uxth	r1, r1
 800dbb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dbbc:	4577      	cmp	r7, lr
 800dbbe:	f849 1b04 	str.w	r1, [r9], #4
 800dbc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dbc6:	d8e2      	bhi.n	800db8e <__multiply+0xb2>
 800dbc8:	9a01      	ldr	r2, [sp, #4]
 800dbca:	f845 c002 	str.w	ip, [r5, r2]
 800dbce:	9a03      	ldr	r2, [sp, #12]
 800dbd0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dbd4:	3304      	adds	r3, #4
 800dbd6:	f1b9 0f00 	cmp.w	r9, #0
 800dbda:	d020      	beq.n	800dc1e <__multiply+0x142>
 800dbdc:	6829      	ldr	r1, [r5, #0]
 800dbde:	f104 0c14 	add.w	ip, r4, #20
 800dbe2:	46ae      	mov	lr, r5
 800dbe4:	f04f 0a00 	mov.w	sl, #0
 800dbe8:	f8bc b000 	ldrh.w	fp, [ip]
 800dbec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dbf0:	fb09 220b 	mla	r2, r9, fp, r2
 800dbf4:	4492      	add	sl, r2
 800dbf6:	b289      	uxth	r1, r1
 800dbf8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dbfc:	f84e 1b04 	str.w	r1, [lr], #4
 800dc00:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dc04:	f8be 1000 	ldrh.w	r1, [lr]
 800dc08:	0c12      	lsrs	r2, r2, #16
 800dc0a:	fb09 1102 	mla	r1, r9, r2, r1
 800dc0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dc12:	4567      	cmp	r7, ip
 800dc14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dc18:	d8e6      	bhi.n	800dbe8 <__multiply+0x10c>
 800dc1a:	9a01      	ldr	r2, [sp, #4]
 800dc1c:	50a9      	str	r1, [r5, r2]
 800dc1e:	3504      	adds	r5, #4
 800dc20:	e79a      	b.n	800db58 <__multiply+0x7c>
 800dc22:	3e01      	subs	r6, #1
 800dc24:	e79c      	b.n	800db60 <__multiply+0x84>
 800dc26:	bf00      	nop
 800dc28:	0800f8a0 	.word	0x0800f8a0
 800dc2c:	0800f92c 	.word	0x0800f92c

0800dc30 <__pow5mult>:
 800dc30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc34:	4615      	mov	r5, r2
 800dc36:	f012 0203 	ands.w	r2, r2, #3
 800dc3a:	4606      	mov	r6, r0
 800dc3c:	460f      	mov	r7, r1
 800dc3e:	d007      	beq.n	800dc50 <__pow5mult+0x20>
 800dc40:	4c25      	ldr	r4, [pc, #148]	; (800dcd8 <__pow5mult+0xa8>)
 800dc42:	3a01      	subs	r2, #1
 800dc44:	2300      	movs	r3, #0
 800dc46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc4a:	f7ff fe51 	bl	800d8f0 <__multadd>
 800dc4e:	4607      	mov	r7, r0
 800dc50:	10ad      	asrs	r5, r5, #2
 800dc52:	d03d      	beq.n	800dcd0 <__pow5mult+0xa0>
 800dc54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dc56:	b97c      	cbnz	r4, 800dc78 <__pow5mult+0x48>
 800dc58:	2010      	movs	r0, #16
 800dc5a:	f7ff fdbf 	bl	800d7dc <malloc>
 800dc5e:	4602      	mov	r2, r0
 800dc60:	6270      	str	r0, [r6, #36]	; 0x24
 800dc62:	b928      	cbnz	r0, 800dc70 <__pow5mult+0x40>
 800dc64:	4b1d      	ldr	r3, [pc, #116]	; (800dcdc <__pow5mult+0xac>)
 800dc66:	481e      	ldr	r0, [pc, #120]	; (800dce0 <__pow5mult+0xb0>)
 800dc68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dc6c:	f000 fd2a 	bl	800e6c4 <__assert_func>
 800dc70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc74:	6004      	str	r4, [r0, #0]
 800dc76:	60c4      	str	r4, [r0, #12]
 800dc78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dc7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dc80:	b94c      	cbnz	r4, 800dc96 <__pow5mult+0x66>
 800dc82:	f240 2171 	movw	r1, #625	; 0x271
 800dc86:	4630      	mov	r0, r6
 800dc88:	f7ff ff12 	bl	800dab0 <__i2b>
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800dc92:	4604      	mov	r4, r0
 800dc94:	6003      	str	r3, [r0, #0]
 800dc96:	f04f 0900 	mov.w	r9, #0
 800dc9a:	07eb      	lsls	r3, r5, #31
 800dc9c:	d50a      	bpl.n	800dcb4 <__pow5mult+0x84>
 800dc9e:	4639      	mov	r1, r7
 800dca0:	4622      	mov	r2, r4
 800dca2:	4630      	mov	r0, r6
 800dca4:	f7ff ff1a 	bl	800dadc <__multiply>
 800dca8:	4639      	mov	r1, r7
 800dcaa:	4680      	mov	r8, r0
 800dcac:	4630      	mov	r0, r6
 800dcae:	f7ff fdfd 	bl	800d8ac <_Bfree>
 800dcb2:	4647      	mov	r7, r8
 800dcb4:	106d      	asrs	r5, r5, #1
 800dcb6:	d00b      	beq.n	800dcd0 <__pow5mult+0xa0>
 800dcb8:	6820      	ldr	r0, [r4, #0]
 800dcba:	b938      	cbnz	r0, 800dccc <__pow5mult+0x9c>
 800dcbc:	4622      	mov	r2, r4
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	f7ff ff0b 	bl	800dadc <__multiply>
 800dcc6:	6020      	str	r0, [r4, #0]
 800dcc8:	f8c0 9000 	str.w	r9, [r0]
 800dccc:	4604      	mov	r4, r0
 800dcce:	e7e4      	b.n	800dc9a <__pow5mult+0x6a>
 800dcd0:	4638      	mov	r0, r7
 800dcd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcd6:	bf00      	nop
 800dcd8:	0800fa78 	.word	0x0800fa78
 800dcdc:	0800f82e 	.word	0x0800f82e
 800dce0:	0800f92c 	.word	0x0800f92c

0800dce4 <__lshift>:
 800dce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dce8:	460c      	mov	r4, r1
 800dcea:	6849      	ldr	r1, [r1, #4]
 800dcec:	6923      	ldr	r3, [r4, #16]
 800dcee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dcf2:	68a3      	ldr	r3, [r4, #8]
 800dcf4:	4607      	mov	r7, r0
 800dcf6:	4691      	mov	r9, r2
 800dcf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dcfc:	f108 0601 	add.w	r6, r8, #1
 800dd00:	42b3      	cmp	r3, r6
 800dd02:	db0b      	blt.n	800dd1c <__lshift+0x38>
 800dd04:	4638      	mov	r0, r7
 800dd06:	f7ff fd91 	bl	800d82c <_Balloc>
 800dd0a:	4605      	mov	r5, r0
 800dd0c:	b948      	cbnz	r0, 800dd22 <__lshift+0x3e>
 800dd0e:	4602      	mov	r2, r0
 800dd10:	4b2a      	ldr	r3, [pc, #168]	; (800ddbc <__lshift+0xd8>)
 800dd12:	482b      	ldr	r0, [pc, #172]	; (800ddc0 <__lshift+0xdc>)
 800dd14:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dd18:	f000 fcd4 	bl	800e6c4 <__assert_func>
 800dd1c:	3101      	adds	r1, #1
 800dd1e:	005b      	lsls	r3, r3, #1
 800dd20:	e7ee      	b.n	800dd00 <__lshift+0x1c>
 800dd22:	2300      	movs	r3, #0
 800dd24:	f100 0114 	add.w	r1, r0, #20
 800dd28:	f100 0210 	add.w	r2, r0, #16
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	4553      	cmp	r3, sl
 800dd30:	db37      	blt.n	800dda2 <__lshift+0xbe>
 800dd32:	6920      	ldr	r0, [r4, #16]
 800dd34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd38:	f104 0314 	add.w	r3, r4, #20
 800dd3c:	f019 091f 	ands.w	r9, r9, #31
 800dd40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dd48:	d02f      	beq.n	800ddaa <__lshift+0xc6>
 800dd4a:	f1c9 0e20 	rsb	lr, r9, #32
 800dd4e:	468a      	mov	sl, r1
 800dd50:	f04f 0c00 	mov.w	ip, #0
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	fa02 f209 	lsl.w	r2, r2, r9
 800dd5a:	ea42 020c 	orr.w	r2, r2, ip
 800dd5e:	f84a 2b04 	str.w	r2, [sl], #4
 800dd62:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd66:	4298      	cmp	r0, r3
 800dd68:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dd6c:	d8f2      	bhi.n	800dd54 <__lshift+0x70>
 800dd6e:	1b03      	subs	r3, r0, r4
 800dd70:	3b15      	subs	r3, #21
 800dd72:	f023 0303 	bic.w	r3, r3, #3
 800dd76:	3304      	adds	r3, #4
 800dd78:	f104 0215 	add.w	r2, r4, #21
 800dd7c:	4290      	cmp	r0, r2
 800dd7e:	bf38      	it	cc
 800dd80:	2304      	movcc	r3, #4
 800dd82:	f841 c003 	str.w	ip, [r1, r3]
 800dd86:	f1bc 0f00 	cmp.w	ip, #0
 800dd8a:	d001      	beq.n	800dd90 <__lshift+0xac>
 800dd8c:	f108 0602 	add.w	r6, r8, #2
 800dd90:	3e01      	subs	r6, #1
 800dd92:	4638      	mov	r0, r7
 800dd94:	612e      	str	r6, [r5, #16]
 800dd96:	4621      	mov	r1, r4
 800dd98:	f7ff fd88 	bl	800d8ac <_Bfree>
 800dd9c:	4628      	mov	r0, r5
 800dd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dda2:	f842 0f04 	str.w	r0, [r2, #4]!
 800dda6:	3301      	adds	r3, #1
 800dda8:	e7c1      	b.n	800dd2e <__lshift+0x4a>
 800ddaa:	3904      	subs	r1, #4
 800ddac:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddb0:	f841 2f04 	str.w	r2, [r1, #4]!
 800ddb4:	4298      	cmp	r0, r3
 800ddb6:	d8f9      	bhi.n	800ddac <__lshift+0xc8>
 800ddb8:	e7ea      	b.n	800dd90 <__lshift+0xac>
 800ddba:	bf00      	nop
 800ddbc:	0800f8a0 	.word	0x0800f8a0
 800ddc0:	0800f92c 	.word	0x0800f92c

0800ddc4 <__mcmp>:
 800ddc4:	b530      	push	{r4, r5, lr}
 800ddc6:	6902      	ldr	r2, [r0, #16]
 800ddc8:	690c      	ldr	r4, [r1, #16]
 800ddca:	1b12      	subs	r2, r2, r4
 800ddcc:	d10e      	bne.n	800ddec <__mcmp+0x28>
 800ddce:	f100 0314 	add.w	r3, r0, #20
 800ddd2:	3114      	adds	r1, #20
 800ddd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ddd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dddc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dde0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dde4:	42a5      	cmp	r5, r4
 800dde6:	d003      	beq.n	800ddf0 <__mcmp+0x2c>
 800dde8:	d305      	bcc.n	800ddf6 <__mcmp+0x32>
 800ddea:	2201      	movs	r2, #1
 800ddec:	4610      	mov	r0, r2
 800ddee:	bd30      	pop	{r4, r5, pc}
 800ddf0:	4283      	cmp	r3, r0
 800ddf2:	d3f3      	bcc.n	800dddc <__mcmp+0x18>
 800ddf4:	e7fa      	b.n	800ddec <__mcmp+0x28>
 800ddf6:	f04f 32ff 	mov.w	r2, #4294967295
 800ddfa:	e7f7      	b.n	800ddec <__mcmp+0x28>

0800ddfc <__mdiff>:
 800ddfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de00:	460c      	mov	r4, r1
 800de02:	4606      	mov	r6, r0
 800de04:	4611      	mov	r1, r2
 800de06:	4620      	mov	r0, r4
 800de08:	4690      	mov	r8, r2
 800de0a:	f7ff ffdb 	bl	800ddc4 <__mcmp>
 800de0e:	1e05      	subs	r5, r0, #0
 800de10:	d110      	bne.n	800de34 <__mdiff+0x38>
 800de12:	4629      	mov	r1, r5
 800de14:	4630      	mov	r0, r6
 800de16:	f7ff fd09 	bl	800d82c <_Balloc>
 800de1a:	b930      	cbnz	r0, 800de2a <__mdiff+0x2e>
 800de1c:	4b3a      	ldr	r3, [pc, #232]	; (800df08 <__mdiff+0x10c>)
 800de1e:	4602      	mov	r2, r0
 800de20:	f240 2132 	movw	r1, #562	; 0x232
 800de24:	4839      	ldr	r0, [pc, #228]	; (800df0c <__mdiff+0x110>)
 800de26:	f000 fc4d 	bl	800e6c4 <__assert_func>
 800de2a:	2301      	movs	r3, #1
 800de2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800de30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de34:	bfa4      	itt	ge
 800de36:	4643      	movge	r3, r8
 800de38:	46a0      	movge	r8, r4
 800de3a:	4630      	mov	r0, r6
 800de3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800de40:	bfa6      	itte	ge
 800de42:	461c      	movge	r4, r3
 800de44:	2500      	movge	r5, #0
 800de46:	2501      	movlt	r5, #1
 800de48:	f7ff fcf0 	bl	800d82c <_Balloc>
 800de4c:	b920      	cbnz	r0, 800de58 <__mdiff+0x5c>
 800de4e:	4b2e      	ldr	r3, [pc, #184]	; (800df08 <__mdiff+0x10c>)
 800de50:	4602      	mov	r2, r0
 800de52:	f44f 7110 	mov.w	r1, #576	; 0x240
 800de56:	e7e5      	b.n	800de24 <__mdiff+0x28>
 800de58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800de5c:	6926      	ldr	r6, [r4, #16]
 800de5e:	60c5      	str	r5, [r0, #12]
 800de60:	f104 0914 	add.w	r9, r4, #20
 800de64:	f108 0514 	add.w	r5, r8, #20
 800de68:	f100 0e14 	add.w	lr, r0, #20
 800de6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800de70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800de74:	f108 0210 	add.w	r2, r8, #16
 800de78:	46f2      	mov	sl, lr
 800de7a:	2100      	movs	r1, #0
 800de7c:	f859 3b04 	ldr.w	r3, [r9], #4
 800de80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800de84:	fa1f f883 	uxth.w	r8, r3
 800de88:	fa11 f18b 	uxtah	r1, r1, fp
 800de8c:	0c1b      	lsrs	r3, r3, #16
 800de8e:	eba1 0808 	sub.w	r8, r1, r8
 800de92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800de96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800de9a:	fa1f f888 	uxth.w	r8, r8
 800de9e:	1419      	asrs	r1, r3, #16
 800dea0:	454e      	cmp	r6, r9
 800dea2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dea6:	f84a 3b04 	str.w	r3, [sl], #4
 800deaa:	d8e7      	bhi.n	800de7c <__mdiff+0x80>
 800deac:	1b33      	subs	r3, r6, r4
 800deae:	3b15      	subs	r3, #21
 800deb0:	f023 0303 	bic.w	r3, r3, #3
 800deb4:	3304      	adds	r3, #4
 800deb6:	3415      	adds	r4, #21
 800deb8:	42a6      	cmp	r6, r4
 800deba:	bf38      	it	cc
 800debc:	2304      	movcc	r3, #4
 800debe:	441d      	add	r5, r3
 800dec0:	4473      	add	r3, lr
 800dec2:	469e      	mov	lr, r3
 800dec4:	462e      	mov	r6, r5
 800dec6:	4566      	cmp	r6, ip
 800dec8:	d30e      	bcc.n	800dee8 <__mdiff+0xec>
 800deca:	f10c 0203 	add.w	r2, ip, #3
 800dece:	1b52      	subs	r2, r2, r5
 800ded0:	f022 0203 	bic.w	r2, r2, #3
 800ded4:	3d03      	subs	r5, #3
 800ded6:	45ac      	cmp	ip, r5
 800ded8:	bf38      	it	cc
 800deda:	2200      	movcc	r2, #0
 800dedc:	441a      	add	r2, r3
 800dede:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dee2:	b17b      	cbz	r3, 800df04 <__mdiff+0x108>
 800dee4:	6107      	str	r7, [r0, #16]
 800dee6:	e7a3      	b.n	800de30 <__mdiff+0x34>
 800dee8:	f856 8b04 	ldr.w	r8, [r6], #4
 800deec:	fa11 f288 	uxtah	r2, r1, r8
 800def0:	1414      	asrs	r4, r2, #16
 800def2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800def6:	b292      	uxth	r2, r2
 800def8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800defc:	f84e 2b04 	str.w	r2, [lr], #4
 800df00:	1421      	asrs	r1, r4, #16
 800df02:	e7e0      	b.n	800dec6 <__mdiff+0xca>
 800df04:	3f01      	subs	r7, #1
 800df06:	e7ea      	b.n	800dede <__mdiff+0xe2>
 800df08:	0800f8a0 	.word	0x0800f8a0
 800df0c:	0800f92c 	.word	0x0800f92c

0800df10 <__ulp>:
 800df10:	b082      	sub	sp, #8
 800df12:	ed8d 0b00 	vstr	d0, [sp]
 800df16:	9b01      	ldr	r3, [sp, #4]
 800df18:	4912      	ldr	r1, [pc, #72]	; (800df64 <__ulp+0x54>)
 800df1a:	4019      	ands	r1, r3
 800df1c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800df20:	2900      	cmp	r1, #0
 800df22:	dd05      	ble.n	800df30 <__ulp+0x20>
 800df24:	2200      	movs	r2, #0
 800df26:	460b      	mov	r3, r1
 800df28:	ec43 2b10 	vmov	d0, r2, r3
 800df2c:	b002      	add	sp, #8
 800df2e:	4770      	bx	lr
 800df30:	4249      	negs	r1, r1
 800df32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800df36:	ea4f 5021 	mov.w	r0, r1, asr #20
 800df3a:	f04f 0200 	mov.w	r2, #0
 800df3e:	f04f 0300 	mov.w	r3, #0
 800df42:	da04      	bge.n	800df4e <__ulp+0x3e>
 800df44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800df48:	fa41 f300 	asr.w	r3, r1, r0
 800df4c:	e7ec      	b.n	800df28 <__ulp+0x18>
 800df4e:	f1a0 0114 	sub.w	r1, r0, #20
 800df52:	291e      	cmp	r1, #30
 800df54:	bfda      	itte	le
 800df56:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800df5a:	fa20 f101 	lsrle.w	r1, r0, r1
 800df5e:	2101      	movgt	r1, #1
 800df60:	460a      	mov	r2, r1
 800df62:	e7e1      	b.n	800df28 <__ulp+0x18>
 800df64:	7ff00000 	.word	0x7ff00000

0800df68 <__b2d>:
 800df68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df6a:	6905      	ldr	r5, [r0, #16]
 800df6c:	f100 0714 	add.w	r7, r0, #20
 800df70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800df74:	1f2e      	subs	r6, r5, #4
 800df76:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800df7a:	4620      	mov	r0, r4
 800df7c:	f7ff fd48 	bl	800da10 <__hi0bits>
 800df80:	f1c0 0320 	rsb	r3, r0, #32
 800df84:	280a      	cmp	r0, #10
 800df86:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e004 <__b2d+0x9c>
 800df8a:	600b      	str	r3, [r1, #0]
 800df8c:	dc14      	bgt.n	800dfb8 <__b2d+0x50>
 800df8e:	f1c0 0e0b 	rsb	lr, r0, #11
 800df92:	fa24 f10e 	lsr.w	r1, r4, lr
 800df96:	42b7      	cmp	r7, r6
 800df98:	ea41 030c 	orr.w	r3, r1, ip
 800df9c:	bf34      	ite	cc
 800df9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dfa2:	2100      	movcs	r1, #0
 800dfa4:	3015      	adds	r0, #21
 800dfa6:	fa04 f000 	lsl.w	r0, r4, r0
 800dfaa:	fa21 f10e 	lsr.w	r1, r1, lr
 800dfae:	ea40 0201 	orr.w	r2, r0, r1
 800dfb2:	ec43 2b10 	vmov	d0, r2, r3
 800dfb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfb8:	42b7      	cmp	r7, r6
 800dfba:	bf3a      	itte	cc
 800dfbc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dfc0:	f1a5 0608 	subcc.w	r6, r5, #8
 800dfc4:	2100      	movcs	r1, #0
 800dfc6:	380b      	subs	r0, #11
 800dfc8:	d017      	beq.n	800dffa <__b2d+0x92>
 800dfca:	f1c0 0c20 	rsb	ip, r0, #32
 800dfce:	fa04 f500 	lsl.w	r5, r4, r0
 800dfd2:	42be      	cmp	r6, r7
 800dfd4:	fa21 f40c 	lsr.w	r4, r1, ip
 800dfd8:	ea45 0504 	orr.w	r5, r5, r4
 800dfdc:	bf8c      	ite	hi
 800dfde:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dfe2:	2400      	movls	r4, #0
 800dfe4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dfe8:	fa01 f000 	lsl.w	r0, r1, r0
 800dfec:	fa24 f40c 	lsr.w	r4, r4, ip
 800dff0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dff4:	ea40 0204 	orr.w	r2, r0, r4
 800dff8:	e7db      	b.n	800dfb2 <__b2d+0x4a>
 800dffa:	ea44 030c 	orr.w	r3, r4, ip
 800dffe:	460a      	mov	r2, r1
 800e000:	e7d7      	b.n	800dfb2 <__b2d+0x4a>
 800e002:	bf00      	nop
 800e004:	3ff00000 	.word	0x3ff00000

0800e008 <__d2b>:
 800e008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e00c:	4689      	mov	r9, r1
 800e00e:	2101      	movs	r1, #1
 800e010:	ec57 6b10 	vmov	r6, r7, d0
 800e014:	4690      	mov	r8, r2
 800e016:	f7ff fc09 	bl	800d82c <_Balloc>
 800e01a:	4604      	mov	r4, r0
 800e01c:	b930      	cbnz	r0, 800e02c <__d2b+0x24>
 800e01e:	4602      	mov	r2, r0
 800e020:	4b25      	ldr	r3, [pc, #148]	; (800e0b8 <__d2b+0xb0>)
 800e022:	4826      	ldr	r0, [pc, #152]	; (800e0bc <__d2b+0xb4>)
 800e024:	f240 310a 	movw	r1, #778	; 0x30a
 800e028:	f000 fb4c 	bl	800e6c4 <__assert_func>
 800e02c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e030:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e034:	bb35      	cbnz	r5, 800e084 <__d2b+0x7c>
 800e036:	2e00      	cmp	r6, #0
 800e038:	9301      	str	r3, [sp, #4]
 800e03a:	d028      	beq.n	800e08e <__d2b+0x86>
 800e03c:	4668      	mov	r0, sp
 800e03e:	9600      	str	r6, [sp, #0]
 800e040:	f7ff fd06 	bl	800da50 <__lo0bits>
 800e044:	9900      	ldr	r1, [sp, #0]
 800e046:	b300      	cbz	r0, 800e08a <__d2b+0x82>
 800e048:	9a01      	ldr	r2, [sp, #4]
 800e04a:	f1c0 0320 	rsb	r3, r0, #32
 800e04e:	fa02 f303 	lsl.w	r3, r2, r3
 800e052:	430b      	orrs	r3, r1
 800e054:	40c2      	lsrs	r2, r0
 800e056:	6163      	str	r3, [r4, #20]
 800e058:	9201      	str	r2, [sp, #4]
 800e05a:	9b01      	ldr	r3, [sp, #4]
 800e05c:	61a3      	str	r3, [r4, #24]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	bf14      	ite	ne
 800e062:	2202      	movne	r2, #2
 800e064:	2201      	moveq	r2, #1
 800e066:	6122      	str	r2, [r4, #16]
 800e068:	b1d5      	cbz	r5, 800e0a0 <__d2b+0x98>
 800e06a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e06e:	4405      	add	r5, r0
 800e070:	f8c9 5000 	str.w	r5, [r9]
 800e074:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e078:	f8c8 0000 	str.w	r0, [r8]
 800e07c:	4620      	mov	r0, r4
 800e07e:	b003      	add	sp, #12
 800e080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e084:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e088:	e7d5      	b.n	800e036 <__d2b+0x2e>
 800e08a:	6161      	str	r1, [r4, #20]
 800e08c:	e7e5      	b.n	800e05a <__d2b+0x52>
 800e08e:	a801      	add	r0, sp, #4
 800e090:	f7ff fcde 	bl	800da50 <__lo0bits>
 800e094:	9b01      	ldr	r3, [sp, #4]
 800e096:	6163      	str	r3, [r4, #20]
 800e098:	2201      	movs	r2, #1
 800e09a:	6122      	str	r2, [r4, #16]
 800e09c:	3020      	adds	r0, #32
 800e09e:	e7e3      	b.n	800e068 <__d2b+0x60>
 800e0a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e0a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e0a8:	f8c9 0000 	str.w	r0, [r9]
 800e0ac:	6918      	ldr	r0, [r3, #16]
 800e0ae:	f7ff fcaf 	bl	800da10 <__hi0bits>
 800e0b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e0b6:	e7df      	b.n	800e078 <__d2b+0x70>
 800e0b8:	0800f8a0 	.word	0x0800f8a0
 800e0bc:	0800f92c 	.word	0x0800f92c

0800e0c0 <__ratio>:
 800e0c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0c4:	4688      	mov	r8, r1
 800e0c6:	4669      	mov	r1, sp
 800e0c8:	4681      	mov	r9, r0
 800e0ca:	f7ff ff4d 	bl	800df68 <__b2d>
 800e0ce:	a901      	add	r1, sp, #4
 800e0d0:	4640      	mov	r0, r8
 800e0d2:	ec55 4b10 	vmov	r4, r5, d0
 800e0d6:	ee10 aa10 	vmov	sl, s0
 800e0da:	f7ff ff45 	bl	800df68 <__b2d>
 800e0de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e0e2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e0e6:	1a59      	subs	r1, r3, r1
 800e0e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0ec:	1ad3      	subs	r3, r2, r3
 800e0ee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e0f2:	ec57 6b10 	vmov	r6, r7, d0
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	bfd6      	itet	le
 800e0fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e0fe:	462a      	movgt	r2, r5
 800e100:	463a      	movle	r2, r7
 800e102:	46ab      	mov	fp, r5
 800e104:	bfd6      	itet	le
 800e106:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800e10a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e10e:	ee00 3a90 	vmovle	s1, r3
 800e112:	ec4b ab17 	vmov	d7, sl, fp
 800e116:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800e11a:	b003      	add	sp, #12
 800e11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e120 <__copybits>:
 800e120:	3901      	subs	r1, #1
 800e122:	b570      	push	{r4, r5, r6, lr}
 800e124:	1149      	asrs	r1, r1, #5
 800e126:	6914      	ldr	r4, [r2, #16]
 800e128:	3101      	adds	r1, #1
 800e12a:	f102 0314 	add.w	r3, r2, #20
 800e12e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e132:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e136:	1f05      	subs	r5, r0, #4
 800e138:	42a3      	cmp	r3, r4
 800e13a:	d30c      	bcc.n	800e156 <__copybits+0x36>
 800e13c:	1aa3      	subs	r3, r4, r2
 800e13e:	3b11      	subs	r3, #17
 800e140:	f023 0303 	bic.w	r3, r3, #3
 800e144:	3211      	adds	r2, #17
 800e146:	42a2      	cmp	r2, r4
 800e148:	bf88      	it	hi
 800e14a:	2300      	movhi	r3, #0
 800e14c:	4418      	add	r0, r3
 800e14e:	2300      	movs	r3, #0
 800e150:	4288      	cmp	r0, r1
 800e152:	d305      	bcc.n	800e160 <__copybits+0x40>
 800e154:	bd70      	pop	{r4, r5, r6, pc}
 800e156:	f853 6b04 	ldr.w	r6, [r3], #4
 800e15a:	f845 6f04 	str.w	r6, [r5, #4]!
 800e15e:	e7eb      	b.n	800e138 <__copybits+0x18>
 800e160:	f840 3b04 	str.w	r3, [r0], #4
 800e164:	e7f4      	b.n	800e150 <__copybits+0x30>

0800e166 <__any_on>:
 800e166:	f100 0214 	add.w	r2, r0, #20
 800e16a:	6900      	ldr	r0, [r0, #16]
 800e16c:	114b      	asrs	r3, r1, #5
 800e16e:	4298      	cmp	r0, r3
 800e170:	b510      	push	{r4, lr}
 800e172:	db11      	blt.n	800e198 <__any_on+0x32>
 800e174:	dd0a      	ble.n	800e18c <__any_on+0x26>
 800e176:	f011 011f 	ands.w	r1, r1, #31
 800e17a:	d007      	beq.n	800e18c <__any_on+0x26>
 800e17c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e180:	fa24 f001 	lsr.w	r0, r4, r1
 800e184:	fa00 f101 	lsl.w	r1, r0, r1
 800e188:	428c      	cmp	r4, r1
 800e18a:	d10b      	bne.n	800e1a4 <__any_on+0x3e>
 800e18c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e190:	4293      	cmp	r3, r2
 800e192:	d803      	bhi.n	800e19c <__any_on+0x36>
 800e194:	2000      	movs	r0, #0
 800e196:	bd10      	pop	{r4, pc}
 800e198:	4603      	mov	r3, r0
 800e19a:	e7f7      	b.n	800e18c <__any_on+0x26>
 800e19c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e1a0:	2900      	cmp	r1, #0
 800e1a2:	d0f5      	beq.n	800e190 <__any_on+0x2a>
 800e1a4:	2001      	movs	r0, #1
 800e1a6:	e7f6      	b.n	800e196 <__any_on+0x30>

0800e1a8 <_calloc_r>:
 800e1a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1aa:	fba1 2402 	umull	r2, r4, r1, r2
 800e1ae:	b94c      	cbnz	r4, 800e1c4 <_calloc_r+0x1c>
 800e1b0:	4611      	mov	r1, r2
 800e1b2:	9201      	str	r2, [sp, #4]
 800e1b4:	f000 f87a 	bl	800e2ac <_malloc_r>
 800e1b8:	9a01      	ldr	r2, [sp, #4]
 800e1ba:	4605      	mov	r5, r0
 800e1bc:	b930      	cbnz	r0, 800e1cc <_calloc_r+0x24>
 800e1be:	4628      	mov	r0, r5
 800e1c0:	b003      	add	sp, #12
 800e1c2:	bd30      	pop	{r4, r5, pc}
 800e1c4:	220c      	movs	r2, #12
 800e1c6:	6002      	str	r2, [r0, #0]
 800e1c8:	2500      	movs	r5, #0
 800e1ca:	e7f8      	b.n	800e1be <_calloc_r+0x16>
 800e1cc:	4621      	mov	r1, r4
 800e1ce:	f7fc fcc5 	bl	800ab5c <memset>
 800e1d2:	e7f4      	b.n	800e1be <_calloc_r+0x16>

0800e1d4 <_free_r>:
 800e1d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1d6:	2900      	cmp	r1, #0
 800e1d8:	d044      	beq.n	800e264 <_free_r+0x90>
 800e1da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1de:	9001      	str	r0, [sp, #4]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f1a1 0404 	sub.w	r4, r1, #4
 800e1e6:	bfb8      	it	lt
 800e1e8:	18e4      	addlt	r4, r4, r3
 800e1ea:	f000 fab5 	bl	800e758 <__malloc_lock>
 800e1ee:	4a1e      	ldr	r2, [pc, #120]	; (800e268 <_free_r+0x94>)
 800e1f0:	9801      	ldr	r0, [sp, #4]
 800e1f2:	6813      	ldr	r3, [r2, #0]
 800e1f4:	b933      	cbnz	r3, 800e204 <_free_r+0x30>
 800e1f6:	6063      	str	r3, [r4, #4]
 800e1f8:	6014      	str	r4, [r2, #0]
 800e1fa:	b003      	add	sp, #12
 800e1fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e200:	f000 bab0 	b.w	800e764 <__malloc_unlock>
 800e204:	42a3      	cmp	r3, r4
 800e206:	d908      	bls.n	800e21a <_free_r+0x46>
 800e208:	6825      	ldr	r5, [r4, #0]
 800e20a:	1961      	adds	r1, r4, r5
 800e20c:	428b      	cmp	r3, r1
 800e20e:	bf01      	itttt	eq
 800e210:	6819      	ldreq	r1, [r3, #0]
 800e212:	685b      	ldreq	r3, [r3, #4]
 800e214:	1949      	addeq	r1, r1, r5
 800e216:	6021      	streq	r1, [r4, #0]
 800e218:	e7ed      	b.n	800e1f6 <_free_r+0x22>
 800e21a:	461a      	mov	r2, r3
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	b10b      	cbz	r3, 800e224 <_free_r+0x50>
 800e220:	42a3      	cmp	r3, r4
 800e222:	d9fa      	bls.n	800e21a <_free_r+0x46>
 800e224:	6811      	ldr	r1, [r2, #0]
 800e226:	1855      	adds	r5, r2, r1
 800e228:	42a5      	cmp	r5, r4
 800e22a:	d10b      	bne.n	800e244 <_free_r+0x70>
 800e22c:	6824      	ldr	r4, [r4, #0]
 800e22e:	4421      	add	r1, r4
 800e230:	1854      	adds	r4, r2, r1
 800e232:	42a3      	cmp	r3, r4
 800e234:	6011      	str	r1, [r2, #0]
 800e236:	d1e0      	bne.n	800e1fa <_free_r+0x26>
 800e238:	681c      	ldr	r4, [r3, #0]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	6053      	str	r3, [r2, #4]
 800e23e:	4421      	add	r1, r4
 800e240:	6011      	str	r1, [r2, #0]
 800e242:	e7da      	b.n	800e1fa <_free_r+0x26>
 800e244:	d902      	bls.n	800e24c <_free_r+0x78>
 800e246:	230c      	movs	r3, #12
 800e248:	6003      	str	r3, [r0, #0]
 800e24a:	e7d6      	b.n	800e1fa <_free_r+0x26>
 800e24c:	6825      	ldr	r5, [r4, #0]
 800e24e:	1961      	adds	r1, r4, r5
 800e250:	428b      	cmp	r3, r1
 800e252:	bf04      	itt	eq
 800e254:	6819      	ldreq	r1, [r3, #0]
 800e256:	685b      	ldreq	r3, [r3, #4]
 800e258:	6063      	str	r3, [r4, #4]
 800e25a:	bf04      	itt	eq
 800e25c:	1949      	addeq	r1, r1, r5
 800e25e:	6021      	streq	r1, [r4, #0]
 800e260:	6054      	str	r4, [r2, #4]
 800e262:	e7ca      	b.n	800e1fa <_free_r+0x26>
 800e264:	b003      	add	sp, #12
 800e266:	bd30      	pop	{r4, r5, pc}
 800e268:	24000cbc 	.word	0x24000cbc

0800e26c <sbrk_aligned>:
 800e26c:	b570      	push	{r4, r5, r6, lr}
 800e26e:	4e0e      	ldr	r6, [pc, #56]	; (800e2a8 <sbrk_aligned+0x3c>)
 800e270:	460c      	mov	r4, r1
 800e272:	6831      	ldr	r1, [r6, #0]
 800e274:	4605      	mov	r5, r0
 800e276:	b911      	cbnz	r1, 800e27e <sbrk_aligned+0x12>
 800e278:	f000 f9f2 	bl	800e660 <_sbrk_r>
 800e27c:	6030      	str	r0, [r6, #0]
 800e27e:	4621      	mov	r1, r4
 800e280:	4628      	mov	r0, r5
 800e282:	f000 f9ed 	bl	800e660 <_sbrk_r>
 800e286:	1c43      	adds	r3, r0, #1
 800e288:	d00a      	beq.n	800e2a0 <sbrk_aligned+0x34>
 800e28a:	1cc4      	adds	r4, r0, #3
 800e28c:	f024 0403 	bic.w	r4, r4, #3
 800e290:	42a0      	cmp	r0, r4
 800e292:	d007      	beq.n	800e2a4 <sbrk_aligned+0x38>
 800e294:	1a21      	subs	r1, r4, r0
 800e296:	4628      	mov	r0, r5
 800e298:	f000 f9e2 	bl	800e660 <_sbrk_r>
 800e29c:	3001      	adds	r0, #1
 800e29e:	d101      	bne.n	800e2a4 <sbrk_aligned+0x38>
 800e2a0:	f04f 34ff 	mov.w	r4, #4294967295
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	bd70      	pop	{r4, r5, r6, pc}
 800e2a8:	24000cc0 	.word	0x24000cc0

0800e2ac <_malloc_r>:
 800e2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2b0:	1ccd      	adds	r5, r1, #3
 800e2b2:	f025 0503 	bic.w	r5, r5, #3
 800e2b6:	3508      	adds	r5, #8
 800e2b8:	2d0c      	cmp	r5, #12
 800e2ba:	bf38      	it	cc
 800e2bc:	250c      	movcc	r5, #12
 800e2be:	2d00      	cmp	r5, #0
 800e2c0:	4607      	mov	r7, r0
 800e2c2:	db01      	blt.n	800e2c8 <_malloc_r+0x1c>
 800e2c4:	42a9      	cmp	r1, r5
 800e2c6:	d905      	bls.n	800e2d4 <_malloc_r+0x28>
 800e2c8:	230c      	movs	r3, #12
 800e2ca:	603b      	str	r3, [r7, #0]
 800e2cc:	2600      	movs	r6, #0
 800e2ce:	4630      	mov	r0, r6
 800e2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2d4:	4e2e      	ldr	r6, [pc, #184]	; (800e390 <_malloc_r+0xe4>)
 800e2d6:	f000 fa3f 	bl	800e758 <__malloc_lock>
 800e2da:	6833      	ldr	r3, [r6, #0]
 800e2dc:	461c      	mov	r4, r3
 800e2de:	bb34      	cbnz	r4, 800e32e <_malloc_r+0x82>
 800e2e0:	4629      	mov	r1, r5
 800e2e2:	4638      	mov	r0, r7
 800e2e4:	f7ff ffc2 	bl	800e26c <sbrk_aligned>
 800e2e8:	1c43      	adds	r3, r0, #1
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	d14d      	bne.n	800e38a <_malloc_r+0xde>
 800e2ee:	6834      	ldr	r4, [r6, #0]
 800e2f0:	4626      	mov	r6, r4
 800e2f2:	2e00      	cmp	r6, #0
 800e2f4:	d140      	bne.n	800e378 <_malloc_r+0xcc>
 800e2f6:	6823      	ldr	r3, [r4, #0]
 800e2f8:	4631      	mov	r1, r6
 800e2fa:	4638      	mov	r0, r7
 800e2fc:	eb04 0803 	add.w	r8, r4, r3
 800e300:	f000 f9ae 	bl	800e660 <_sbrk_r>
 800e304:	4580      	cmp	r8, r0
 800e306:	d13a      	bne.n	800e37e <_malloc_r+0xd2>
 800e308:	6821      	ldr	r1, [r4, #0]
 800e30a:	3503      	adds	r5, #3
 800e30c:	1a6d      	subs	r5, r5, r1
 800e30e:	f025 0503 	bic.w	r5, r5, #3
 800e312:	3508      	adds	r5, #8
 800e314:	2d0c      	cmp	r5, #12
 800e316:	bf38      	it	cc
 800e318:	250c      	movcc	r5, #12
 800e31a:	4629      	mov	r1, r5
 800e31c:	4638      	mov	r0, r7
 800e31e:	f7ff ffa5 	bl	800e26c <sbrk_aligned>
 800e322:	3001      	adds	r0, #1
 800e324:	d02b      	beq.n	800e37e <_malloc_r+0xd2>
 800e326:	6823      	ldr	r3, [r4, #0]
 800e328:	442b      	add	r3, r5
 800e32a:	6023      	str	r3, [r4, #0]
 800e32c:	e00e      	b.n	800e34c <_malloc_r+0xa0>
 800e32e:	6822      	ldr	r2, [r4, #0]
 800e330:	1b52      	subs	r2, r2, r5
 800e332:	d41e      	bmi.n	800e372 <_malloc_r+0xc6>
 800e334:	2a0b      	cmp	r2, #11
 800e336:	d916      	bls.n	800e366 <_malloc_r+0xba>
 800e338:	1961      	adds	r1, r4, r5
 800e33a:	42a3      	cmp	r3, r4
 800e33c:	6025      	str	r5, [r4, #0]
 800e33e:	bf18      	it	ne
 800e340:	6059      	strne	r1, [r3, #4]
 800e342:	6863      	ldr	r3, [r4, #4]
 800e344:	bf08      	it	eq
 800e346:	6031      	streq	r1, [r6, #0]
 800e348:	5162      	str	r2, [r4, r5]
 800e34a:	604b      	str	r3, [r1, #4]
 800e34c:	4638      	mov	r0, r7
 800e34e:	f104 060b 	add.w	r6, r4, #11
 800e352:	f000 fa07 	bl	800e764 <__malloc_unlock>
 800e356:	f026 0607 	bic.w	r6, r6, #7
 800e35a:	1d23      	adds	r3, r4, #4
 800e35c:	1af2      	subs	r2, r6, r3
 800e35e:	d0b6      	beq.n	800e2ce <_malloc_r+0x22>
 800e360:	1b9b      	subs	r3, r3, r6
 800e362:	50a3      	str	r3, [r4, r2]
 800e364:	e7b3      	b.n	800e2ce <_malloc_r+0x22>
 800e366:	6862      	ldr	r2, [r4, #4]
 800e368:	42a3      	cmp	r3, r4
 800e36a:	bf0c      	ite	eq
 800e36c:	6032      	streq	r2, [r6, #0]
 800e36e:	605a      	strne	r2, [r3, #4]
 800e370:	e7ec      	b.n	800e34c <_malloc_r+0xa0>
 800e372:	4623      	mov	r3, r4
 800e374:	6864      	ldr	r4, [r4, #4]
 800e376:	e7b2      	b.n	800e2de <_malloc_r+0x32>
 800e378:	4634      	mov	r4, r6
 800e37a:	6876      	ldr	r6, [r6, #4]
 800e37c:	e7b9      	b.n	800e2f2 <_malloc_r+0x46>
 800e37e:	230c      	movs	r3, #12
 800e380:	603b      	str	r3, [r7, #0]
 800e382:	4638      	mov	r0, r7
 800e384:	f000 f9ee 	bl	800e764 <__malloc_unlock>
 800e388:	e7a1      	b.n	800e2ce <_malloc_r+0x22>
 800e38a:	6025      	str	r5, [r4, #0]
 800e38c:	e7de      	b.n	800e34c <_malloc_r+0xa0>
 800e38e:	bf00      	nop
 800e390:	24000cbc 	.word	0x24000cbc

0800e394 <__ssputs_r>:
 800e394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e398:	688e      	ldr	r6, [r1, #8]
 800e39a:	429e      	cmp	r6, r3
 800e39c:	4682      	mov	sl, r0
 800e39e:	460c      	mov	r4, r1
 800e3a0:	4690      	mov	r8, r2
 800e3a2:	461f      	mov	r7, r3
 800e3a4:	d838      	bhi.n	800e418 <__ssputs_r+0x84>
 800e3a6:	898a      	ldrh	r2, [r1, #12]
 800e3a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e3ac:	d032      	beq.n	800e414 <__ssputs_r+0x80>
 800e3ae:	6825      	ldr	r5, [r4, #0]
 800e3b0:	6909      	ldr	r1, [r1, #16]
 800e3b2:	eba5 0901 	sub.w	r9, r5, r1
 800e3b6:	6965      	ldr	r5, [r4, #20]
 800e3b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e3bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e3c0:	3301      	adds	r3, #1
 800e3c2:	444b      	add	r3, r9
 800e3c4:	106d      	asrs	r5, r5, #1
 800e3c6:	429d      	cmp	r5, r3
 800e3c8:	bf38      	it	cc
 800e3ca:	461d      	movcc	r5, r3
 800e3cc:	0553      	lsls	r3, r2, #21
 800e3ce:	d531      	bpl.n	800e434 <__ssputs_r+0xa0>
 800e3d0:	4629      	mov	r1, r5
 800e3d2:	f7ff ff6b 	bl	800e2ac <_malloc_r>
 800e3d6:	4606      	mov	r6, r0
 800e3d8:	b950      	cbnz	r0, 800e3f0 <__ssputs_r+0x5c>
 800e3da:	230c      	movs	r3, #12
 800e3dc:	f8ca 3000 	str.w	r3, [sl]
 800e3e0:	89a3      	ldrh	r3, [r4, #12]
 800e3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3e6:	81a3      	strh	r3, [r4, #12]
 800e3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3f0:	6921      	ldr	r1, [r4, #16]
 800e3f2:	464a      	mov	r2, r9
 800e3f4:	f7ff fa0c 	bl	800d810 <memcpy>
 800e3f8:	89a3      	ldrh	r3, [r4, #12]
 800e3fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e3fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e402:	81a3      	strh	r3, [r4, #12]
 800e404:	6126      	str	r6, [r4, #16]
 800e406:	6165      	str	r5, [r4, #20]
 800e408:	444e      	add	r6, r9
 800e40a:	eba5 0509 	sub.w	r5, r5, r9
 800e40e:	6026      	str	r6, [r4, #0]
 800e410:	60a5      	str	r5, [r4, #8]
 800e412:	463e      	mov	r6, r7
 800e414:	42be      	cmp	r6, r7
 800e416:	d900      	bls.n	800e41a <__ssputs_r+0x86>
 800e418:	463e      	mov	r6, r7
 800e41a:	6820      	ldr	r0, [r4, #0]
 800e41c:	4632      	mov	r2, r6
 800e41e:	4641      	mov	r1, r8
 800e420:	f000 f980 	bl	800e724 <memmove>
 800e424:	68a3      	ldr	r3, [r4, #8]
 800e426:	1b9b      	subs	r3, r3, r6
 800e428:	60a3      	str	r3, [r4, #8]
 800e42a:	6823      	ldr	r3, [r4, #0]
 800e42c:	4433      	add	r3, r6
 800e42e:	6023      	str	r3, [r4, #0]
 800e430:	2000      	movs	r0, #0
 800e432:	e7db      	b.n	800e3ec <__ssputs_r+0x58>
 800e434:	462a      	mov	r2, r5
 800e436:	f000 f99b 	bl	800e770 <_realloc_r>
 800e43a:	4606      	mov	r6, r0
 800e43c:	2800      	cmp	r0, #0
 800e43e:	d1e1      	bne.n	800e404 <__ssputs_r+0x70>
 800e440:	6921      	ldr	r1, [r4, #16]
 800e442:	4650      	mov	r0, sl
 800e444:	f7ff fec6 	bl	800e1d4 <_free_r>
 800e448:	e7c7      	b.n	800e3da <__ssputs_r+0x46>
	...

0800e44c <_svfiprintf_r>:
 800e44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e450:	4698      	mov	r8, r3
 800e452:	898b      	ldrh	r3, [r1, #12]
 800e454:	061b      	lsls	r3, r3, #24
 800e456:	b09d      	sub	sp, #116	; 0x74
 800e458:	4607      	mov	r7, r0
 800e45a:	460d      	mov	r5, r1
 800e45c:	4614      	mov	r4, r2
 800e45e:	d50e      	bpl.n	800e47e <_svfiprintf_r+0x32>
 800e460:	690b      	ldr	r3, [r1, #16]
 800e462:	b963      	cbnz	r3, 800e47e <_svfiprintf_r+0x32>
 800e464:	2140      	movs	r1, #64	; 0x40
 800e466:	f7ff ff21 	bl	800e2ac <_malloc_r>
 800e46a:	6028      	str	r0, [r5, #0]
 800e46c:	6128      	str	r0, [r5, #16]
 800e46e:	b920      	cbnz	r0, 800e47a <_svfiprintf_r+0x2e>
 800e470:	230c      	movs	r3, #12
 800e472:	603b      	str	r3, [r7, #0]
 800e474:	f04f 30ff 	mov.w	r0, #4294967295
 800e478:	e0d1      	b.n	800e61e <_svfiprintf_r+0x1d2>
 800e47a:	2340      	movs	r3, #64	; 0x40
 800e47c:	616b      	str	r3, [r5, #20]
 800e47e:	2300      	movs	r3, #0
 800e480:	9309      	str	r3, [sp, #36]	; 0x24
 800e482:	2320      	movs	r3, #32
 800e484:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e488:	f8cd 800c 	str.w	r8, [sp, #12]
 800e48c:	2330      	movs	r3, #48	; 0x30
 800e48e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e638 <_svfiprintf_r+0x1ec>
 800e492:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e496:	f04f 0901 	mov.w	r9, #1
 800e49a:	4623      	mov	r3, r4
 800e49c:	469a      	mov	sl, r3
 800e49e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4a2:	b10a      	cbz	r2, 800e4a8 <_svfiprintf_r+0x5c>
 800e4a4:	2a25      	cmp	r2, #37	; 0x25
 800e4a6:	d1f9      	bne.n	800e49c <_svfiprintf_r+0x50>
 800e4a8:	ebba 0b04 	subs.w	fp, sl, r4
 800e4ac:	d00b      	beq.n	800e4c6 <_svfiprintf_r+0x7a>
 800e4ae:	465b      	mov	r3, fp
 800e4b0:	4622      	mov	r2, r4
 800e4b2:	4629      	mov	r1, r5
 800e4b4:	4638      	mov	r0, r7
 800e4b6:	f7ff ff6d 	bl	800e394 <__ssputs_r>
 800e4ba:	3001      	adds	r0, #1
 800e4bc:	f000 80aa 	beq.w	800e614 <_svfiprintf_r+0x1c8>
 800e4c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4c2:	445a      	add	r2, fp
 800e4c4:	9209      	str	r2, [sp, #36]	; 0x24
 800e4c6:	f89a 3000 	ldrb.w	r3, [sl]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	f000 80a2 	beq.w	800e614 <_svfiprintf_r+0x1c8>
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4da:	f10a 0a01 	add.w	sl, sl, #1
 800e4de:	9304      	str	r3, [sp, #16]
 800e4e0:	9307      	str	r3, [sp, #28]
 800e4e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e4e6:	931a      	str	r3, [sp, #104]	; 0x68
 800e4e8:	4654      	mov	r4, sl
 800e4ea:	2205      	movs	r2, #5
 800e4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4f0:	4851      	ldr	r0, [pc, #324]	; (800e638 <_svfiprintf_r+0x1ec>)
 800e4f2:	f7f1 ff0d 	bl	8000310 <memchr>
 800e4f6:	9a04      	ldr	r2, [sp, #16]
 800e4f8:	b9d8      	cbnz	r0, 800e532 <_svfiprintf_r+0xe6>
 800e4fa:	06d0      	lsls	r0, r2, #27
 800e4fc:	bf44      	itt	mi
 800e4fe:	2320      	movmi	r3, #32
 800e500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e504:	0711      	lsls	r1, r2, #28
 800e506:	bf44      	itt	mi
 800e508:	232b      	movmi	r3, #43	; 0x2b
 800e50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e50e:	f89a 3000 	ldrb.w	r3, [sl]
 800e512:	2b2a      	cmp	r3, #42	; 0x2a
 800e514:	d015      	beq.n	800e542 <_svfiprintf_r+0xf6>
 800e516:	9a07      	ldr	r2, [sp, #28]
 800e518:	4654      	mov	r4, sl
 800e51a:	2000      	movs	r0, #0
 800e51c:	f04f 0c0a 	mov.w	ip, #10
 800e520:	4621      	mov	r1, r4
 800e522:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e526:	3b30      	subs	r3, #48	; 0x30
 800e528:	2b09      	cmp	r3, #9
 800e52a:	d94e      	bls.n	800e5ca <_svfiprintf_r+0x17e>
 800e52c:	b1b0      	cbz	r0, 800e55c <_svfiprintf_r+0x110>
 800e52e:	9207      	str	r2, [sp, #28]
 800e530:	e014      	b.n	800e55c <_svfiprintf_r+0x110>
 800e532:	eba0 0308 	sub.w	r3, r0, r8
 800e536:	fa09 f303 	lsl.w	r3, r9, r3
 800e53a:	4313      	orrs	r3, r2
 800e53c:	9304      	str	r3, [sp, #16]
 800e53e:	46a2      	mov	sl, r4
 800e540:	e7d2      	b.n	800e4e8 <_svfiprintf_r+0x9c>
 800e542:	9b03      	ldr	r3, [sp, #12]
 800e544:	1d19      	adds	r1, r3, #4
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	9103      	str	r1, [sp, #12]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	bfbb      	ittet	lt
 800e54e:	425b      	neglt	r3, r3
 800e550:	f042 0202 	orrlt.w	r2, r2, #2
 800e554:	9307      	strge	r3, [sp, #28]
 800e556:	9307      	strlt	r3, [sp, #28]
 800e558:	bfb8      	it	lt
 800e55a:	9204      	strlt	r2, [sp, #16]
 800e55c:	7823      	ldrb	r3, [r4, #0]
 800e55e:	2b2e      	cmp	r3, #46	; 0x2e
 800e560:	d10c      	bne.n	800e57c <_svfiprintf_r+0x130>
 800e562:	7863      	ldrb	r3, [r4, #1]
 800e564:	2b2a      	cmp	r3, #42	; 0x2a
 800e566:	d135      	bne.n	800e5d4 <_svfiprintf_r+0x188>
 800e568:	9b03      	ldr	r3, [sp, #12]
 800e56a:	1d1a      	adds	r2, r3, #4
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	9203      	str	r2, [sp, #12]
 800e570:	2b00      	cmp	r3, #0
 800e572:	bfb8      	it	lt
 800e574:	f04f 33ff 	movlt.w	r3, #4294967295
 800e578:	3402      	adds	r4, #2
 800e57a:	9305      	str	r3, [sp, #20]
 800e57c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e648 <_svfiprintf_r+0x1fc>
 800e580:	7821      	ldrb	r1, [r4, #0]
 800e582:	2203      	movs	r2, #3
 800e584:	4650      	mov	r0, sl
 800e586:	f7f1 fec3 	bl	8000310 <memchr>
 800e58a:	b140      	cbz	r0, 800e59e <_svfiprintf_r+0x152>
 800e58c:	2340      	movs	r3, #64	; 0x40
 800e58e:	eba0 000a 	sub.w	r0, r0, sl
 800e592:	fa03 f000 	lsl.w	r0, r3, r0
 800e596:	9b04      	ldr	r3, [sp, #16]
 800e598:	4303      	orrs	r3, r0
 800e59a:	3401      	adds	r4, #1
 800e59c:	9304      	str	r3, [sp, #16]
 800e59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5a2:	4826      	ldr	r0, [pc, #152]	; (800e63c <_svfiprintf_r+0x1f0>)
 800e5a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5a8:	2206      	movs	r2, #6
 800e5aa:	f7f1 feb1 	bl	8000310 <memchr>
 800e5ae:	2800      	cmp	r0, #0
 800e5b0:	d038      	beq.n	800e624 <_svfiprintf_r+0x1d8>
 800e5b2:	4b23      	ldr	r3, [pc, #140]	; (800e640 <_svfiprintf_r+0x1f4>)
 800e5b4:	bb1b      	cbnz	r3, 800e5fe <_svfiprintf_r+0x1b2>
 800e5b6:	9b03      	ldr	r3, [sp, #12]
 800e5b8:	3307      	adds	r3, #7
 800e5ba:	f023 0307 	bic.w	r3, r3, #7
 800e5be:	3308      	adds	r3, #8
 800e5c0:	9303      	str	r3, [sp, #12]
 800e5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5c4:	4433      	add	r3, r6
 800e5c6:	9309      	str	r3, [sp, #36]	; 0x24
 800e5c8:	e767      	b.n	800e49a <_svfiprintf_r+0x4e>
 800e5ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5ce:	460c      	mov	r4, r1
 800e5d0:	2001      	movs	r0, #1
 800e5d2:	e7a5      	b.n	800e520 <_svfiprintf_r+0xd4>
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	3401      	adds	r4, #1
 800e5d8:	9305      	str	r3, [sp, #20]
 800e5da:	4619      	mov	r1, r3
 800e5dc:	f04f 0c0a 	mov.w	ip, #10
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5e6:	3a30      	subs	r2, #48	; 0x30
 800e5e8:	2a09      	cmp	r2, #9
 800e5ea:	d903      	bls.n	800e5f4 <_svfiprintf_r+0x1a8>
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d0c5      	beq.n	800e57c <_svfiprintf_r+0x130>
 800e5f0:	9105      	str	r1, [sp, #20]
 800e5f2:	e7c3      	b.n	800e57c <_svfiprintf_r+0x130>
 800e5f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5f8:	4604      	mov	r4, r0
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e7f0      	b.n	800e5e0 <_svfiprintf_r+0x194>
 800e5fe:	ab03      	add	r3, sp, #12
 800e600:	9300      	str	r3, [sp, #0]
 800e602:	462a      	mov	r2, r5
 800e604:	4b0f      	ldr	r3, [pc, #60]	; (800e644 <_svfiprintf_r+0x1f8>)
 800e606:	a904      	add	r1, sp, #16
 800e608:	4638      	mov	r0, r7
 800e60a:	f7fc fb41 	bl	800ac90 <_printf_float>
 800e60e:	1c42      	adds	r2, r0, #1
 800e610:	4606      	mov	r6, r0
 800e612:	d1d6      	bne.n	800e5c2 <_svfiprintf_r+0x176>
 800e614:	89ab      	ldrh	r3, [r5, #12]
 800e616:	065b      	lsls	r3, r3, #25
 800e618:	f53f af2c 	bmi.w	800e474 <_svfiprintf_r+0x28>
 800e61c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e61e:	b01d      	add	sp, #116	; 0x74
 800e620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e624:	ab03      	add	r3, sp, #12
 800e626:	9300      	str	r3, [sp, #0]
 800e628:	462a      	mov	r2, r5
 800e62a:	4b06      	ldr	r3, [pc, #24]	; (800e644 <_svfiprintf_r+0x1f8>)
 800e62c:	a904      	add	r1, sp, #16
 800e62e:	4638      	mov	r0, r7
 800e630:	f7fc fdba 	bl	800b1a8 <_printf_i>
 800e634:	e7eb      	b.n	800e60e <_svfiprintf_r+0x1c2>
 800e636:	bf00      	nop
 800e638:	0800fa84 	.word	0x0800fa84
 800e63c:	0800fa8e 	.word	0x0800fa8e
 800e640:	0800ac91 	.word	0x0800ac91
 800e644:	0800e395 	.word	0x0800e395
 800e648:	0800fa8a 	.word	0x0800fa8a
 800e64c:	00000000 	.word	0x00000000

0800e650 <nan>:
 800e650:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e658 <nan+0x8>
 800e654:	4770      	bx	lr
 800e656:	bf00      	nop
 800e658:	00000000 	.word	0x00000000
 800e65c:	7ff80000 	.word	0x7ff80000

0800e660 <_sbrk_r>:
 800e660:	b538      	push	{r3, r4, r5, lr}
 800e662:	4d06      	ldr	r5, [pc, #24]	; (800e67c <_sbrk_r+0x1c>)
 800e664:	2300      	movs	r3, #0
 800e666:	4604      	mov	r4, r0
 800e668:	4608      	mov	r0, r1
 800e66a:	602b      	str	r3, [r5, #0]
 800e66c:	f7f4 f8ea 	bl	8002844 <_sbrk>
 800e670:	1c43      	adds	r3, r0, #1
 800e672:	d102      	bne.n	800e67a <_sbrk_r+0x1a>
 800e674:	682b      	ldr	r3, [r5, #0]
 800e676:	b103      	cbz	r3, 800e67a <_sbrk_r+0x1a>
 800e678:	6023      	str	r3, [r4, #0]
 800e67a:	bd38      	pop	{r3, r4, r5, pc}
 800e67c:	24000cc4 	.word	0x24000cc4

0800e680 <strncmp>:
 800e680:	b510      	push	{r4, lr}
 800e682:	b17a      	cbz	r2, 800e6a4 <strncmp+0x24>
 800e684:	4603      	mov	r3, r0
 800e686:	3901      	subs	r1, #1
 800e688:	1884      	adds	r4, r0, r2
 800e68a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e68e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e692:	4290      	cmp	r0, r2
 800e694:	d101      	bne.n	800e69a <strncmp+0x1a>
 800e696:	42a3      	cmp	r3, r4
 800e698:	d101      	bne.n	800e69e <strncmp+0x1e>
 800e69a:	1a80      	subs	r0, r0, r2
 800e69c:	bd10      	pop	{r4, pc}
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	d1f3      	bne.n	800e68a <strncmp+0xa>
 800e6a2:	e7fa      	b.n	800e69a <strncmp+0x1a>
 800e6a4:	4610      	mov	r0, r2
 800e6a6:	e7f9      	b.n	800e69c <strncmp+0x1c>

0800e6a8 <__ascii_wctomb>:
 800e6a8:	b149      	cbz	r1, 800e6be <__ascii_wctomb+0x16>
 800e6aa:	2aff      	cmp	r2, #255	; 0xff
 800e6ac:	bf85      	ittet	hi
 800e6ae:	238a      	movhi	r3, #138	; 0x8a
 800e6b0:	6003      	strhi	r3, [r0, #0]
 800e6b2:	700a      	strbls	r2, [r1, #0]
 800e6b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800e6b8:	bf98      	it	ls
 800e6ba:	2001      	movls	r0, #1
 800e6bc:	4770      	bx	lr
 800e6be:	4608      	mov	r0, r1
 800e6c0:	4770      	bx	lr
	...

0800e6c4 <__assert_func>:
 800e6c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6c6:	4614      	mov	r4, r2
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	4b09      	ldr	r3, [pc, #36]	; (800e6f0 <__assert_func+0x2c>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	4605      	mov	r5, r0
 800e6d0:	68d8      	ldr	r0, [r3, #12]
 800e6d2:	b14c      	cbz	r4, 800e6e8 <__assert_func+0x24>
 800e6d4:	4b07      	ldr	r3, [pc, #28]	; (800e6f4 <__assert_func+0x30>)
 800e6d6:	9100      	str	r1, [sp, #0]
 800e6d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6dc:	4906      	ldr	r1, [pc, #24]	; (800e6f8 <__assert_func+0x34>)
 800e6de:	462b      	mov	r3, r5
 800e6e0:	f000 f80e 	bl	800e700 <fiprintf>
 800e6e4:	f000 fa8c 	bl	800ec00 <abort>
 800e6e8:	4b04      	ldr	r3, [pc, #16]	; (800e6fc <__assert_func+0x38>)
 800e6ea:	461c      	mov	r4, r3
 800e6ec:	e7f3      	b.n	800e6d6 <__assert_func+0x12>
 800e6ee:	bf00      	nop
 800e6f0:	24000010 	.word	0x24000010
 800e6f4:	0800fa95 	.word	0x0800fa95
 800e6f8:	0800faa2 	.word	0x0800faa2
 800e6fc:	0800fad0 	.word	0x0800fad0

0800e700 <fiprintf>:
 800e700:	b40e      	push	{r1, r2, r3}
 800e702:	b503      	push	{r0, r1, lr}
 800e704:	4601      	mov	r1, r0
 800e706:	ab03      	add	r3, sp, #12
 800e708:	4805      	ldr	r0, [pc, #20]	; (800e720 <fiprintf+0x20>)
 800e70a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e70e:	6800      	ldr	r0, [r0, #0]
 800e710:	9301      	str	r3, [sp, #4]
 800e712:	f000 f885 	bl	800e820 <_vfiprintf_r>
 800e716:	b002      	add	sp, #8
 800e718:	f85d eb04 	ldr.w	lr, [sp], #4
 800e71c:	b003      	add	sp, #12
 800e71e:	4770      	bx	lr
 800e720:	24000010 	.word	0x24000010

0800e724 <memmove>:
 800e724:	4288      	cmp	r0, r1
 800e726:	b510      	push	{r4, lr}
 800e728:	eb01 0402 	add.w	r4, r1, r2
 800e72c:	d902      	bls.n	800e734 <memmove+0x10>
 800e72e:	4284      	cmp	r4, r0
 800e730:	4623      	mov	r3, r4
 800e732:	d807      	bhi.n	800e744 <memmove+0x20>
 800e734:	1e43      	subs	r3, r0, #1
 800e736:	42a1      	cmp	r1, r4
 800e738:	d008      	beq.n	800e74c <memmove+0x28>
 800e73a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e73e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e742:	e7f8      	b.n	800e736 <memmove+0x12>
 800e744:	4402      	add	r2, r0
 800e746:	4601      	mov	r1, r0
 800e748:	428a      	cmp	r2, r1
 800e74a:	d100      	bne.n	800e74e <memmove+0x2a>
 800e74c:	bd10      	pop	{r4, pc}
 800e74e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e752:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e756:	e7f7      	b.n	800e748 <memmove+0x24>

0800e758 <__malloc_lock>:
 800e758:	4801      	ldr	r0, [pc, #4]	; (800e760 <__malloc_lock+0x8>)
 800e75a:	f000 bc11 	b.w	800ef80 <__retarget_lock_acquire_recursive>
 800e75e:	bf00      	nop
 800e760:	24000cc8 	.word	0x24000cc8

0800e764 <__malloc_unlock>:
 800e764:	4801      	ldr	r0, [pc, #4]	; (800e76c <__malloc_unlock+0x8>)
 800e766:	f000 bc0c 	b.w	800ef82 <__retarget_lock_release_recursive>
 800e76a:	bf00      	nop
 800e76c:	24000cc8 	.word	0x24000cc8

0800e770 <_realloc_r>:
 800e770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e774:	4680      	mov	r8, r0
 800e776:	4614      	mov	r4, r2
 800e778:	460e      	mov	r6, r1
 800e77a:	b921      	cbnz	r1, 800e786 <_realloc_r+0x16>
 800e77c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e780:	4611      	mov	r1, r2
 800e782:	f7ff bd93 	b.w	800e2ac <_malloc_r>
 800e786:	b92a      	cbnz	r2, 800e794 <_realloc_r+0x24>
 800e788:	f7ff fd24 	bl	800e1d4 <_free_r>
 800e78c:	4625      	mov	r5, r4
 800e78e:	4628      	mov	r0, r5
 800e790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e794:	f000 fc5c 	bl	800f050 <_malloc_usable_size_r>
 800e798:	4284      	cmp	r4, r0
 800e79a:	4607      	mov	r7, r0
 800e79c:	d802      	bhi.n	800e7a4 <_realloc_r+0x34>
 800e79e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e7a2:	d812      	bhi.n	800e7ca <_realloc_r+0x5a>
 800e7a4:	4621      	mov	r1, r4
 800e7a6:	4640      	mov	r0, r8
 800e7a8:	f7ff fd80 	bl	800e2ac <_malloc_r>
 800e7ac:	4605      	mov	r5, r0
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	d0ed      	beq.n	800e78e <_realloc_r+0x1e>
 800e7b2:	42bc      	cmp	r4, r7
 800e7b4:	4622      	mov	r2, r4
 800e7b6:	4631      	mov	r1, r6
 800e7b8:	bf28      	it	cs
 800e7ba:	463a      	movcs	r2, r7
 800e7bc:	f7ff f828 	bl	800d810 <memcpy>
 800e7c0:	4631      	mov	r1, r6
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	f7ff fd06 	bl	800e1d4 <_free_r>
 800e7c8:	e7e1      	b.n	800e78e <_realloc_r+0x1e>
 800e7ca:	4635      	mov	r5, r6
 800e7cc:	e7df      	b.n	800e78e <_realloc_r+0x1e>

0800e7ce <__sfputc_r>:
 800e7ce:	6893      	ldr	r3, [r2, #8]
 800e7d0:	3b01      	subs	r3, #1
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	b410      	push	{r4}
 800e7d6:	6093      	str	r3, [r2, #8]
 800e7d8:	da08      	bge.n	800e7ec <__sfputc_r+0x1e>
 800e7da:	6994      	ldr	r4, [r2, #24]
 800e7dc:	42a3      	cmp	r3, r4
 800e7de:	db01      	blt.n	800e7e4 <__sfputc_r+0x16>
 800e7e0:	290a      	cmp	r1, #10
 800e7e2:	d103      	bne.n	800e7ec <__sfputc_r+0x1e>
 800e7e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7e8:	f000 b94a 	b.w	800ea80 <__swbuf_r>
 800e7ec:	6813      	ldr	r3, [r2, #0]
 800e7ee:	1c58      	adds	r0, r3, #1
 800e7f0:	6010      	str	r0, [r2, #0]
 800e7f2:	7019      	strb	r1, [r3, #0]
 800e7f4:	4608      	mov	r0, r1
 800e7f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <__sfputs_r>:
 800e7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7fe:	4606      	mov	r6, r0
 800e800:	460f      	mov	r7, r1
 800e802:	4614      	mov	r4, r2
 800e804:	18d5      	adds	r5, r2, r3
 800e806:	42ac      	cmp	r4, r5
 800e808:	d101      	bne.n	800e80e <__sfputs_r+0x12>
 800e80a:	2000      	movs	r0, #0
 800e80c:	e007      	b.n	800e81e <__sfputs_r+0x22>
 800e80e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e812:	463a      	mov	r2, r7
 800e814:	4630      	mov	r0, r6
 800e816:	f7ff ffda 	bl	800e7ce <__sfputc_r>
 800e81a:	1c43      	adds	r3, r0, #1
 800e81c:	d1f3      	bne.n	800e806 <__sfputs_r+0xa>
 800e81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e820 <_vfiprintf_r>:
 800e820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e824:	460d      	mov	r5, r1
 800e826:	b09d      	sub	sp, #116	; 0x74
 800e828:	4614      	mov	r4, r2
 800e82a:	4698      	mov	r8, r3
 800e82c:	4606      	mov	r6, r0
 800e82e:	b118      	cbz	r0, 800e838 <_vfiprintf_r+0x18>
 800e830:	6983      	ldr	r3, [r0, #24]
 800e832:	b90b      	cbnz	r3, 800e838 <_vfiprintf_r+0x18>
 800e834:	f000 fb06 	bl	800ee44 <__sinit>
 800e838:	4b89      	ldr	r3, [pc, #548]	; (800ea60 <_vfiprintf_r+0x240>)
 800e83a:	429d      	cmp	r5, r3
 800e83c:	d11b      	bne.n	800e876 <_vfiprintf_r+0x56>
 800e83e:	6875      	ldr	r5, [r6, #4]
 800e840:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e842:	07d9      	lsls	r1, r3, #31
 800e844:	d405      	bmi.n	800e852 <_vfiprintf_r+0x32>
 800e846:	89ab      	ldrh	r3, [r5, #12]
 800e848:	059a      	lsls	r2, r3, #22
 800e84a:	d402      	bmi.n	800e852 <_vfiprintf_r+0x32>
 800e84c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e84e:	f000 fb97 	bl	800ef80 <__retarget_lock_acquire_recursive>
 800e852:	89ab      	ldrh	r3, [r5, #12]
 800e854:	071b      	lsls	r3, r3, #28
 800e856:	d501      	bpl.n	800e85c <_vfiprintf_r+0x3c>
 800e858:	692b      	ldr	r3, [r5, #16]
 800e85a:	b9eb      	cbnz	r3, 800e898 <_vfiprintf_r+0x78>
 800e85c:	4629      	mov	r1, r5
 800e85e:	4630      	mov	r0, r6
 800e860:	f000 f960 	bl	800eb24 <__swsetup_r>
 800e864:	b1c0      	cbz	r0, 800e898 <_vfiprintf_r+0x78>
 800e866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e868:	07dc      	lsls	r4, r3, #31
 800e86a:	d50e      	bpl.n	800e88a <_vfiprintf_r+0x6a>
 800e86c:	f04f 30ff 	mov.w	r0, #4294967295
 800e870:	b01d      	add	sp, #116	; 0x74
 800e872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e876:	4b7b      	ldr	r3, [pc, #492]	; (800ea64 <_vfiprintf_r+0x244>)
 800e878:	429d      	cmp	r5, r3
 800e87a:	d101      	bne.n	800e880 <_vfiprintf_r+0x60>
 800e87c:	68b5      	ldr	r5, [r6, #8]
 800e87e:	e7df      	b.n	800e840 <_vfiprintf_r+0x20>
 800e880:	4b79      	ldr	r3, [pc, #484]	; (800ea68 <_vfiprintf_r+0x248>)
 800e882:	429d      	cmp	r5, r3
 800e884:	bf08      	it	eq
 800e886:	68f5      	ldreq	r5, [r6, #12]
 800e888:	e7da      	b.n	800e840 <_vfiprintf_r+0x20>
 800e88a:	89ab      	ldrh	r3, [r5, #12]
 800e88c:	0598      	lsls	r0, r3, #22
 800e88e:	d4ed      	bmi.n	800e86c <_vfiprintf_r+0x4c>
 800e890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e892:	f000 fb76 	bl	800ef82 <__retarget_lock_release_recursive>
 800e896:	e7e9      	b.n	800e86c <_vfiprintf_r+0x4c>
 800e898:	2300      	movs	r3, #0
 800e89a:	9309      	str	r3, [sp, #36]	; 0x24
 800e89c:	2320      	movs	r3, #32
 800e89e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8a6:	2330      	movs	r3, #48	; 0x30
 800e8a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ea6c <_vfiprintf_r+0x24c>
 800e8ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8b0:	f04f 0901 	mov.w	r9, #1
 800e8b4:	4623      	mov	r3, r4
 800e8b6:	469a      	mov	sl, r3
 800e8b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8bc:	b10a      	cbz	r2, 800e8c2 <_vfiprintf_r+0xa2>
 800e8be:	2a25      	cmp	r2, #37	; 0x25
 800e8c0:	d1f9      	bne.n	800e8b6 <_vfiprintf_r+0x96>
 800e8c2:	ebba 0b04 	subs.w	fp, sl, r4
 800e8c6:	d00b      	beq.n	800e8e0 <_vfiprintf_r+0xc0>
 800e8c8:	465b      	mov	r3, fp
 800e8ca:	4622      	mov	r2, r4
 800e8cc:	4629      	mov	r1, r5
 800e8ce:	4630      	mov	r0, r6
 800e8d0:	f7ff ff94 	bl	800e7fc <__sfputs_r>
 800e8d4:	3001      	adds	r0, #1
 800e8d6:	f000 80aa 	beq.w	800ea2e <_vfiprintf_r+0x20e>
 800e8da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8dc:	445a      	add	r2, fp
 800e8de:	9209      	str	r2, [sp, #36]	; 0x24
 800e8e0:	f89a 3000 	ldrb.w	r3, [sl]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	f000 80a2 	beq.w	800ea2e <_vfiprintf_r+0x20e>
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e8f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8f4:	f10a 0a01 	add.w	sl, sl, #1
 800e8f8:	9304      	str	r3, [sp, #16]
 800e8fa:	9307      	str	r3, [sp, #28]
 800e8fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e900:	931a      	str	r3, [sp, #104]	; 0x68
 800e902:	4654      	mov	r4, sl
 800e904:	2205      	movs	r2, #5
 800e906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e90a:	4858      	ldr	r0, [pc, #352]	; (800ea6c <_vfiprintf_r+0x24c>)
 800e90c:	f7f1 fd00 	bl	8000310 <memchr>
 800e910:	9a04      	ldr	r2, [sp, #16]
 800e912:	b9d8      	cbnz	r0, 800e94c <_vfiprintf_r+0x12c>
 800e914:	06d1      	lsls	r1, r2, #27
 800e916:	bf44      	itt	mi
 800e918:	2320      	movmi	r3, #32
 800e91a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e91e:	0713      	lsls	r3, r2, #28
 800e920:	bf44      	itt	mi
 800e922:	232b      	movmi	r3, #43	; 0x2b
 800e924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e928:	f89a 3000 	ldrb.w	r3, [sl]
 800e92c:	2b2a      	cmp	r3, #42	; 0x2a
 800e92e:	d015      	beq.n	800e95c <_vfiprintf_r+0x13c>
 800e930:	9a07      	ldr	r2, [sp, #28]
 800e932:	4654      	mov	r4, sl
 800e934:	2000      	movs	r0, #0
 800e936:	f04f 0c0a 	mov.w	ip, #10
 800e93a:	4621      	mov	r1, r4
 800e93c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e940:	3b30      	subs	r3, #48	; 0x30
 800e942:	2b09      	cmp	r3, #9
 800e944:	d94e      	bls.n	800e9e4 <_vfiprintf_r+0x1c4>
 800e946:	b1b0      	cbz	r0, 800e976 <_vfiprintf_r+0x156>
 800e948:	9207      	str	r2, [sp, #28]
 800e94a:	e014      	b.n	800e976 <_vfiprintf_r+0x156>
 800e94c:	eba0 0308 	sub.w	r3, r0, r8
 800e950:	fa09 f303 	lsl.w	r3, r9, r3
 800e954:	4313      	orrs	r3, r2
 800e956:	9304      	str	r3, [sp, #16]
 800e958:	46a2      	mov	sl, r4
 800e95a:	e7d2      	b.n	800e902 <_vfiprintf_r+0xe2>
 800e95c:	9b03      	ldr	r3, [sp, #12]
 800e95e:	1d19      	adds	r1, r3, #4
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	9103      	str	r1, [sp, #12]
 800e964:	2b00      	cmp	r3, #0
 800e966:	bfbb      	ittet	lt
 800e968:	425b      	neglt	r3, r3
 800e96a:	f042 0202 	orrlt.w	r2, r2, #2
 800e96e:	9307      	strge	r3, [sp, #28]
 800e970:	9307      	strlt	r3, [sp, #28]
 800e972:	bfb8      	it	lt
 800e974:	9204      	strlt	r2, [sp, #16]
 800e976:	7823      	ldrb	r3, [r4, #0]
 800e978:	2b2e      	cmp	r3, #46	; 0x2e
 800e97a:	d10c      	bne.n	800e996 <_vfiprintf_r+0x176>
 800e97c:	7863      	ldrb	r3, [r4, #1]
 800e97e:	2b2a      	cmp	r3, #42	; 0x2a
 800e980:	d135      	bne.n	800e9ee <_vfiprintf_r+0x1ce>
 800e982:	9b03      	ldr	r3, [sp, #12]
 800e984:	1d1a      	adds	r2, r3, #4
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	9203      	str	r2, [sp, #12]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	bfb8      	it	lt
 800e98e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e992:	3402      	adds	r4, #2
 800e994:	9305      	str	r3, [sp, #20]
 800e996:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ea7c <_vfiprintf_r+0x25c>
 800e99a:	7821      	ldrb	r1, [r4, #0]
 800e99c:	2203      	movs	r2, #3
 800e99e:	4650      	mov	r0, sl
 800e9a0:	f7f1 fcb6 	bl	8000310 <memchr>
 800e9a4:	b140      	cbz	r0, 800e9b8 <_vfiprintf_r+0x198>
 800e9a6:	2340      	movs	r3, #64	; 0x40
 800e9a8:	eba0 000a 	sub.w	r0, r0, sl
 800e9ac:	fa03 f000 	lsl.w	r0, r3, r0
 800e9b0:	9b04      	ldr	r3, [sp, #16]
 800e9b2:	4303      	orrs	r3, r0
 800e9b4:	3401      	adds	r4, #1
 800e9b6:	9304      	str	r3, [sp, #16]
 800e9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9bc:	482c      	ldr	r0, [pc, #176]	; (800ea70 <_vfiprintf_r+0x250>)
 800e9be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9c2:	2206      	movs	r2, #6
 800e9c4:	f7f1 fca4 	bl	8000310 <memchr>
 800e9c8:	2800      	cmp	r0, #0
 800e9ca:	d03f      	beq.n	800ea4c <_vfiprintf_r+0x22c>
 800e9cc:	4b29      	ldr	r3, [pc, #164]	; (800ea74 <_vfiprintf_r+0x254>)
 800e9ce:	bb1b      	cbnz	r3, 800ea18 <_vfiprintf_r+0x1f8>
 800e9d0:	9b03      	ldr	r3, [sp, #12]
 800e9d2:	3307      	adds	r3, #7
 800e9d4:	f023 0307 	bic.w	r3, r3, #7
 800e9d8:	3308      	adds	r3, #8
 800e9da:	9303      	str	r3, [sp, #12]
 800e9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9de:	443b      	add	r3, r7
 800e9e0:	9309      	str	r3, [sp, #36]	; 0x24
 800e9e2:	e767      	b.n	800e8b4 <_vfiprintf_r+0x94>
 800e9e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9e8:	460c      	mov	r4, r1
 800e9ea:	2001      	movs	r0, #1
 800e9ec:	e7a5      	b.n	800e93a <_vfiprintf_r+0x11a>
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	3401      	adds	r4, #1
 800e9f2:	9305      	str	r3, [sp, #20]
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	f04f 0c0a 	mov.w	ip, #10
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea00:	3a30      	subs	r2, #48	; 0x30
 800ea02:	2a09      	cmp	r2, #9
 800ea04:	d903      	bls.n	800ea0e <_vfiprintf_r+0x1ee>
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d0c5      	beq.n	800e996 <_vfiprintf_r+0x176>
 800ea0a:	9105      	str	r1, [sp, #20]
 800ea0c:	e7c3      	b.n	800e996 <_vfiprintf_r+0x176>
 800ea0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea12:	4604      	mov	r4, r0
 800ea14:	2301      	movs	r3, #1
 800ea16:	e7f0      	b.n	800e9fa <_vfiprintf_r+0x1da>
 800ea18:	ab03      	add	r3, sp, #12
 800ea1a:	9300      	str	r3, [sp, #0]
 800ea1c:	462a      	mov	r2, r5
 800ea1e:	4b16      	ldr	r3, [pc, #88]	; (800ea78 <_vfiprintf_r+0x258>)
 800ea20:	a904      	add	r1, sp, #16
 800ea22:	4630      	mov	r0, r6
 800ea24:	f7fc f934 	bl	800ac90 <_printf_float>
 800ea28:	4607      	mov	r7, r0
 800ea2a:	1c78      	adds	r0, r7, #1
 800ea2c:	d1d6      	bne.n	800e9dc <_vfiprintf_r+0x1bc>
 800ea2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea30:	07d9      	lsls	r1, r3, #31
 800ea32:	d405      	bmi.n	800ea40 <_vfiprintf_r+0x220>
 800ea34:	89ab      	ldrh	r3, [r5, #12]
 800ea36:	059a      	lsls	r2, r3, #22
 800ea38:	d402      	bmi.n	800ea40 <_vfiprintf_r+0x220>
 800ea3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea3c:	f000 faa1 	bl	800ef82 <__retarget_lock_release_recursive>
 800ea40:	89ab      	ldrh	r3, [r5, #12]
 800ea42:	065b      	lsls	r3, r3, #25
 800ea44:	f53f af12 	bmi.w	800e86c <_vfiprintf_r+0x4c>
 800ea48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea4a:	e711      	b.n	800e870 <_vfiprintf_r+0x50>
 800ea4c:	ab03      	add	r3, sp, #12
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	462a      	mov	r2, r5
 800ea52:	4b09      	ldr	r3, [pc, #36]	; (800ea78 <_vfiprintf_r+0x258>)
 800ea54:	a904      	add	r1, sp, #16
 800ea56:	4630      	mov	r0, r6
 800ea58:	f7fc fba6 	bl	800b1a8 <_printf_i>
 800ea5c:	e7e4      	b.n	800ea28 <_vfiprintf_r+0x208>
 800ea5e:	bf00      	nop
 800ea60:	0800faf4 	.word	0x0800faf4
 800ea64:	0800fb14 	.word	0x0800fb14
 800ea68:	0800fad4 	.word	0x0800fad4
 800ea6c:	0800fa84 	.word	0x0800fa84
 800ea70:	0800fa8e 	.word	0x0800fa8e
 800ea74:	0800ac91 	.word	0x0800ac91
 800ea78:	0800e7fd 	.word	0x0800e7fd
 800ea7c:	0800fa8a 	.word	0x0800fa8a

0800ea80 <__swbuf_r>:
 800ea80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea82:	460e      	mov	r6, r1
 800ea84:	4614      	mov	r4, r2
 800ea86:	4605      	mov	r5, r0
 800ea88:	b118      	cbz	r0, 800ea92 <__swbuf_r+0x12>
 800ea8a:	6983      	ldr	r3, [r0, #24]
 800ea8c:	b90b      	cbnz	r3, 800ea92 <__swbuf_r+0x12>
 800ea8e:	f000 f9d9 	bl	800ee44 <__sinit>
 800ea92:	4b21      	ldr	r3, [pc, #132]	; (800eb18 <__swbuf_r+0x98>)
 800ea94:	429c      	cmp	r4, r3
 800ea96:	d12b      	bne.n	800eaf0 <__swbuf_r+0x70>
 800ea98:	686c      	ldr	r4, [r5, #4]
 800ea9a:	69a3      	ldr	r3, [r4, #24]
 800ea9c:	60a3      	str	r3, [r4, #8]
 800ea9e:	89a3      	ldrh	r3, [r4, #12]
 800eaa0:	071a      	lsls	r2, r3, #28
 800eaa2:	d52f      	bpl.n	800eb04 <__swbuf_r+0x84>
 800eaa4:	6923      	ldr	r3, [r4, #16]
 800eaa6:	b36b      	cbz	r3, 800eb04 <__swbuf_r+0x84>
 800eaa8:	6923      	ldr	r3, [r4, #16]
 800eaaa:	6820      	ldr	r0, [r4, #0]
 800eaac:	1ac0      	subs	r0, r0, r3
 800eaae:	6963      	ldr	r3, [r4, #20]
 800eab0:	b2f6      	uxtb	r6, r6
 800eab2:	4283      	cmp	r3, r0
 800eab4:	4637      	mov	r7, r6
 800eab6:	dc04      	bgt.n	800eac2 <__swbuf_r+0x42>
 800eab8:	4621      	mov	r1, r4
 800eaba:	4628      	mov	r0, r5
 800eabc:	f000 f92e 	bl	800ed1c <_fflush_r>
 800eac0:	bb30      	cbnz	r0, 800eb10 <__swbuf_r+0x90>
 800eac2:	68a3      	ldr	r3, [r4, #8]
 800eac4:	3b01      	subs	r3, #1
 800eac6:	60a3      	str	r3, [r4, #8]
 800eac8:	6823      	ldr	r3, [r4, #0]
 800eaca:	1c5a      	adds	r2, r3, #1
 800eacc:	6022      	str	r2, [r4, #0]
 800eace:	701e      	strb	r6, [r3, #0]
 800ead0:	6963      	ldr	r3, [r4, #20]
 800ead2:	3001      	adds	r0, #1
 800ead4:	4283      	cmp	r3, r0
 800ead6:	d004      	beq.n	800eae2 <__swbuf_r+0x62>
 800ead8:	89a3      	ldrh	r3, [r4, #12]
 800eada:	07db      	lsls	r3, r3, #31
 800eadc:	d506      	bpl.n	800eaec <__swbuf_r+0x6c>
 800eade:	2e0a      	cmp	r6, #10
 800eae0:	d104      	bne.n	800eaec <__swbuf_r+0x6c>
 800eae2:	4621      	mov	r1, r4
 800eae4:	4628      	mov	r0, r5
 800eae6:	f000 f919 	bl	800ed1c <_fflush_r>
 800eaea:	b988      	cbnz	r0, 800eb10 <__swbuf_r+0x90>
 800eaec:	4638      	mov	r0, r7
 800eaee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaf0:	4b0a      	ldr	r3, [pc, #40]	; (800eb1c <__swbuf_r+0x9c>)
 800eaf2:	429c      	cmp	r4, r3
 800eaf4:	d101      	bne.n	800eafa <__swbuf_r+0x7a>
 800eaf6:	68ac      	ldr	r4, [r5, #8]
 800eaf8:	e7cf      	b.n	800ea9a <__swbuf_r+0x1a>
 800eafa:	4b09      	ldr	r3, [pc, #36]	; (800eb20 <__swbuf_r+0xa0>)
 800eafc:	429c      	cmp	r4, r3
 800eafe:	bf08      	it	eq
 800eb00:	68ec      	ldreq	r4, [r5, #12]
 800eb02:	e7ca      	b.n	800ea9a <__swbuf_r+0x1a>
 800eb04:	4621      	mov	r1, r4
 800eb06:	4628      	mov	r0, r5
 800eb08:	f000 f80c 	bl	800eb24 <__swsetup_r>
 800eb0c:	2800      	cmp	r0, #0
 800eb0e:	d0cb      	beq.n	800eaa8 <__swbuf_r+0x28>
 800eb10:	f04f 37ff 	mov.w	r7, #4294967295
 800eb14:	e7ea      	b.n	800eaec <__swbuf_r+0x6c>
 800eb16:	bf00      	nop
 800eb18:	0800faf4 	.word	0x0800faf4
 800eb1c:	0800fb14 	.word	0x0800fb14
 800eb20:	0800fad4 	.word	0x0800fad4

0800eb24 <__swsetup_r>:
 800eb24:	4b32      	ldr	r3, [pc, #200]	; (800ebf0 <__swsetup_r+0xcc>)
 800eb26:	b570      	push	{r4, r5, r6, lr}
 800eb28:	681d      	ldr	r5, [r3, #0]
 800eb2a:	4606      	mov	r6, r0
 800eb2c:	460c      	mov	r4, r1
 800eb2e:	b125      	cbz	r5, 800eb3a <__swsetup_r+0x16>
 800eb30:	69ab      	ldr	r3, [r5, #24]
 800eb32:	b913      	cbnz	r3, 800eb3a <__swsetup_r+0x16>
 800eb34:	4628      	mov	r0, r5
 800eb36:	f000 f985 	bl	800ee44 <__sinit>
 800eb3a:	4b2e      	ldr	r3, [pc, #184]	; (800ebf4 <__swsetup_r+0xd0>)
 800eb3c:	429c      	cmp	r4, r3
 800eb3e:	d10f      	bne.n	800eb60 <__swsetup_r+0x3c>
 800eb40:	686c      	ldr	r4, [r5, #4]
 800eb42:	89a3      	ldrh	r3, [r4, #12]
 800eb44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb48:	0719      	lsls	r1, r3, #28
 800eb4a:	d42c      	bmi.n	800eba6 <__swsetup_r+0x82>
 800eb4c:	06dd      	lsls	r5, r3, #27
 800eb4e:	d411      	bmi.n	800eb74 <__swsetup_r+0x50>
 800eb50:	2309      	movs	r3, #9
 800eb52:	6033      	str	r3, [r6, #0]
 800eb54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eb58:	81a3      	strh	r3, [r4, #12]
 800eb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb5e:	e03e      	b.n	800ebde <__swsetup_r+0xba>
 800eb60:	4b25      	ldr	r3, [pc, #148]	; (800ebf8 <__swsetup_r+0xd4>)
 800eb62:	429c      	cmp	r4, r3
 800eb64:	d101      	bne.n	800eb6a <__swsetup_r+0x46>
 800eb66:	68ac      	ldr	r4, [r5, #8]
 800eb68:	e7eb      	b.n	800eb42 <__swsetup_r+0x1e>
 800eb6a:	4b24      	ldr	r3, [pc, #144]	; (800ebfc <__swsetup_r+0xd8>)
 800eb6c:	429c      	cmp	r4, r3
 800eb6e:	bf08      	it	eq
 800eb70:	68ec      	ldreq	r4, [r5, #12]
 800eb72:	e7e6      	b.n	800eb42 <__swsetup_r+0x1e>
 800eb74:	0758      	lsls	r0, r3, #29
 800eb76:	d512      	bpl.n	800eb9e <__swsetup_r+0x7a>
 800eb78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb7a:	b141      	cbz	r1, 800eb8e <__swsetup_r+0x6a>
 800eb7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb80:	4299      	cmp	r1, r3
 800eb82:	d002      	beq.n	800eb8a <__swsetup_r+0x66>
 800eb84:	4630      	mov	r0, r6
 800eb86:	f7ff fb25 	bl	800e1d4 <_free_r>
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	6363      	str	r3, [r4, #52]	; 0x34
 800eb8e:	89a3      	ldrh	r3, [r4, #12]
 800eb90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eb94:	81a3      	strh	r3, [r4, #12]
 800eb96:	2300      	movs	r3, #0
 800eb98:	6063      	str	r3, [r4, #4]
 800eb9a:	6923      	ldr	r3, [r4, #16]
 800eb9c:	6023      	str	r3, [r4, #0]
 800eb9e:	89a3      	ldrh	r3, [r4, #12]
 800eba0:	f043 0308 	orr.w	r3, r3, #8
 800eba4:	81a3      	strh	r3, [r4, #12]
 800eba6:	6923      	ldr	r3, [r4, #16]
 800eba8:	b94b      	cbnz	r3, 800ebbe <__swsetup_r+0x9a>
 800ebaa:	89a3      	ldrh	r3, [r4, #12]
 800ebac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ebb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebb4:	d003      	beq.n	800ebbe <__swsetup_r+0x9a>
 800ebb6:	4621      	mov	r1, r4
 800ebb8:	4630      	mov	r0, r6
 800ebba:	f000 fa09 	bl	800efd0 <__smakebuf_r>
 800ebbe:	89a0      	ldrh	r0, [r4, #12]
 800ebc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ebc4:	f010 0301 	ands.w	r3, r0, #1
 800ebc8:	d00a      	beq.n	800ebe0 <__swsetup_r+0xbc>
 800ebca:	2300      	movs	r3, #0
 800ebcc:	60a3      	str	r3, [r4, #8]
 800ebce:	6963      	ldr	r3, [r4, #20]
 800ebd0:	425b      	negs	r3, r3
 800ebd2:	61a3      	str	r3, [r4, #24]
 800ebd4:	6923      	ldr	r3, [r4, #16]
 800ebd6:	b943      	cbnz	r3, 800ebea <__swsetup_r+0xc6>
 800ebd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ebdc:	d1ba      	bne.n	800eb54 <__swsetup_r+0x30>
 800ebde:	bd70      	pop	{r4, r5, r6, pc}
 800ebe0:	0781      	lsls	r1, r0, #30
 800ebe2:	bf58      	it	pl
 800ebe4:	6963      	ldrpl	r3, [r4, #20]
 800ebe6:	60a3      	str	r3, [r4, #8]
 800ebe8:	e7f4      	b.n	800ebd4 <__swsetup_r+0xb0>
 800ebea:	2000      	movs	r0, #0
 800ebec:	e7f7      	b.n	800ebde <__swsetup_r+0xba>
 800ebee:	bf00      	nop
 800ebf0:	24000010 	.word	0x24000010
 800ebf4:	0800faf4 	.word	0x0800faf4
 800ebf8:	0800fb14 	.word	0x0800fb14
 800ebfc:	0800fad4 	.word	0x0800fad4

0800ec00 <abort>:
 800ec00:	b508      	push	{r3, lr}
 800ec02:	2006      	movs	r0, #6
 800ec04:	f000 fa54 	bl	800f0b0 <raise>
 800ec08:	2001      	movs	r0, #1
 800ec0a:	f7f3 fda3 	bl	8002754 <_exit>
	...

0800ec10 <__sflush_r>:
 800ec10:	898a      	ldrh	r2, [r1, #12]
 800ec12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec16:	4605      	mov	r5, r0
 800ec18:	0710      	lsls	r0, r2, #28
 800ec1a:	460c      	mov	r4, r1
 800ec1c:	d458      	bmi.n	800ecd0 <__sflush_r+0xc0>
 800ec1e:	684b      	ldr	r3, [r1, #4]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	dc05      	bgt.n	800ec30 <__sflush_r+0x20>
 800ec24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	dc02      	bgt.n	800ec30 <__sflush_r+0x20>
 800ec2a:	2000      	movs	r0, #0
 800ec2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec32:	2e00      	cmp	r6, #0
 800ec34:	d0f9      	beq.n	800ec2a <__sflush_r+0x1a>
 800ec36:	2300      	movs	r3, #0
 800ec38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ec3c:	682f      	ldr	r7, [r5, #0]
 800ec3e:	602b      	str	r3, [r5, #0]
 800ec40:	d032      	beq.n	800eca8 <__sflush_r+0x98>
 800ec42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ec44:	89a3      	ldrh	r3, [r4, #12]
 800ec46:	075a      	lsls	r2, r3, #29
 800ec48:	d505      	bpl.n	800ec56 <__sflush_r+0x46>
 800ec4a:	6863      	ldr	r3, [r4, #4]
 800ec4c:	1ac0      	subs	r0, r0, r3
 800ec4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec50:	b10b      	cbz	r3, 800ec56 <__sflush_r+0x46>
 800ec52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec54:	1ac0      	subs	r0, r0, r3
 800ec56:	2300      	movs	r3, #0
 800ec58:	4602      	mov	r2, r0
 800ec5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec5c:	6a21      	ldr	r1, [r4, #32]
 800ec5e:	4628      	mov	r0, r5
 800ec60:	47b0      	blx	r6
 800ec62:	1c43      	adds	r3, r0, #1
 800ec64:	89a3      	ldrh	r3, [r4, #12]
 800ec66:	d106      	bne.n	800ec76 <__sflush_r+0x66>
 800ec68:	6829      	ldr	r1, [r5, #0]
 800ec6a:	291d      	cmp	r1, #29
 800ec6c:	d82c      	bhi.n	800ecc8 <__sflush_r+0xb8>
 800ec6e:	4a2a      	ldr	r2, [pc, #168]	; (800ed18 <__sflush_r+0x108>)
 800ec70:	40ca      	lsrs	r2, r1
 800ec72:	07d6      	lsls	r6, r2, #31
 800ec74:	d528      	bpl.n	800ecc8 <__sflush_r+0xb8>
 800ec76:	2200      	movs	r2, #0
 800ec78:	6062      	str	r2, [r4, #4]
 800ec7a:	04d9      	lsls	r1, r3, #19
 800ec7c:	6922      	ldr	r2, [r4, #16]
 800ec7e:	6022      	str	r2, [r4, #0]
 800ec80:	d504      	bpl.n	800ec8c <__sflush_r+0x7c>
 800ec82:	1c42      	adds	r2, r0, #1
 800ec84:	d101      	bne.n	800ec8a <__sflush_r+0x7a>
 800ec86:	682b      	ldr	r3, [r5, #0]
 800ec88:	b903      	cbnz	r3, 800ec8c <__sflush_r+0x7c>
 800ec8a:	6560      	str	r0, [r4, #84]	; 0x54
 800ec8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec8e:	602f      	str	r7, [r5, #0]
 800ec90:	2900      	cmp	r1, #0
 800ec92:	d0ca      	beq.n	800ec2a <__sflush_r+0x1a>
 800ec94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec98:	4299      	cmp	r1, r3
 800ec9a:	d002      	beq.n	800eca2 <__sflush_r+0x92>
 800ec9c:	4628      	mov	r0, r5
 800ec9e:	f7ff fa99 	bl	800e1d4 <_free_r>
 800eca2:	2000      	movs	r0, #0
 800eca4:	6360      	str	r0, [r4, #52]	; 0x34
 800eca6:	e7c1      	b.n	800ec2c <__sflush_r+0x1c>
 800eca8:	6a21      	ldr	r1, [r4, #32]
 800ecaa:	2301      	movs	r3, #1
 800ecac:	4628      	mov	r0, r5
 800ecae:	47b0      	blx	r6
 800ecb0:	1c41      	adds	r1, r0, #1
 800ecb2:	d1c7      	bne.n	800ec44 <__sflush_r+0x34>
 800ecb4:	682b      	ldr	r3, [r5, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d0c4      	beq.n	800ec44 <__sflush_r+0x34>
 800ecba:	2b1d      	cmp	r3, #29
 800ecbc:	d001      	beq.n	800ecc2 <__sflush_r+0xb2>
 800ecbe:	2b16      	cmp	r3, #22
 800ecc0:	d101      	bne.n	800ecc6 <__sflush_r+0xb6>
 800ecc2:	602f      	str	r7, [r5, #0]
 800ecc4:	e7b1      	b.n	800ec2a <__sflush_r+0x1a>
 800ecc6:	89a3      	ldrh	r3, [r4, #12]
 800ecc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eccc:	81a3      	strh	r3, [r4, #12]
 800ecce:	e7ad      	b.n	800ec2c <__sflush_r+0x1c>
 800ecd0:	690f      	ldr	r7, [r1, #16]
 800ecd2:	2f00      	cmp	r7, #0
 800ecd4:	d0a9      	beq.n	800ec2a <__sflush_r+0x1a>
 800ecd6:	0793      	lsls	r3, r2, #30
 800ecd8:	680e      	ldr	r6, [r1, #0]
 800ecda:	bf08      	it	eq
 800ecdc:	694b      	ldreq	r3, [r1, #20]
 800ecde:	600f      	str	r7, [r1, #0]
 800ece0:	bf18      	it	ne
 800ece2:	2300      	movne	r3, #0
 800ece4:	eba6 0807 	sub.w	r8, r6, r7
 800ece8:	608b      	str	r3, [r1, #8]
 800ecea:	f1b8 0f00 	cmp.w	r8, #0
 800ecee:	dd9c      	ble.n	800ec2a <__sflush_r+0x1a>
 800ecf0:	6a21      	ldr	r1, [r4, #32]
 800ecf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ecf4:	4643      	mov	r3, r8
 800ecf6:	463a      	mov	r2, r7
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	47b0      	blx	r6
 800ecfc:	2800      	cmp	r0, #0
 800ecfe:	dc06      	bgt.n	800ed0e <__sflush_r+0xfe>
 800ed00:	89a3      	ldrh	r3, [r4, #12]
 800ed02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed06:	81a3      	strh	r3, [r4, #12]
 800ed08:	f04f 30ff 	mov.w	r0, #4294967295
 800ed0c:	e78e      	b.n	800ec2c <__sflush_r+0x1c>
 800ed0e:	4407      	add	r7, r0
 800ed10:	eba8 0800 	sub.w	r8, r8, r0
 800ed14:	e7e9      	b.n	800ecea <__sflush_r+0xda>
 800ed16:	bf00      	nop
 800ed18:	20400001 	.word	0x20400001

0800ed1c <_fflush_r>:
 800ed1c:	b538      	push	{r3, r4, r5, lr}
 800ed1e:	690b      	ldr	r3, [r1, #16]
 800ed20:	4605      	mov	r5, r0
 800ed22:	460c      	mov	r4, r1
 800ed24:	b913      	cbnz	r3, 800ed2c <_fflush_r+0x10>
 800ed26:	2500      	movs	r5, #0
 800ed28:	4628      	mov	r0, r5
 800ed2a:	bd38      	pop	{r3, r4, r5, pc}
 800ed2c:	b118      	cbz	r0, 800ed36 <_fflush_r+0x1a>
 800ed2e:	6983      	ldr	r3, [r0, #24]
 800ed30:	b90b      	cbnz	r3, 800ed36 <_fflush_r+0x1a>
 800ed32:	f000 f887 	bl	800ee44 <__sinit>
 800ed36:	4b14      	ldr	r3, [pc, #80]	; (800ed88 <_fflush_r+0x6c>)
 800ed38:	429c      	cmp	r4, r3
 800ed3a:	d11b      	bne.n	800ed74 <_fflush_r+0x58>
 800ed3c:	686c      	ldr	r4, [r5, #4]
 800ed3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d0ef      	beq.n	800ed26 <_fflush_r+0xa>
 800ed46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ed48:	07d0      	lsls	r0, r2, #31
 800ed4a:	d404      	bmi.n	800ed56 <_fflush_r+0x3a>
 800ed4c:	0599      	lsls	r1, r3, #22
 800ed4e:	d402      	bmi.n	800ed56 <_fflush_r+0x3a>
 800ed50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed52:	f000 f915 	bl	800ef80 <__retarget_lock_acquire_recursive>
 800ed56:	4628      	mov	r0, r5
 800ed58:	4621      	mov	r1, r4
 800ed5a:	f7ff ff59 	bl	800ec10 <__sflush_r>
 800ed5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed60:	07da      	lsls	r2, r3, #31
 800ed62:	4605      	mov	r5, r0
 800ed64:	d4e0      	bmi.n	800ed28 <_fflush_r+0xc>
 800ed66:	89a3      	ldrh	r3, [r4, #12]
 800ed68:	059b      	lsls	r3, r3, #22
 800ed6a:	d4dd      	bmi.n	800ed28 <_fflush_r+0xc>
 800ed6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed6e:	f000 f908 	bl	800ef82 <__retarget_lock_release_recursive>
 800ed72:	e7d9      	b.n	800ed28 <_fflush_r+0xc>
 800ed74:	4b05      	ldr	r3, [pc, #20]	; (800ed8c <_fflush_r+0x70>)
 800ed76:	429c      	cmp	r4, r3
 800ed78:	d101      	bne.n	800ed7e <_fflush_r+0x62>
 800ed7a:	68ac      	ldr	r4, [r5, #8]
 800ed7c:	e7df      	b.n	800ed3e <_fflush_r+0x22>
 800ed7e:	4b04      	ldr	r3, [pc, #16]	; (800ed90 <_fflush_r+0x74>)
 800ed80:	429c      	cmp	r4, r3
 800ed82:	bf08      	it	eq
 800ed84:	68ec      	ldreq	r4, [r5, #12]
 800ed86:	e7da      	b.n	800ed3e <_fflush_r+0x22>
 800ed88:	0800faf4 	.word	0x0800faf4
 800ed8c:	0800fb14 	.word	0x0800fb14
 800ed90:	0800fad4 	.word	0x0800fad4

0800ed94 <std>:
 800ed94:	2300      	movs	r3, #0
 800ed96:	b510      	push	{r4, lr}
 800ed98:	4604      	mov	r4, r0
 800ed9a:	e9c0 3300 	strd	r3, r3, [r0]
 800ed9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eda2:	6083      	str	r3, [r0, #8]
 800eda4:	8181      	strh	r1, [r0, #12]
 800eda6:	6643      	str	r3, [r0, #100]	; 0x64
 800eda8:	81c2      	strh	r2, [r0, #14]
 800edaa:	6183      	str	r3, [r0, #24]
 800edac:	4619      	mov	r1, r3
 800edae:	2208      	movs	r2, #8
 800edb0:	305c      	adds	r0, #92	; 0x5c
 800edb2:	f7fb fed3 	bl	800ab5c <memset>
 800edb6:	4b05      	ldr	r3, [pc, #20]	; (800edcc <std+0x38>)
 800edb8:	6263      	str	r3, [r4, #36]	; 0x24
 800edba:	4b05      	ldr	r3, [pc, #20]	; (800edd0 <std+0x3c>)
 800edbc:	62a3      	str	r3, [r4, #40]	; 0x28
 800edbe:	4b05      	ldr	r3, [pc, #20]	; (800edd4 <std+0x40>)
 800edc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800edc2:	4b05      	ldr	r3, [pc, #20]	; (800edd8 <std+0x44>)
 800edc4:	6224      	str	r4, [r4, #32]
 800edc6:	6323      	str	r3, [r4, #48]	; 0x30
 800edc8:	bd10      	pop	{r4, pc}
 800edca:	bf00      	nop
 800edcc:	0800f0e9 	.word	0x0800f0e9
 800edd0:	0800f10b 	.word	0x0800f10b
 800edd4:	0800f143 	.word	0x0800f143
 800edd8:	0800f167 	.word	0x0800f167

0800eddc <_cleanup_r>:
 800eddc:	4901      	ldr	r1, [pc, #4]	; (800ede4 <_cleanup_r+0x8>)
 800edde:	f000 b8af 	b.w	800ef40 <_fwalk_reent>
 800ede2:	bf00      	nop
 800ede4:	0800ed1d 	.word	0x0800ed1d

0800ede8 <__sfmoreglue>:
 800ede8:	b570      	push	{r4, r5, r6, lr}
 800edea:	2268      	movs	r2, #104	; 0x68
 800edec:	1e4d      	subs	r5, r1, #1
 800edee:	4355      	muls	r5, r2
 800edf0:	460e      	mov	r6, r1
 800edf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800edf6:	f7ff fa59 	bl	800e2ac <_malloc_r>
 800edfa:	4604      	mov	r4, r0
 800edfc:	b140      	cbz	r0, 800ee10 <__sfmoreglue+0x28>
 800edfe:	2100      	movs	r1, #0
 800ee00:	e9c0 1600 	strd	r1, r6, [r0]
 800ee04:	300c      	adds	r0, #12
 800ee06:	60a0      	str	r0, [r4, #8]
 800ee08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ee0c:	f7fb fea6 	bl	800ab5c <memset>
 800ee10:	4620      	mov	r0, r4
 800ee12:	bd70      	pop	{r4, r5, r6, pc}

0800ee14 <__sfp_lock_acquire>:
 800ee14:	4801      	ldr	r0, [pc, #4]	; (800ee1c <__sfp_lock_acquire+0x8>)
 800ee16:	f000 b8b3 	b.w	800ef80 <__retarget_lock_acquire_recursive>
 800ee1a:	bf00      	nop
 800ee1c:	24000cc9 	.word	0x24000cc9

0800ee20 <__sfp_lock_release>:
 800ee20:	4801      	ldr	r0, [pc, #4]	; (800ee28 <__sfp_lock_release+0x8>)
 800ee22:	f000 b8ae 	b.w	800ef82 <__retarget_lock_release_recursive>
 800ee26:	bf00      	nop
 800ee28:	24000cc9 	.word	0x24000cc9

0800ee2c <__sinit_lock_acquire>:
 800ee2c:	4801      	ldr	r0, [pc, #4]	; (800ee34 <__sinit_lock_acquire+0x8>)
 800ee2e:	f000 b8a7 	b.w	800ef80 <__retarget_lock_acquire_recursive>
 800ee32:	bf00      	nop
 800ee34:	24000cca 	.word	0x24000cca

0800ee38 <__sinit_lock_release>:
 800ee38:	4801      	ldr	r0, [pc, #4]	; (800ee40 <__sinit_lock_release+0x8>)
 800ee3a:	f000 b8a2 	b.w	800ef82 <__retarget_lock_release_recursive>
 800ee3e:	bf00      	nop
 800ee40:	24000cca 	.word	0x24000cca

0800ee44 <__sinit>:
 800ee44:	b510      	push	{r4, lr}
 800ee46:	4604      	mov	r4, r0
 800ee48:	f7ff fff0 	bl	800ee2c <__sinit_lock_acquire>
 800ee4c:	69a3      	ldr	r3, [r4, #24]
 800ee4e:	b11b      	cbz	r3, 800ee58 <__sinit+0x14>
 800ee50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee54:	f7ff bff0 	b.w	800ee38 <__sinit_lock_release>
 800ee58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ee5c:	6523      	str	r3, [r4, #80]	; 0x50
 800ee5e:	4b13      	ldr	r3, [pc, #76]	; (800eeac <__sinit+0x68>)
 800ee60:	4a13      	ldr	r2, [pc, #76]	; (800eeb0 <__sinit+0x6c>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	62a2      	str	r2, [r4, #40]	; 0x28
 800ee66:	42a3      	cmp	r3, r4
 800ee68:	bf04      	itt	eq
 800ee6a:	2301      	moveq	r3, #1
 800ee6c:	61a3      	streq	r3, [r4, #24]
 800ee6e:	4620      	mov	r0, r4
 800ee70:	f000 f820 	bl	800eeb4 <__sfp>
 800ee74:	6060      	str	r0, [r4, #4]
 800ee76:	4620      	mov	r0, r4
 800ee78:	f000 f81c 	bl	800eeb4 <__sfp>
 800ee7c:	60a0      	str	r0, [r4, #8]
 800ee7e:	4620      	mov	r0, r4
 800ee80:	f000 f818 	bl	800eeb4 <__sfp>
 800ee84:	2200      	movs	r2, #0
 800ee86:	60e0      	str	r0, [r4, #12]
 800ee88:	2104      	movs	r1, #4
 800ee8a:	6860      	ldr	r0, [r4, #4]
 800ee8c:	f7ff ff82 	bl	800ed94 <std>
 800ee90:	68a0      	ldr	r0, [r4, #8]
 800ee92:	2201      	movs	r2, #1
 800ee94:	2109      	movs	r1, #9
 800ee96:	f7ff ff7d 	bl	800ed94 <std>
 800ee9a:	68e0      	ldr	r0, [r4, #12]
 800ee9c:	2202      	movs	r2, #2
 800ee9e:	2112      	movs	r1, #18
 800eea0:	f7ff ff78 	bl	800ed94 <std>
 800eea4:	2301      	movs	r3, #1
 800eea6:	61a3      	str	r3, [r4, #24]
 800eea8:	e7d2      	b.n	800ee50 <__sinit+0xc>
 800eeaa:	bf00      	nop
 800eeac:	0800f68c 	.word	0x0800f68c
 800eeb0:	0800eddd 	.word	0x0800eddd

0800eeb4 <__sfp>:
 800eeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeb6:	4607      	mov	r7, r0
 800eeb8:	f7ff ffac 	bl	800ee14 <__sfp_lock_acquire>
 800eebc:	4b1e      	ldr	r3, [pc, #120]	; (800ef38 <__sfp+0x84>)
 800eebe:	681e      	ldr	r6, [r3, #0]
 800eec0:	69b3      	ldr	r3, [r6, #24]
 800eec2:	b913      	cbnz	r3, 800eeca <__sfp+0x16>
 800eec4:	4630      	mov	r0, r6
 800eec6:	f7ff ffbd 	bl	800ee44 <__sinit>
 800eeca:	3648      	adds	r6, #72	; 0x48
 800eecc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eed0:	3b01      	subs	r3, #1
 800eed2:	d503      	bpl.n	800eedc <__sfp+0x28>
 800eed4:	6833      	ldr	r3, [r6, #0]
 800eed6:	b30b      	cbz	r3, 800ef1c <__sfp+0x68>
 800eed8:	6836      	ldr	r6, [r6, #0]
 800eeda:	e7f7      	b.n	800eecc <__sfp+0x18>
 800eedc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eee0:	b9d5      	cbnz	r5, 800ef18 <__sfp+0x64>
 800eee2:	4b16      	ldr	r3, [pc, #88]	; (800ef3c <__sfp+0x88>)
 800eee4:	60e3      	str	r3, [r4, #12]
 800eee6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eeea:	6665      	str	r5, [r4, #100]	; 0x64
 800eeec:	f000 f847 	bl	800ef7e <__retarget_lock_init_recursive>
 800eef0:	f7ff ff96 	bl	800ee20 <__sfp_lock_release>
 800eef4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eef8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eefc:	6025      	str	r5, [r4, #0]
 800eefe:	61a5      	str	r5, [r4, #24]
 800ef00:	2208      	movs	r2, #8
 800ef02:	4629      	mov	r1, r5
 800ef04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ef08:	f7fb fe28 	bl	800ab5c <memset>
 800ef0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ef10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ef14:	4620      	mov	r0, r4
 800ef16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef18:	3468      	adds	r4, #104	; 0x68
 800ef1a:	e7d9      	b.n	800eed0 <__sfp+0x1c>
 800ef1c:	2104      	movs	r1, #4
 800ef1e:	4638      	mov	r0, r7
 800ef20:	f7ff ff62 	bl	800ede8 <__sfmoreglue>
 800ef24:	4604      	mov	r4, r0
 800ef26:	6030      	str	r0, [r6, #0]
 800ef28:	2800      	cmp	r0, #0
 800ef2a:	d1d5      	bne.n	800eed8 <__sfp+0x24>
 800ef2c:	f7ff ff78 	bl	800ee20 <__sfp_lock_release>
 800ef30:	230c      	movs	r3, #12
 800ef32:	603b      	str	r3, [r7, #0]
 800ef34:	e7ee      	b.n	800ef14 <__sfp+0x60>
 800ef36:	bf00      	nop
 800ef38:	0800f68c 	.word	0x0800f68c
 800ef3c:	ffff0001 	.word	0xffff0001

0800ef40 <_fwalk_reent>:
 800ef40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef44:	4606      	mov	r6, r0
 800ef46:	4688      	mov	r8, r1
 800ef48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ef4c:	2700      	movs	r7, #0
 800ef4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef52:	f1b9 0901 	subs.w	r9, r9, #1
 800ef56:	d505      	bpl.n	800ef64 <_fwalk_reent+0x24>
 800ef58:	6824      	ldr	r4, [r4, #0]
 800ef5a:	2c00      	cmp	r4, #0
 800ef5c:	d1f7      	bne.n	800ef4e <_fwalk_reent+0xe>
 800ef5e:	4638      	mov	r0, r7
 800ef60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef64:	89ab      	ldrh	r3, [r5, #12]
 800ef66:	2b01      	cmp	r3, #1
 800ef68:	d907      	bls.n	800ef7a <_fwalk_reent+0x3a>
 800ef6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef6e:	3301      	adds	r3, #1
 800ef70:	d003      	beq.n	800ef7a <_fwalk_reent+0x3a>
 800ef72:	4629      	mov	r1, r5
 800ef74:	4630      	mov	r0, r6
 800ef76:	47c0      	blx	r8
 800ef78:	4307      	orrs	r7, r0
 800ef7a:	3568      	adds	r5, #104	; 0x68
 800ef7c:	e7e9      	b.n	800ef52 <_fwalk_reent+0x12>

0800ef7e <__retarget_lock_init_recursive>:
 800ef7e:	4770      	bx	lr

0800ef80 <__retarget_lock_acquire_recursive>:
 800ef80:	4770      	bx	lr

0800ef82 <__retarget_lock_release_recursive>:
 800ef82:	4770      	bx	lr

0800ef84 <__swhatbuf_r>:
 800ef84:	b570      	push	{r4, r5, r6, lr}
 800ef86:	460e      	mov	r6, r1
 800ef88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef8c:	2900      	cmp	r1, #0
 800ef8e:	b096      	sub	sp, #88	; 0x58
 800ef90:	4614      	mov	r4, r2
 800ef92:	461d      	mov	r5, r3
 800ef94:	da08      	bge.n	800efa8 <__swhatbuf_r+0x24>
 800ef96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	602a      	str	r2, [r5, #0]
 800ef9e:	061a      	lsls	r2, r3, #24
 800efa0:	d410      	bmi.n	800efc4 <__swhatbuf_r+0x40>
 800efa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efa6:	e00e      	b.n	800efc6 <__swhatbuf_r+0x42>
 800efa8:	466a      	mov	r2, sp
 800efaa:	f000 f903 	bl	800f1b4 <_fstat_r>
 800efae:	2800      	cmp	r0, #0
 800efb0:	dbf1      	blt.n	800ef96 <__swhatbuf_r+0x12>
 800efb2:	9a01      	ldr	r2, [sp, #4]
 800efb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800efb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800efbc:	425a      	negs	r2, r3
 800efbe:	415a      	adcs	r2, r3
 800efc0:	602a      	str	r2, [r5, #0]
 800efc2:	e7ee      	b.n	800efa2 <__swhatbuf_r+0x1e>
 800efc4:	2340      	movs	r3, #64	; 0x40
 800efc6:	2000      	movs	r0, #0
 800efc8:	6023      	str	r3, [r4, #0]
 800efca:	b016      	add	sp, #88	; 0x58
 800efcc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800efd0 <__smakebuf_r>:
 800efd0:	898b      	ldrh	r3, [r1, #12]
 800efd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800efd4:	079d      	lsls	r5, r3, #30
 800efd6:	4606      	mov	r6, r0
 800efd8:	460c      	mov	r4, r1
 800efda:	d507      	bpl.n	800efec <__smakebuf_r+0x1c>
 800efdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800efe0:	6023      	str	r3, [r4, #0]
 800efe2:	6123      	str	r3, [r4, #16]
 800efe4:	2301      	movs	r3, #1
 800efe6:	6163      	str	r3, [r4, #20]
 800efe8:	b002      	add	sp, #8
 800efea:	bd70      	pop	{r4, r5, r6, pc}
 800efec:	ab01      	add	r3, sp, #4
 800efee:	466a      	mov	r2, sp
 800eff0:	f7ff ffc8 	bl	800ef84 <__swhatbuf_r>
 800eff4:	9900      	ldr	r1, [sp, #0]
 800eff6:	4605      	mov	r5, r0
 800eff8:	4630      	mov	r0, r6
 800effa:	f7ff f957 	bl	800e2ac <_malloc_r>
 800effe:	b948      	cbnz	r0, 800f014 <__smakebuf_r+0x44>
 800f000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f004:	059a      	lsls	r2, r3, #22
 800f006:	d4ef      	bmi.n	800efe8 <__smakebuf_r+0x18>
 800f008:	f023 0303 	bic.w	r3, r3, #3
 800f00c:	f043 0302 	orr.w	r3, r3, #2
 800f010:	81a3      	strh	r3, [r4, #12]
 800f012:	e7e3      	b.n	800efdc <__smakebuf_r+0xc>
 800f014:	4b0d      	ldr	r3, [pc, #52]	; (800f04c <__smakebuf_r+0x7c>)
 800f016:	62b3      	str	r3, [r6, #40]	; 0x28
 800f018:	89a3      	ldrh	r3, [r4, #12]
 800f01a:	6020      	str	r0, [r4, #0]
 800f01c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f020:	81a3      	strh	r3, [r4, #12]
 800f022:	9b00      	ldr	r3, [sp, #0]
 800f024:	6163      	str	r3, [r4, #20]
 800f026:	9b01      	ldr	r3, [sp, #4]
 800f028:	6120      	str	r0, [r4, #16]
 800f02a:	b15b      	cbz	r3, 800f044 <__smakebuf_r+0x74>
 800f02c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f030:	4630      	mov	r0, r6
 800f032:	f000 f8d1 	bl	800f1d8 <_isatty_r>
 800f036:	b128      	cbz	r0, 800f044 <__smakebuf_r+0x74>
 800f038:	89a3      	ldrh	r3, [r4, #12]
 800f03a:	f023 0303 	bic.w	r3, r3, #3
 800f03e:	f043 0301 	orr.w	r3, r3, #1
 800f042:	81a3      	strh	r3, [r4, #12]
 800f044:	89a0      	ldrh	r0, [r4, #12]
 800f046:	4305      	orrs	r5, r0
 800f048:	81a5      	strh	r5, [r4, #12]
 800f04a:	e7cd      	b.n	800efe8 <__smakebuf_r+0x18>
 800f04c:	0800eddd 	.word	0x0800eddd

0800f050 <_malloc_usable_size_r>:
 800f050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f054:	1f18      	subs	r0, r3, #4
 800f056:	2b00      	cmp	r3, #0
 800f058:	bfbc      	itt	lt
 800f05a:	580b      	ldrlt	r3, [r1, r0]
 800f05c:	18c0      	addlt	r0, r0, r3
 800f05e:	4770      	bx	lr

0800f060 <_raise_r>:
 800f060:	291f      	cmp	r1, #31
 800f062:	b538      	push	{r3, r4, r5, lr}
 800f064:	4604      	mov	r4, r0
 800f066:	460d      	mov	r5, r1
 800f068:	d904      	bls.n	800f074 <_raise_r+0x14>
 800f06a:	2316      	movs	r3, #22
 800f06c:	6003      	str	r3, [r0, #0]
 800f06e:	f04f 30ff 	mov.w	r0, #4294967295
 800f072:	bd38      	pop	{r3, r4, r5, pc}
 800f074:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f076:	b112      	cbz	r2, 800f07e <_raise_r+0x1e>
 800f078:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f07c:	b94b      	cbnz	r3, 800f092 <_raise_r+0x32>
 800f07e:	4620      	mov	r0, r4
 800f080:	f000 f830 	bl	800f0e4 <_getpid_r>
 800f084:	462a      	mov	r2, r5
 800f086:	4601      	mov	r1, r0
 800f088:	4620      	mov	r0, r4
 800f08a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f08e:	f000 b817 	b.w	800f0c0 <_kill_r>
 800f092:	2b01      	cmp	r3, #1
 800f094:	d00a      	beq.n	800f0ac <_raise_r+0x4c>
 800f096:	1c59      	adds	r1, r3, #1
 800f098:	d103      	bne.n	800f0a2 <_raise_r+0x42>
 800f09a:	2316      	movs	r3, #22
 800f09c:	6003      	str	r3, [r0, #0]
 800f09e:	2001      	movs	r0, #1
 800f0a0:	e7e7      	b.n	800f072 <_raise_r+0x12>
 800f0a2:	2400      	movs	r4, #0
 800f0a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f0a8:	4628      	mov	r0, r5
 800f0aa:	4798      	blx	r3
 800f0ac:	2000      	movs	r0, #0
 800f0ae:	e7e0      	b.n	800f072 <_raise_r+0x12>

0800f0b0 <raise>:
 800f0b0:	4b02      	ldr	r3, [pc, #8]	; (800f0bc <raise+0xc>)
 800f0b2:	4601      	mov	r1, r0
 800f0b4:	6818      	ldr	r0, [r3, #0]
 800f0b6:	f7ff bfd3 	b.w	800f060 <_raise_r>
 800f0ba:	bf00      	nop
 800f0bc:	24000010 	.word	0x24000010

0800f0c0 <_kill_r>:
 800f0c0:	b538      	push	{r3, r4, r5, lr}
 800f0c2:	4d07      	ldr	r5, [pc, #28]	; (800f0e0 <_kill_r+0x20>)
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	4604      	mov	r4, r0
 800f0c8:	4608      	mov	r0, r1
 800f0ca:	4611      	mov	r1, r2
 800f0cc:	602b      	str	r3, [r5, #0]
 800f0ce:	f7f3 fb31 	bl	8002734 <_kill>
 800f0d2:	1c43      	adds	r3, r0, #1
 800f0d4:	d102      	bne.n	800f0dc <_kill_r+0x1c>
 800f0d6:	682b      	ldr	r3, [r5, #0]
 800f0d8:	b103      	cbz	r3, 800f0dc <_kill_r+0x1c>
 800f0da:	6023      	str	r3, [r4, #0]
 800f0dc:	bd38      	pop	{r3, r4, r5, pc}
 800f0de:	bf00      	nop
 800f0e0:	24000cc4 	.word	0x24000cc4

0800f0e4 <_getpid_r>:
 800f0e4:	f7f3 bb1e 	b.w	8002724 <_getpid>

0800f0e8 <__sread>:
 800f0e8:	b510      	push	{r4, lr}
 800f0ea:	460c      	mov	r4, r1
 800f0ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0f0:	f000 f894 	bl	800f21c <_read_r>
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	bfab      	itete	ge
 800f0f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f0fa:	89a3      	ldrhlt	r3, [r4, #12]
 800f0fc:	181b      	addge	r3, r3, r0
 800f0fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f102:	bfac      	ite	ge
 800f104:	6563      	strge	r3, [r4, #84]	; 0x54
 800f106:	81a3      	strhlt	r3, [r4, #12]
 800f108:	bd10      	pop	{r4, pc}

0800f10a <__swrite>:
 800f10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f10e:	461f      	mov	r7, r3
 800f110:	898b      	ldrh	r3, [r1, #12]
 800f112:	05db      	lsls	r3, r3, #23
 800f114:	4605      	mov	r5, r0
 800f116:	460c      	mov	r4, r1
 800f118:	4616      	mov	r6, r2
 800f11a:	d505      	bpl.n	800f128 <__swrite+0x1e>
 800f11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f120:	2302      	movs	r3, #2
 800f122:	2200      	movs	r2, #0
 800f124:	f000 f868 	bl	800f1f8 <_lseek_r>
 800f128:	89a3      	ldrh	r3, [r4, #12]
 800f12a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f12e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f132:	81a3      	strh	r3, [r4, #12]
 800f134:	4632      	mov	r2, r6
 800f136:	463b      	mov	r3, r7
 800f138:	4628      	mov	r0, r5
 800f13a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f13e:	f000 b817 	b.w	800f170 <_write_r>

0800f142 <__sseek>:
 800f142:	b510      	push	{r4, lr}
 800f144:	460c      	mov	r4, r1
 800f146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f14a:	f000 f855 	bl	800f1f8 <_lseek_r>
 800f14e:	1c43      	adds	r3, r0, #1
 800f150:	89a3      	ldrh	r3, [r4, #12]
 800f152:	bf15      	itete	ne
 800f154:	6560      	strne	r0, [r4, #84]	; 0x54
 800f156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f15a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f15e:	81a3      	strheq	r3, [r4, #12]
 800f160:	bf18      	it	ne
 800f162:	81a3      	strhne	r3, [r4, #12]
 800f164:	bd10      	pop	{r4, pc}

0800f166 <__sclose>:
 800f166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f16a:	f000 b813 	b.w	800f194 <_close_r>
	...

0800f170 <_write_r>:
 800f170:	b538      	push	{r3, r4, r5, lr}
 800f172:	4d07      	ldr	r5, [pc, #28]	; (800f190 <_write_r+0x20>)
 800f174:	4604      	mov	r4, r0
 800f176:	4608      	mov	r0, r1
 800f178:	4611      	mov	r1, r2
 800f17a:	2200      	movs	r2, #0
 800f17c:	602a      	str	r2, [r5, #0]
 800f17e:	461a      	mov	r2, r3
 800f180:	f7f3 fb0f 	bl	80027a2 <_write>
 800f184:	1c43      	adds	r3, r0, #1
 800f186:	d102      	bne.n	800f18e <_write_r+0x1e>
 800f188:	682b      	ldr	r3, [r5, #0]
 800f18a:	b103      	cbz	r3, 800f18e <_write_r+0x1e>
 800f18c:	6023      	str	r3, [r4, #0]
 800f18e:	bd38      	pop	{r3, r4, r5, pc}
 800f190:	24000cc4 	.word	0x24000cc4

0800f194 <_close_r>:
 800f194:	b538      	push	{r3, r4, r5, lr}
 800f196:	4d06      	ldr	r5, [pc, #24]	; (800f1b0 <_close_r+0x1c>)
 800f198:	2300      	movs	r3, #0
 800f19a:	4604      	mov	r4, r0
 800f19c:	4608      	mov	r0, r1
 800f19e:	602b      	str	r3, [r5, #0]
 800f1a0:	f7f3 fb1b 	bl	80027da <_close>
 800f1a4:	1c43      	adds	r3, r0, #1
 800f1a6:	d102      	bne.n	800f1ae <_close_r+0x1a>
 800f1a8:	682b      	ldr	r3, [r5, #0]
 800f1aa:	b103      	cbz	r3, 800f1ae <_close_r+0x1a>
 800f1ac:	6023      	str	r3, [r4, #0]
 800f1ae:	bd38      	pop	{r3, r4, r5, pc}
 800f1b0:	24000cc4 	.word	0x24000cc4

0800f1b4 <_fstat_r>:
 800f1b4:	b538      	push	{r3, r4, r5, lr}
 800f1b6:	4d07      	ldr	r5, [pc, #28]	; (800f1d4 <_fstat_r+0x20>)
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	4608      	mov	r0, r1
 800f1be:	4611      	mov	r1, r2
 800f1c0:	602b      	str	r3, [r5, #0]
 800f1c2:	f7f3 fb16 	bl	80027f2 <_fstat>
 800f1c6:	1c43      	adds	r3, r0, #1
 800f1c8:	d102      	bne.n	800f1d0 <_fstat_r+0x1c>
 800f1ca:	682b      	ldr	r3, [r5, #0]
 800f1cc:	b103      	cbz	r3, 800f1d0 <_fstat_r+0x1c>
 800f1ce:	6023      	str	r3, [r4, #0]
 800f1d0:	bd38      	pop	{r3, r4, r5, pc}
 800f1d2:	bf00      	nop
 800f1d4:	24000cc4 	.word	0x24000cc4

0800f1d8 <_isatty_r>:
 800f1d8:	b538      	push	{r3, r4, r5, lr}
 800f1da:	4d06      	ldr	r5, [pc, #24]	; (800f1f4 <_isatty_r+0x1c>)
 800f1dc:	2300      	movs	r3, #0
 800f1de:	4604      	mov	r4, r0
 800f1e0:	4608      	mov	r0, r1
 800f1e2:	602b      	str	r3, [r5, #0]
 800f1e4:	f7f3 fb15 	bl	8002812 <_isatty>
 800f1e8:	1c43      	adds	r3, r0, #1
 800f1ea:	d102      	bne.n	800f1f2 <_isatty_r+0x1a>
 800f1ec:	682b      	ldr	r3, [r5, #0]
 800f1ee:	b103      	cbz	r3, 800f1f2 <_isatty_r+0x1a>
 800f1f0:	6023      	str	r3, [r4, #0]
 800f1f2:	bd38      	pop	{r3, r4, r5, pc}
 800f1f4:	24000cc4 	.word	0x24000cc4

0800f1f8 <_lseek_r>:
 800f1f8:	b538      	push	{r3, r4, r5, lr}
 800f1fa:	4d07      	ldr	r5, [pc, #28]	; (800f218 <_lseek_r+0x20>)
 800f1fc:	4604      	mov	r4, r0
 800f1fe:	4608      	mov	r0, r1
 800f200:	4611      	mov	r1, r2
 800f202:	2200      	movs	r2, #0
 800f204:	602a      	str	r2, [r5, #0]
 800f206:	461a      	mov	r2, r3
 800f208:	f7f3 fb0e 	bl	8002828 <_lseek>
 800f20c:	1c43      	adds	r3, r0, #1
 800f20e:	d102      	bne.n	800f216 <_lseek_r+0x1e>
 800f210:	682b      	ldr	r3, [r5, #0]
 800f212:	b103      	cbz	r3, 800f216 <_lseek_r+0x1e>
 800f214:	6023      	str	r3, [r4, #0]
 800f216:	bd38      	pop	{r3, r4, r5, pc}
 800f218:	24000cc4 	.word	0x24000cc4

0800f21c <_read_r>:
 800f21c:	b538      	push	{r3, r4, r5, lr}
 800f21e:	4d07      	ldr	r5, [pc, #28]	; (800f23c <_read_r+0x20>)
 800f220:	4604      	mov	r4, r0
 800f222:	4608      	mov	r0, r1
 800f224:	4611      	mov	r1, r2
 800f226:	2200      	movs	r2, #0
 800f228:	602a      	str	r2, [r5, #0]
 800f22a:	461a      	mov	r2, r3
 800f22c:	f7f3 fa9c 	bl	8002768 <_read>
 800f230:	1c43      	adds	r3, r0, #1
 800f232:	d102      	bne.n	800f23a <_read_r+0x1e>
 800f234:	682b      	ldr	r3, [r5, #0]
 800f236:	b103      	cbz	r3, 800f23a <_read_r+0x1e>
 800f238:	6023      	str	r3, [r4, #0]
 800f23a:	bd38      	pop	{r3, r4, r5, pc}
 800f23c:	24000cc4 	.word	0x24000cc4

0800f240 <_init>:
 800f240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f242:	bf00      	nop
 800f244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f246:	bc08      	pop	{r3}
 800f248:	469e      	mov	lr, r3
 800f24a:	4770      	bx	lr

0800f24c <_fini>:
 800f24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f24e:	bf00      	nop
 800f250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f252:	bc08      	pop	{r3}
 800f254:	469e      	mov	lr, r3
 800f256:	4770      	bx	lr
